{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/",
            "url": "https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/",
            "title": "C++编译与工程构建",
            "date_published": "2023-10-27T09:45:08.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在课程中写的都是代码量不大的小文件，但是在实际工程开发中，情况可就不一样了。但是那么多的代码，我们不可能将它们放在同一个文件中，肯定要分成不同的源文件。但是如何分解程序？如何实现程序之间的交流，就成了一个问题。本节中我们将探讨如何将一个大的工程分成不同的源程序，并且实现这些源程序之间的交流。我们首先介绍 C++ 的编译模型，也就是 C++ 源程序是如何编译成为机器可理解的二进制代码的。然后，我们讨论如何将一个大的工程分解为多个小的源程序，并且实现他们之间的交流。最后，我们探讨 C++ 的预处理器的工作模式。</p>\n<h1 id=\"C-编译模型\"><a href=\"#C-编译模型\" class=\"headerlink\" title=\"C++ 编译模型\"></a>C++ 编译模型</h1><p>C++ 是一种编译型的语言，即通过编译器将源代码转化为机器可以理解的二进制代码。其编译过程分为 3 个阶段：</p>\n<ul>\n<li>预处理阶段：扩展头文件，进行宏替换等</li>\n<li>编译阶段：将预处理后的高级语言代码转化为机器可以理解的二进制代码，即目标文件。在这个阶段，编译器会检查一些语法错误，如漏掉了<code>;</code>等</li>\n<li>链接阶段：将生成的多个目标文件合并成一个最终的可执行文件</li>\n</ul>\n<p>语法错误主要集中在编译阶段进行检查，而程序的一些其他问题则多半是出现在链接阶段。例如，程序可能定义了一个函数的原型，并且对他进行了调用，但是却没有实现这个函数。又或者，定义的函数原型和实现不一样，按照函数原型进行调用以后，程序找不到函数的实现。有的人会奇怪为什么这种错误会出现在链接阶段，是因为链接器没有在这个文件中找到函数原型时，他会本能的想到是不是在需要链接的其他文件中。如果在其他文件中也没有找到的话，链接器才会告诉你出现了链接错误。</p>\n<h1 id=\"模块化与分解\"><a href=\"#模块化与分解\" class=\"headerlink\" title=\"模块化与分解\"></a>模块化与分解</h1><p>通常来说，对于一个大的工程问题，我们无法一口气思考到所有的细节。而在这种情况下，我们倾向于将问题分解成不同的模块，然后通过不同模块间的合作和交流来解决。但是，如何确定模块划分的粒度呢？毕竟越往下分，细节就越多。而在这个时候，我们会选择使用一些抽象的接口。举个例子，我们无需设计 C++ STL，只需要调用其提供给我们的接口，便可以实现多种功能。而这就是模块划分的尽头。<br>对于模块化，通常来说遵循 3 个原则：</p>\n<ul>\n<li>简单化：提供一个较为简单的接口</li>\n<li>可扩展：在需要的时候，我们可以在不改变接口的条件下改变其实现方式。</li>\n<li>可复用：接口足够泛用（使用泛型，模板之类），可以保证函数可以被用在多个不同的项目中</li>\n</ul>\n<h1 id=\"C-预处理器\"><a href=\"#C-预处理器\" class=\"headerlink\" title=\"C++ 预处理器\"></a>C++ 预处理器</h1><h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在编写 C++ 程序时，我们通常把一个程序分为<code>file.h</code>和<code>file.cpp</code>两个部分。<code>file.h</code>中描述的是程序提供的类及函数接口（定义），而<code>.cpp</code>文件中描述的是其实现。此外，通常在<code>.h</code>文件的前后，会加上如下内容：</p>\n<pre><code class=\"cpp\">#ifndef StrUtils_Included\n#define StrUtils_Included\n\n#include &lt;string&gt;\nusing namespace std;\nstring ConvertToUpperCase(string input);\nstring ConvertToLowerCase(string input);\nstring IntegerToString(int value);\nstring DoubleToString(double value);\n\n#endif\n</code></pre>\n<h2 id=\"include头文件\"><a href=\"#include头文件\" class=\"headerlink\" title=\"include头文件\"></a><code>include</code>头文件</h2><p>其作用在于将头文件的内容复制到<code>#include</code>处。头文件分为两种，一种用<code>&lt;&gt;</code>包起，是 C++ 标准库中的文件；而另外一种用<code>&quot;&quot;</code>包起，是用户自定义的头文件，编译器会在当前工程文件夹下找。</p>\n<h2 id=\"define定义与替换\"><a href=\"#define定义与替换\" class=\"headerlink\" title=\"define定义与替换\"></a><code>define</code>定义与替换</h2><p>宏定义的基本格式是<code>define val replacement</code>。在进行宏替换时，做的不是值替换，而是普通的字符串的替换。即将程序中所有的<code>val</code>都替换成<code>replacement</code>。在进行宏替换时编译器并不理解这到底是什么东西，就是简单的左无脑替换。因此在替换时必须要注意，譬如：</p>\n<pre><code class=\"cpp\">#define a 5 + 10\n...\nint b = 2 * a;\n</code></pre>\n<p>在进行宏替换后，效果如下：</p>\n<pre><code class=\"cpp\">int b = 2 * 5 + 10;\n</code></pre>\n<p>而不是:</p>\n<pre><code class=\"cpp\">int b = 2 * (5 + 10);\n</code></pre>\n<p>因为它做的仅仅是简单的字符串替换。这种错误经常发生，而要避免这类错误的方法是：</p>\n<ol>\n<li>在<code>define</code>时使用<code>()</code>圆括号</li>\n<li>使用<code>const</code>语句</li>\n</ol>\n<h2 id=\"include-guard\"><a href=\"#include-guard\" class=\"headerlink\" title=\"include guard\"></a><code>include guard</code></h2><p>预处理语句可以通过条件判断来决定是否要定义某些文件，一个简单的格式如下：</p>\n<pre><code class=\"cpp\">ifndef...define...endif\n</code></pre>\n<p>这套语句的基本意思是：如果已经<code>#include</code>过上述文件，就不需要再定义一次了。C++ 工程文件之间相互<code>#include</code>是家常便饭，这样做是为了防止由于多次互相<code>#include</code>带来的重定义问题。上述语句只是一个较为简化的版本，更为完整的定义是：</p>\n<pre><code class=\"cpp\">  #if statement\n  ...\n  #elif another-statement\n  ...\n  #elif yet-another-statement\n  ...\n  #else\n  ...\n  #endif\n</code></pre>\n<p>这其中的<code>statement</code>可以是条件判断语句，也可以是<code>define()</code>语句。做条件判断时，使用的必须是已经定义过的变量，如：</p>\n<pre><code class=\"cpp\">  #if MY_CONSTANT &gt; 137 // Legal\n  #if MY_CONSTANT * 42 == MY_CONSTANT // Legal\n  #if sqrt(MY_CONSTANT) &lt; 4 // Illegal, cannot call function sqrt\n  #if MY_CONSTANT == 3.14 // Illegal, can only use integral values\n</code></pre>\n<p>而使用<code>define</code>语句时，如果变量已经定义，则<code>define()</code>返回<code>true</code>，否则返回<code>false</code>。例如：</p>\n<pre><code class=\"cpp\">  #if defined(MY_CONSTANT) // Evaluates to true.\n  #if defined(OTHER_CONSTANT) // Evaluates to false.\n  #if !defined(MY_CONSTANT) // Evaluates to false.\n</code></pre>\n<p>其判断结果被应用在<code>if</code>语句中。例如：</p>\n<pre><code class=\"cpp\">#if defined(A)\n    cout &lt;&lt; &quot;A is defined.&quot; &lt;&lt; endl;\n#elif defined(B)\n    cout &lt;&lt; &quot;B is defined.&quot; &lt;&lt; endl;\n#elif defined(C)\n     cout &lt;&lt; &quot;C is defined.&quot; &lt;&lt; endl;\n#else\n    cout &lt;&lt; &quot;None of A, B, or C is defined.&quot; &lt;&lt; endl;\n#endif\n</code></pre>\n<p>这套语句的效果相当于将所有<code>include</code>的内容复制粘贴到源程序中，但是注释掉重复定义的部分。它和注释不一样之处在于，这套语句可以嵌套，而注释不能。</p>\n<h2 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h2><h2 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h2>",
            "tags": [
                "C++",
                "CMake",
                "Makefile"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%9D%82%E8%B0%88/C++%E7%9A%84%E8%AF%9E%E7%94%9F%E4%B8%8E%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/",
            "url": "https://salvely.github.io/blog/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%9D%82%E8%B0%88/C++%E7%9A%84%E8%AF%9E%E7%94%9F%E4%B8%8E%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/",
            "title": "C++的诞生与一些思考",
            "date_published": "2023-10-25T06:00:48.000Z",
            "content_html": "<p>最近在学习斯坦福的 CS106L，学习标准 C++。在阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm\">Course Reader</span>的 Introduction 部分时，作者介绍了 C++的诞生故事，对我颇有启发。</p>\n<p>C++的创始人在剑桥大学读 PhD 时，主要研究的是分布式系统。在当时，他使用了一种叫 Simula 的面向对象语言。他在 Simula 中初始化电脑对象和网络对象，来模拟系统之间通过网络的交互。但是在开发的过程中，他发现，虽然使用 Simula 来对整个过程进行模拟，非常的快速，但是 Simula 的执行速度非常慢。而后，他又尝试通过一种名为 BCPL 的语言进行开发。但是新的问题又出现了，这种语言是一种较底层的系统语言，并不具备面向对象等特性。虽然执行速度快，但是搭建系统的过程非常的痛苦和繁琐。</p>\n<p>在博士毕业后，他来到了贝尔实验室工作。在这里他接触了一门高效的高级语言，C 语言。此后，他在 C 语言的基础上，拓展了类，而后又增加了一些新的特性。他把这种语言称之为 C++。</p>\n<p>从他的故事来看，再结合之前 OpenAI 创始人的书《伟大不能被计划》，我们可以看到，有的时候我们在探索目标的过程中，可能会遇到一些新的尚未发现过的东西，探索这项新知，可能会让我们更慢达到目标，但是可以让我们在沿途看到更多的风景。 C++ 创始人在研究分布式系统的过程中，意外创造了 C++ 语言。有的人可能会因为创造一门语言所需要的工作量而被劝退，殊不知这正是伟大的开端。有时候我们在是做事情时，可以多想一点点，多做一点点，多探索，多思考，多创造，而不是重复原有的工作，那正是创造力和新世界的大门。</p>\n",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/",
            "url": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/",
            "title": "C++参考资料",
            "date_published": "2023-10-22T08:47:56.000Z",
            "content_html": "<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc29jcHAuZ2l0aHViLmlvL0NwcENvcmVHdWlkZWxpbmVzL0NwcENvcmVHdWlkZWxpbmVz\">C++ Core Guidelines</span></li>\n<li></li>\n</ul>\n",
            "tags": [
                "C++",
                "参考资料"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/",
            "url": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/",
            "title": "Stanford CS106L:Standard C++ Programming",
            "date_published": "2023-10-22T03:36:26.000Z",
            "content_html": "<h1 id=\"课程资料\"><a href=\"#课程资料\" class=\"headerlink\" title=\"课程资料\"></a>课程资料</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUs4NDExYjdBVS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTg1YWNmMGE1OWRlZDAyZTRjNzVhZTExNThiYWNhMjA3\">Video</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjI0Lw==\">Slides&#x2F;Code</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm\">Course Reader</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9hc3NpZ25tZW50LXNldHVw\">Assignment</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29yZ3MvY291cnNld29ya3MvcmVwb3NpdG9yaWVzP3E9QVAxNDAxLTImdHlwZT1hbGwmbGFuZ3VhZ2U9JnNvcnQ9\">AP1401-2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjEyLw==\">Spring 2021 资料</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9sZWN0dXJlcy8=\">综合资料</span></li>\n</ul>\n<h1 id=\"学习流程\"><a href=\"#学习流程\" class=\"headerlink\" title=\"学习流程\"></a>学习流程</h1><pre><code class=\"cpp\">for(int i = 0; i &lt; 17; i++) &#123;\n    1. 阅读 Course Reader对应章节\n    2. 观看video\n    3. 阅读Slides\n    4. 整理Code\n&#125;\n</code></pre>\n<p>以上流程完成后：</p>\n<ol>\n<li>完成 CS106L 所有 Assignment</li>\n<li>完成 AP1401-2 所有作业</li>\n</ol>\n<h1 id=\"Welcome\"><a href=\"#Welcome\" class=\"headerlink\" title=\"Welcome\"></a>Welcome</h1><p>本节课主要讲述了 C++的应用前景，历史发展和设计哲学。</p>\n<h2 id=\"C-应用前景\"><a href=\"#C-应用前景\" class=\"headerlink\" title=\"C++应用前景\"></a>C++应用前景</h2><p><img data-src=\"/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/future.png\" alt=\"C++应用前景\"></p>\n<h2 id=\"C-的历史\"><a href=\"#C-的历史\" class=\"headerlink\" title=\"C++的历史\"></a>C++的历史</h2><h3 id=\"汇编语言\"><a href=\"#汇编语言\" class=\"headerlink\" title=\"汇编语言\"></a>汇编语言</h3><p>在早期阶段，尚没有高级语言这一说。程序员大多使用汇编语言编写程序，汇编语言的好处在于：</p>\n<ul>\n<li>使用较为简单的指令进行编程</li>\n<li>汇编语言执行速度较快</li>\n<li>程序员可以直接操作计算机底层寄存器等</li>\n</ul>\n<p>但是，汇编语言编程也有它的缺陷，缺陷就在于：</p>\n<ul>\n<li>程序涉及到对计算机底层硬件的基础操作，而不只是处理逻辑，因此对其他程序员来说，阅读起来较为困难</li>\n<li>因为汇编语言涉及到指令集架构，而指令集架构和计算机底层硬件和操作系统紧密相关，因此在一台机器上运行的程序可能无法迁移到另一台程序，简单来说就是可移植性较差</li>\n<li>汇编语言编写的程序因为使用的是一些基本的操作，因此程序较长</li>\n</ul>\n<p>因此，<code>Ken Thompson</code>和<code>Dennis Ritchie</code>于 1972 年发明了 C 语言。</p>\n<h3 id=\"C-语言\"><a href=\"#C-语言\" class=\"headerlink\" title=\"C 语言\"></a>C 语言</h3><p>C 语言是一门高级语言，相较汇编，它的优势在于：</p>\n<ul>\n<li>面向过程编程，较为简单。程序员在编写程序时，无需考虑计算机底层架构，而只需要考虑处理逻辑，因此编程较为简单</li>\n<li>C 语言可以由编译器编译为汇编指令，在不同的机器上，可以编译出不同的汇编指令，而后汇编器又可以将汇编指令转化为针对该计算机指令集架构的机器指令，实现 C 语言的可迁移性</li>\n<li>C 语言程序执行速度非常快</li>\n</ul>\n<p>然而，在面对更复杂的编程问题时，C 语言也表现出了它的不足：</p>\n<ul>\n<li>C 语言是面向过程的语言，它无法面向对象。当我们需要更复杂的结构和它的一系列方法时，C 语言只为我们提供了一些有限的结构，无法满足我们对高级结构的需求</li>\n<li>C 语言无法对不同类型提供一个泛化的模板，对于不同类型的传入参数，我们可能需要重复写多个几乎一致的处理函数</li>\n<li>写大型项目时，很多时候很难将一个问题拆解为一个面向过程的模型，不是所有问题都可以使用模块化的过程方法解决</li>\n<li>写出来的程序较长</li>\n</ul>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><p>针对 C 语言的问题，<code>Bjarne Stroustrup</code>于 1983 年开发了 C++ 语言，他希望能够在 C 语言基础上实现一个具有多种不同特性的高级语言。 C++ 语言一开始只是<code>C with classes</code>，实现了 C 语言面向对象的延伸。而后逐步发展，直到今天的<code>C++23</code>。</p>\n<p><img data-src=\"/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/evolution.png\" alt=\"C++的演化\"></p>\n<h2 id=\"C-的几大特性\"><a href=\"#C-的几大特性\" class=\"headerlink\" title=\"C++的几大特性\"></a>C++的几大特性</h2><ul>\n<li>通用语言<br>有的语言可以在应用到多个场景中，但是在解决特定场景问题时会显得复杂，比如 C++ 在做矩阵乘除法时，需要程序员手动编写程序，效率较低。但是 C++ 的用途很广。而有的语言，可以解决特定问题，但是并不泛用。比如 Matlab 在做科学计算时非常的常用，但是在解决其他问题时并没有 C++ 高效。</li>\n<li>编译型语言<br>高级语言需要转换成机器可以阅读的二进制码才能被计算机执行。而高级语言分为编译型和解释型。其区别在于，解释型语言使用解释器(Interpreters)进行翻译，一边翻译一边执行。解释器在执行一条语句的同时，获取下一条语句。而编译型语言使用编译器进行编译。将整个源代码编译完成后，直接执行生成的二进制码。</li>\n<li>静态类型语言<br>静态类型语言是指语句中的每个变量在声明后都有固定的类型，一旦确定，不能随意更改。而动态类型（如 Python、Javascript）会在执行的过程中动态的判断变量的类型。静态类型语言会在编译阶段检查语句是否合法，否则产生编译错误。而动态类型通常无法在编译阶段确定该语句是否有编译错误，错误均在程序运行时产生，也称为运行时错误。编译阶段排错让运行时错误出现的概率大大降低。这样无需运行即可排除程序错误。</li>\n<li>多范式语言<br>部分语言只有单一范式，如 C 语言，无法编写面向对象程序。而 C++可以同时实现面向对象特性，泛型特性，和面向过程的特性。非常灵活。</li>\n<li>中间语言<br>部分底层语言（如汇编）直接和计算机内存打交道，但是利用其写出的程序逻辑不清晰，难以理解。而部分语言无法直接对计算机底层进行操纵（如 Python、Java)等，程序员在编写程序时就像是被禁锢，无法探索底层的奥秘。C++可以像 C 语言那样接触底层硬件（利用指针），也可以利用其面向对象特性构造大型程序，同时实现封装和抽象。触及底层系统和实现抽象的目的同时达到，非常便于程序员大展身手。</li>\n</ul>\n<h2 id=\"C-的设计哲学\"><a href=\"#C-的设计哲学\" class=\"headerlink\" title=\"C++的设计哲学\"></a>C++的设计哲学</h2><ul>\n<li>只有在需要解决特定问题时引入新的特性</li>\n<li>程序员可以自由选择编程风格</li>\n<li>隐藏实现细节，抽象出编程接口</li>\n<li>让程序员能够完全以自己想要的方式编写程序</li>\n<li>让编写的程序尽可能高效</li>\n<li>编译时进行类型检查</li>\n<li>可以兼容早期版本程序，也兼容 C 语言程序</li>\n</ul>\n<h2 id=\"C-的应用\"><a href=\"#C-的应用\" class=\"headerlink\" title=\"C++的应用\"></a>C++的应用</h2><ul>\n<li>浏览器</li>\n<li>JVM</li>\n<li>火星探索车</li>\n<li>等等</li>\n</ul>\n<h1 id=\"Type-and-Structs\"><a href=\"#Type-and-Structs\" class=\"headerlink\" title=\"Type and Structs\"></a>Type and Structs</h1><p>关于类型和结构体没什么好说的，主要的用法和 C 语言中差不多。但是<code>string</code>类在使用之前需要在程序最开始处<code>#include&lt;string&gt;</code>，并且最好是不要使用<code>using namespace std</code>，而是使用<code>std::string</code>，对于<code>std::cout</code>和<code>std::cin</code>也是一样。这样做是为了保证程序员在自主开发时，不和<code>std</code>域内的的东西重名导致出错。</p>\n<h2 id=\"std-pair\"><a href=\"#std-pair\" class=\"headerlink\" title=\"std::pair\"></a><code>std::pair</code></h2><p>一种<code>STL</code>内置结构，其中包括两个域。<code>std::pair</code>相当于是个模板，其中域的类型随意。声明时使用如下格式：</p>\n<pre><code class=\"cpp\">std::pair&lt;int,string&gt; p = &#123;1,&quot;st&quot;&#125;;\n</code></pre>\n<p>此外，还可以在程序中使用如下方法构建<code>std::pair</code>：</p>\n<pre><code class=\"cpp\">std::pair&lt;int,string&gt; p = std::make_pair(1,&quot;st&quot;);\n</code></pre>\n<p>在使用<code>pair</code>时，分别用<code>p.first</code>和<code>p.second</code>来引用两个域。</p>\n<h2 id=\"auto类型推导\"><a href=\"#auto类型推导\" class=\"headerlink\" title=\"auto类型推导\"></a><code>auto</code>类型推导</h2><p>使用<code>auto</code>变量表示允许编译器自行推导值的类型。<br>:::info<br>什么时候使用<code>auto</code>？</p>\n<ul>\n<li>使用迭代器时，我不关心值的类型</li>\n<li>使用模板时，值的类型已经可以根据上下文推断出来</li>\n<li>使用<code>lambda</code>时，咱不知道值是啥类型</li>\n<li>没那个必要时，尽量不要将<code>auto</code>作为返回值类型</li>\n</ul>\n<p>:::</p>\n<h1 id=\"Streams\"><a href=\"#Streams\" class=\"headerlink\" title=\"Streams\"></a>Streams</h1><blockquote>\n<p>How can we convert between string-represented data and the real thing? Streams!</p>\n</blockquote>\n<p>本节首先介绍了什么是环境，而后引入<code>Stream</code>的概念，讲解了<code>Streams</code>在读入和写出数据时的一些特点。而<code>Streams</code>可以利用<code>cin</code>和<code>cout</code>这两种<code>iostream</code>类的对象，实现从标准输入和控制台进行读取。也可以通过<code>ifstream</code>和<code>ofstream</code>两种来实现文件的读取和写入。亦可以通过<code>istringstrean</code>和<code>ostringstream</code>来实现字符串和其他类型之间的连接。但是普通的<code>cin</code>和<code>cout</code>在使用时也可能出现读取的问题，因此我们还可以使用<code>std::getline()</code>来进行一行一次的读取。此外，在使用<code>Stream</code>时，还应该注意判别读取异常和写入异常。</p>\n<h2 id=\"Streams-Overview\"><a href=\"#Streams-Overview\" class=\"headerlink\" title=\"Streams Overview\"></a>Streams Overview</h2><h3 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h3><p>在学习 Stream 之前，我们先要了解<code>Environment</code>（环境）的概念。我们家里有温度计，我们通常通过温度计上的水银球去检测环境温度，然后将摄氏度显示在数轴上，人们通过观测数轴上的数字来查看当前温度。在这个例子中，外界就是环境，水银球就是将温度转化为实际示数的媒介，而数轴就是温度的输出，将温度显示出来供人们了解。而在程序编写的过程中，也可能存在一个外部环境，程序需要从这个环境获取信息，然后在利用一些处理逻辑来进行一些计算，最后返回输出或者将输出打印在屏幕上。这个环境可能是用户输入，也可能是外部文件，还有可能是其他程序。</p>\n<h3 id=\"Stream-是什么\"><a href=\"#Stream-是什么\" class=\"headerlink\" title=\"Stream 是什么\"></a>Stream 是什么</h3><blockquote>\n<p>Streams is an abstraction for input and output. Streams convert between data and the string representation of data.</p>\n</blockquote>\n<p>Stream 是程序与外部环境交流的媒介。Stream 的输入与输出可能来自用户，也可能来自程序，也可能来自其他文件。如果要将一个变量输出到终端，那么变量就会以字符串的形式打入 Stream，然后 Stream 将其输出到终端。如果要从用户输入读取数据，那么也是将用户输入转化为字符串存储在 Stream 中，然后再将其转储到变量中。</p>\n<h3 id=\"Stream-特点\"><a href=\"#Stream-特点\" class=\"headerlink\" title=\"Stream 特点\"></a>Stream 特点</h3><ul>\n<li>可以对大体积数据进行分片读取，然后存储</li>\n<li>可以读取多个类型的数据</li>\n<li>可以串联多个<code>&lt;&lt;</code>读取</li>\n</ul>\n<h2 id=\"cin-与-cout：来自键盘，去往终端\"><a href=\"#cin-与-cout：来自键盘，去往终端\" class=\"headerlink\" title=\"cin 与 cout：来自键盘，去往终端\"></a>cin 与 cout：来自键盘，去往终端</h2><p><code>cout</code>为 Stream 对象，它从变量中获取数据，存储到一个 Buffer 中，然后将其<strong>输出到终端上</strong>。<br><code>cin</code>也是 Stream 对象，它从<strong>用户输入</strong>获取值，存储到一个 Buffer 中，然后将其转储到对应类型的变量中。<br>在使用这两个输入流前，需要在程序开始处<code>#include &lt;iostream&gt;</code></p>\n<h2 id=\"ifstream-与-ofstream：来自文件，去往文件\"><a href=\"#ifstream-与-ofstream：来自文件，去往文件\" class=\"headerlink\" title=\"ifstream 与 ofstream：来自文件，去往文件\"></a>ifstream 与 ofstream：来自文件，去往文件</h2><p>:::info</p>\n<p>问题思考：</p>\n<ol>\n<li><code>ifstream</code>和<code>ofstream</code>分别是什么？</li>\n<li>还有什么特殊的读写文件类？特殊在哪？</li>\n<li><code>i/ofstream</code>和<code>cin/cout</code>在使用上有什么不一样之处？</li>\n<li>使用<code>ifstream</code>和<code>ofstream</code>需要包含什么头文件？</li>\n<li><code>ifstream</code>怎么初始化？初始化后需要做哪些检查？</li>\n<li><code>ofstream</code>怎么初始化？初始化后需要做哪些检查？</li>\n<li>如果传入的文件名是<code>string</code>类型，如何处理？</li>\n<li><code>close()</code>时有哪些需要注意的地方？</li>\n</ol>\n<p>:::</p>\n<h3 id=\"ifstream-ofstream-Overview\"><a href=\"#ifstream-ofstream-Overview\" class=\"headerlink\" title=\"ifstream &amp; ofstream Overview\"></a>ifstream &amp; ofstream Overview</h3><p><code>ifstream</code>和<code>ofstream</code>分别从文件读取和写入文件。此外，还有一个叫做<code>fstream</code>的类型，即可以完成写入，又可以完成读取）。此外，<code>ifstream</code>和<code>ofstream</code>在使用上与<code>cin/cout</code>不一样之处在于，<code>ifstream</code>和<code>ofstream</code>是一个类型，而不是一个对象，但是<code>cin</code>及<code>cout</code>分别是<code>std::istream</code>和<code>std::ostream</code>类的对象。在使用对象的方法时(<code>&lt;&lt;</code>和<code>&gt;&gt;</code>已被重载)可以直接调用，但是在使用一个类的方法时，首先需要初始化这个类的一个对象，然后再对其方法进行调用。</p>\n<h3 id=\"ifstream-ofstream-使用说明\"><a href=\"#ifstream-ofstream-使用说明\" class=\"headerlink\" title=\"ifstream &amp; ofstream 使用说明\"></a>ifstream &amp; ofstream 使用说明</h3><h4 id=\"包含头文件\"><a href=\"#包含头文件\" class=\"headerlink\" title=\"包含头文件\"></a>包含头文件</h4><pre><code class=\"cpp\">#include &lt;fstream&gt;\n</code></pre>\n<h4 id=\"ifstream-初始化-使用\"><a href=\"#ifstream-初始化-使用\" class=\"headerlink\" title=\"ifstream 初始化 &amp; 使用\"></a>ifstream 初始化 &amp; 使用</h4><p>可以直接使用构造函数，在参数列表中填入文件名进行初始化：</p>\n<pre><code class=\"cpp\">ifstream myStream(&quot;file.txt&quot;);\n</code></pre>\n<p>也可以在使用默认构造函数初始化后，利用类的<code>open()</code>方法打开文件：</p>\n<pre><code class=\"cpp\">ifstream myStream;\nmyStream.open(&quot;file.txt&quot;);\n</code></pre>\n<p>使用<code>ifstream</code>对象的方法与使用<code>cin</code>相似，如下：</p>\n<pre><code class=\"cpp\">myStream &gt;&gt; myInteger\n</code></pre>\n<p>注意，在<code>open()</code>方法调用后，推荐使用<code>myStream.is_open()</code>来探测是否真的成功打开了文件。</p>\n<h4 id=\"ofstream-初始化-使用\"><a href=\"#ofstream-初始化-使用\" class=\"headerlink\" title=\"ofstream 初始化 &amp; 使用\"></a>ofstream 初始化 &amp; 使用</h4><p><code>ofstream</code>初始化过程及使用过程与前文<code>ifstream</code>相似。若文件不存在，调用<code>open()</code>方法会新创建一个文件，否则会覆盖原有的同名文件。（所以尽量做好备份）</p>\n<h4 id=\"关闭流：close\"><a href=\"#关闭流：close\" class=\"headerlink\" title=\"关闭流：close()\"></a>关闭流：<code>close()</code></h4><ol>\n<li>当流的生命周期结束时，C++会为你自动关闭流</li>\n<li>你也可以手动使用<code>close()</code>方法关闭流</li>\n</ol>\n<h4 id=\"使用-string-作为文件名时…\"><a href=\"#使用-string-作为文件名时…\" class=\"headerlink\" title=\"使用 string 作为文件名时…\"></a>使用 string 作为文件名时…</h4><p>注意，<code>string</code>类的开发时间要晚于<code>ifstream</code>和<code>ofstream</code>，彼时<code>ifstream</code>和<code>ofstream</code>只接受 C 语言的字符串类型。因此，要将一个<code>string</code>类型的文件名传入这两个类的对象，我们必须调用<code>.c_str()</code>来将其转化为 C 语言格式的字符串。</p>\n<h2 id=\"Stream-manipulators\"><a href=\"#Stream-manipulators\" class=\"headerlink\" title=\"Stream manipulators\"></a>Stream manipulators</h2><p><code>stream manipulator</code>可以让对变量及输出的处理更加方便，程序员无需手动编程实现一些较为繁琐的功能。几种常用的<code>stream manipulator</code>如下：</p>\n<ol>\n<li><code>endl</code>:输出后换行</li>\n<li><code>setw</code>:设置输出的宽度</li>\n<li><code>left/right</code>:通常与<code>setw</code>连用，表示左补空格&#x2F;右补空格</li>\n<li><code>setfill</code>:在宽度一定，文字没有填满处补充特定的占位符</li>\n<li><code>boolalpha</code>:用<code>true/false</code>表示<code>1/0</code></li>\n<li><code>hex</code>:将输入输出理解为 16 进制</li>\n<li><code>dec</code>:输入输出为 10 进制</li>\n<li><code>oct</code>:输入输出为 8 进制</li>\n<li><code>ws</code>:跳过所有的空格</li>\n</ol>\n<h2 id=\"Stream-异常处理\"><a href=\"#Stream-异常处理\" class=\"headerlink\" title=\"Stream 异常处理\"></a>Stream 异常处理</h2><p>在使用<code>stream</code>进行读取时，可能会出现读取异常的情况，比如读进来的值是个字符串，但是程序想把它保存到一个<code>int</code>类中，这样就产生了类型异常。我们需要在读取后使用<code>cout.fail()</code>或<code>cin.fail()</code>来判断读取是否成功，如果有异常，我们需要手动处理异常，然后用<code>cin.clear()</code>表达异常已经处理完毕。<br>:::info<br>注意，在使用<code>while</code>循环进行读取时，尽量把异常判断放在<code>while</code>循环内，如果判断到异常则退出，否则就进行下一次读取。不要把<code>while</code>循环放在条件判断中，否则可能会导致读取异常后依然在进行输出，因此尽量使用如下的结构。</p>\n<pre><code class=\"cpp\">while(true) &#123;\n  ...\n  if(cin.fail())\n    break;\n  ...\n&#125;\n</code></pre>\n<p>因为<code>stream</code>在读取到最后或读取错误时会返回<code>false</code>，而其他情况下会返回<code>stream</code>对象本身（也可以判断为<code>true</code>），因此我们可以使用<code>cin &lt;&lt; intValue &lt;&lt; doubleValue</code>之类的语句作为判断的条件，以简化上述的循环，结构如下：</p>\n<pre><code class=\"cpp\">while(cin &lt;&lt; intValue &lt;&lt; doubleVALUE) &#123;\n  ...\n  ...\n&#125;\n</code></pre>\n<p>:::</p>\n<h2 id=\"Stream-的麻烦之处\"><a href=\"#Stream-的麻烦之处\" class=\"headerlink\" title=\"Stream 的麻烦之处\"></a>Stream 的麻烦之处</h2><p>Stream 存在一个问题，如果用户多次连续读取值，而其中某一次读入的值的类型不匹配的话，则会连环影响到后面的读取。这其中的根本原因是，<code>stream</code>本身是一个附带了一个读写头的<code>buffer</code>字符数组，而每次读取后，读写后都会向后移动，下一次读取的位置是上一次读取的位置+上一次读取的长度。比如说我们需要读取一个<code>int</code>，再读取一个<code>string</code>。上一次用户输入了<code>8.265</code>,那么第一次就只会读入<code>8</code>，下一次读取从<code>.265</code>开始，导致<code>string</code>读取出错。</p>\n<p>此外，<code>cin</code>的特点是：<code>cin</code>越过一切前导空格和换行符，在读入有效字符后，遇到空格或换行符就停止读取，见如下程序：</p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nint main(void)\n&#123;\n    string name;\n    string city;\n    cin &gt;&gt; name &gt;&gt; city;\n    cout &lt;&lt; &quot;My name is &quot; &lt;&lt; name &lt;&lt; endl;\n    cout &lt;&lt; &quot;The city is &quot; &lt;&lt; city &lt;&lt; endl;\n    return 0;\n&#125;\n</code></pre>\n<p>如果输入的第一个<code>name</code>是<code>First Last</code>，<code>city</code>输入的是<code>Wuhan</code>。由于<code>cin</code>遇到空格就停止读取，那么<code>name</code>中存储的值就是<code>First</code>，<code>city</code>中存储的值就是<code>Last</code>，而<code>Wuhan</code>依然在<code>buffer</code>中无法读取。</p>\n<p>因此，要解决标准的<code>stream</code>带来的麻烦，我们引入一个新的函数：<code>getline()</code></p>\n<h2 id=\"用getline-函数读取标准输入\"><a href=\"#用getline-函数读取标准输入\" class=\"headerlink\" title=\"用getline()函数读取标准输入\"></a>用<code>getline()</code>函数读取标准输入</h2><p><code>getline()</code>可以将输入保存在<code>string</code>中。<code>getline</code>函数的用途在于，如同他的名字，它可以一次读取一行，而<code>cin</code>每次读到空格或换行符就停止。<code>getline</code>不会忽略空格，会将其一并读入，但是<code>getline</code>遇到换行符就停止读取，并且换行符依然留存在<code>stream buffer</code>中。因此<code>getline</code>非常适合那种用户需要在这个字符串中保留空格的情况。</p>\n<p>前文我们说过，<code>cin</code>会在开始读取时越过一切前导的空格和换行符，读取有效字符后，遇到空格和换行符就停止读取，并且将其留在<code>stream buffer</code>中，以待下一次的读取。那么如果我们将<code>cin</code>和<code>getline</code>混用时，便会出现一些问题。</p>\n<p>参考如下示例：</p>\n<pre><code class=\"cpp\">int dummyInt;\nstring dummyString;\ncin &gt;&gt; dummyInt;\ngetline(cin,dummyString);\n</code></pre>\n<p><code>cin</code>首先读入了一个数，然后<strong>将换行符留在了<code>buffer</code>中</strong>，但是下一次调用<code>getline</code>时，<code>getline</code>遇到换行符就停止读取。导致读入的<code>dummyString</code>并不是我们下一次输入的字符串，而是一个空串。这都是因为上一个字符串的换行符还没有处理干净。<br>最好的解决办法是将这种原始的输入输出读取，改为调用封装好的功能完善的库函数。</p>\n<h2 id=\"用getline-函数读取文件\"><a href=\"#用getline-函数读取文件\" class=\"headerlink\" title=\"用getline()函数读取文件\"></a>用<code>getline()</code>函数读取文件</h2><p>参考之前<code>cin</code>循环从文件读取的形式，我们可以编写一个使用<code>getline</code>循环读取文件的格式:</p>\n<pre><code class=\"cpp\">ifstream capitals(&quot;capitals.txt&quot;);\nstring capital,country;\n... // check if the file is correctly opened\nwhile(getline(capitals,capital) &amp;&amp; getlien(capitals,country)) &#123;\n    ...\n    ...\n&#125;\n</code></pre>\n<h2 id=\"A-string-buffer-stringstream\"><a href=\"#A-string-buffer-stringstream\" class=\"headerlink\" title=\"A string buffer:stringstream\"></a>A string buffer:<code>stringstream</code></h2><p>:::info<br>有时候，我们想要连接字符串和数字，譬如<code>&quot;I ate&quot; + 3 &quot;peaches today&quot;</code>，可是 C++ 不允许我们拼接不一样类型的值，怎么办呢？<br>下面我们引入一个新的<code>stream</code>类：<code>stringstream</code>。通过 <code>myStringStream &lt;&lt; &quot;I ate&quot; &lt;&lt; 3 &lt;&lt; &quot;peaches today&quot;</code>,我们可以实现字符串和其他类型值的拼接。<br>:::</p>\n<p><code>stringstream</code>是一个类似于<code>cin</code>和<code>cout</code>的<code>stream</code>。和<code>ifstream/ofstream</code>一样，在使用<code>stringstream</code>前，我们需要先初始化一个<code>stringstream</code>类的对象，然后再对这个对象进行读入和写出。<code>stringstream</code>和标准<code>iostream</code>的差别在于，其写入和写出的值并不保存在程序外，而是作为程序的一个变量，可以通过调用<code>myStringStream.str()</code>随时读取。</p>\n<p>:::info<br>在使用<code>stringstream</code>之前，需要引入头文件<code>#include &lt;sstream&gt;</code><br>:::</p>\n<h1 id=\"Initialization\"><a href=\"#Initialization\" class=\"headerlink\" title=\"Initialization\"></a>Initialization</h1><h2 id=\"初始化结构体\"><a href=\"#初始化结构体\" class=\"headerlink\" title=\"初始化结构体\"></a>初始化结构体</h2><h3 id=\"方法一：用-给每个字段赋值\"><a href=\"#方法一：用-给每个字段赋值\" class=\"headerlink\" title=\"方法一：用.给每个字段赋值\"></a>方法一：用<code>.</code>给每个字段赋值</h3><pre><code class=\"cpp\"> Student s;\n s.name = &quot;Frankie&quot;;\n s.state = &quot;MN&quot;;\n s.age = 21;\n</code></pre>\n<h3 id=\"方法二：用-直接赋值\"><a href=\"#方法二：用-直接赋值\" class=\"headerlink\" title=\"方法二：用{}直接赋值\"></a>方法二：用<code>&#123;&#125;</code>直接赋值</h3><pre><code class=\"cpp\">Student s = &#123;&quot;Frankie&quot;, &quot;MN&quot;, 21&#125;;\n</code></pre>\n<h2 id=\"初始化std-pair\"><a href=\"#初始化std-pair\" class=\"headerlink\" title=\"初始化std::pair\"></a>初始化<code>std::pair</code></h2><h3 id=\"方法一：用-给每个字段赋值-1\"><a href=\"#方法一：用-给每个字段赋值-1\" class=\"headerlink\" title=\"方法一：用.给每个字段赋值\"></a>方法一：用<code>.</code>给每个字段赋值</h3><pre><code class=\"cpp\">std::pair&lt;int, string&gt; numSuffix1 = &#123;1,&quot;st&quot;&#125;;\n</code></pre>\n<h3 id=\"方法二：用-直接赋值-1\"><a href=\"#方法二：用-直接赋值-1\" class=\"headerlink\" title=\"方法二：用{}直接赋值\"></a>方法二：用<code>&#123;&#125;</code>直接赋值</h3><pre><code class=\"cpp\">std::pair&lt;int, string&gt; numSuffix2;\nnumSuffix2.first = 2;\nnumSuffix2.second = &quot;nd&quot;;\n</code></pre>\n<h3 id=\"方法三：调用std-make-pair-field1-field2-方法\"><a href=\"#方法三：调用std-make-pair-field1-field2-方法\" class=\"headerlink\" title=\"方法三：调用std::make_pair(field1,field2)方法\"></a>方法三：调用<code>std::make_pair(field1,field2)</code>方法</h3><pre><code class=\"cpp\">std::pair&lt;int, string&gt; numSuffix2 = std::make_pair(3, &quot;rd&quot;);\n</code></pre>\n<h2 id=\"初始化std-vector\"><a href=\"#初始化std-vector\" class=\"headerlink\" title=\"初始化std::vector\"></a>初始化<code>std::vector</code></h2><h3 id=\"方法一：使用-直接赋值\"><a href=\"#方法一：使用-直接赋值\" class=\"headerlink\" title=\"方法一：使用{}直接赋值\"></a>方法一：使用<code>&#123;&#125;</code>直接赋值</h3><pre><code class=\"cpp\">// a = &#123;3,5&#125;\nstd::vector&lt;int&gt; a = &#123;3,5&#125;;\n</code></pre>\n<h3 id=\"方法二：使用vector-构造函数赋值\"><a href=\"#方法二：使用vector-构造函数赋值\" class=\"headerlink\" title=\"方法二：使用vector()构造函数赋值\"></a>方法二：使用<code>vector()构造函数</code>赋值</h3><pre><code class=\"cpp\">std::vector&lt;int&gt; a(3,5);\n</code></pre>\n<p>:::info<br>这种情况下,传入的 3 和 5 是构造函数的参数，3 是元素的个数，5 是重复的元素值，<code>a=&#123;5,5,5&#125;</code><br>:::</p>\n<h2 id=\"大括号初始化-通用\"><a href=\"#大括号初始化-通用\" class=\"headerlink\" title=\"大括号初始化(通用)\"></a>大括号初始化(通用)</h2><pre><code class=\"cpp\">std::vector&lt;int&gt; vec&#123;1,3,5&#125;;\nstd::pair&lt;int, string&gt; numSuffix1&#123;1,&quot;st&quot;&#125;;\nStudent s&#123;&quot;Frankie&quot;, &quot;MN&quot;, 21&#125;;\n// less common/nice for primitive types, but possible!\nint x&#123;5&#125;;\nstring f&#123;&quot;Frankie&quot;&#125;;\n</code></pre>\n<h2 id=\"Structure-Bindings\"><a href=\"#Structure-Bindings\" class=\"headerlink\" title=\"Structure Bindings\"></a>Structure Bindings</h2><p>可以结合<code>auto</code>的自动类型推导来自动绑定值。<br>使用前：</p>\n<pre><code class=\"cpp\">auto p =\nstd::make_pair(“s”, 5);\nstring a = s.first;\nint b = s.second;\n</code></pre>\n<p>使用后：</p>\n<pre><code class=\"cpp\">auto p =\nstd::make_pair(“s”, 5);\nauto [a, b] = p;\n// a is string, b is int\n// auto [a, b] =\nstd::make_pair(...);\n</code></pre>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><p>:::info</p>\n<ol>\n<li><code>=</code>默认为赋值值，如果要传入引用，必须在声明引用时加上<code>&amp;</code>;</li>\n<li>修改引用时便修改了值本身，而修改复制品不修改本身;</li>\n<li>引用是变量的引用，修改引用前必须声明一个变量，无法对常量进行引用;</li>\n</ol>\n<p>:::</p>\n<pre><code class=\"cpp\">int value = 5;\nint&amp; ref = value; // the reference of value\nint copy = value; // the copy of value\n</code></pre>\n<p>此外，在使用迭代器时，如果要修改被迭代的值本身而不是他的复制品，必须使用引用，例如：</p>\n<pre><code class=\"cpp\">void shift(vector&lt;std::pair&lt;int, int&gt;&gt;&amp; nums) &#123;\n    for (auto [num1, num2]: nums) &#123;\n        num1++;\n        num2++;\n    &#125;\n&#125;\n</code></pre>\n<p>这段代码中，<code>auto [num1,num2]</code>是<code>nums</code>中每个元素的复制品，而不是本身。如果要对本身进行修改，必须使用：</p>\n<pre><code class=\"cpp\">for (auto&amp; [num1,num2] : nums)\n</code></pre>\n<h1 id=\"left-value-right-value\"><a href=\"#left-value-right-value\" class=\"headerlink\" title=\"left-value &amp; right-value\"></a>left-value &amp; right-value</h1><p>左值和右值的区别在于，左值通常来说是变量，而右值是字面量。左值可以出现在<code>=</code>的左边和右边，是在程序生命周期内长期有效。而右值作为字面量，无法在程序中长期存活，自然也不能出现在<code>=</code>的左边。</p>\n<p>:::info<br>在使用引用时，不允许传入右值，即不允许传入字面量。我们无法对一个常量进行引用，只能对左值(变量)进行引用。<br>:::</p>\n<h1 id=\"const-const-reference-copy\"><a href=\"#const-const-reference-copy\" class=\"headerlink\" title=\"const &amp; const reference&#x2F;copy\"></a>const &amp; const reference&#x2F;copy</h1><p>常量是不允许修改的量，使用<code>const</code>声明常量。常量的引用和复制也必须是常量，引用及复制前加<code>const</code>。</p>\n<h1 id=\"Containers\"><a href=\"#Containers\" class=\"headerlink\" title=\"Containers\"></a>Containers</h1><h2 id=\"STL-是什么？\"><a href=\"#STL-是什么？\" class=\"headerlink\" title=\"STL 是什么？\"></a>STL 是什么？</h2><h2 id=\"STL-Overview\"><a href=\"#STL-Overview\" class=\"headerlink\" title=\"STL Overview\"></a>STL Overview</h2><h2 id=\"为什么需要-STL？\"><a href=\"#为什么需要-STL？\" class=\"headerlink\" title=\"为什么需要 STL？\"></a>为什么需要 STL？</h2><h2 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h2><h2 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h2><h1 id=\"Iterators-and-Pointers\"><a href=\"#Iterators-and-Pointers\" class=\"headerlink\" title=\"Iterators and Pointers\"></a>Iterators and Pointers</h1><h1 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h1><h1 id=\"Template-Classes-and-Const-Correctness\"><a href=\"#Template-Classes-and-Const-Correctness\" class=\"headerlink\" title=\"Template Classes and Const Correctness\"></a>Template Classes and Const Correctness</h1><h1 id=\"Template-Functions\"><a href=\"#Template-Functions\" class=\"headerlink\" title=\"Template Functions\"></a>Template Functions</h1><h1 id=\"Functions-and-Lambdas\"><a href=\"#Functions-and-Lambdas\" class=\"headerlink\" title=\"Functions and Lambdas\"></a>Functions and Lambdas</h1><h1 id=\"Midquarter-Review\"><a href=\"#Midquarter-Review\" class=\"headerlink\" title=\"Midquarter Review\"></a>Midquarter Review</h1><h1 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h1><h1 id=\"Special-Member-Functions\"><a href=\"#Special-Member-Functions\" class=\"headerlink\" title=\"Special Member Functions\"></a>Special Member Functions</h1><h1 id=\"Move-Semantics\"><a href=\"#Move-Semantics\" class=\"headerlink\" title=\"Move Semantics\"></a>Move Semantics</h1><h1 id=\"std-optional-and-Type-Safety\"><a href=\"#std-optional-and-Type-Safety\" class=\"headerlink\" title=\"std::optional and Type Safety\"></a>std::optional and Type Safety</h1><h1 id=\"RAII-Smart-Pointers-and-Building-C-Projects\"><a href=\"#RAII-Smart-Pointers-and-Building-C-Projects\" class=\"headerlink\" title=\"RAII, Smart Pointers, and Building C++ Projects\"></a>RAII, Smart Pointers, and Building C++ Projects</h1><h1 id=\"C-for-Data-Science-and-ML\"><a href=\"#C-for-Data-Science-and-ML\" class=\"headerlink\" title=\"C++ for Data Science and ML\"></a>C++ for Data Science and ML</h1>",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/",
            "url": "https://salvely.github.io/blog/2023/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/",
            "title": "Arch Linux系统配置教程",
            "date_published": "2023-10-15T01:38:16.000Z",
            "content_html": "<h1 id=\"初始化用户和组\"><a href=\"#初始化用户和组\" class=\"headerlink\" title=\"初始化用户和组\"></a>初始化用户和组</h1><h1 id=\"权限授予\"><a href=\"#权限授予\" class=\"headerlink\" title=\"权限授予\"></a>权限授予</h1><h1 id=\"安全性配置\"><a href=\"#安全性配置\" class=\"headerlink\" title=\"安全性配置\"></a>安全性配置</h1><h1 id=\"安装基本组件\"><a href=\"#安装基本组件\" class=\"headerlink\" title=\"安装基本组件\"></a>安装基本组件</h1><h1 id=\"让系统更易用\"><a href=\"#让系统更易用\" class=\"headerlink\" title=\"让系统更易用\"></a>让系统更易用</h1>",
            "tags": [
                "Arch",
                "Linux",
                "配置教程",
                "操作系统",
                "notes"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "url": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "title": "Debian包管理初探",
            "date_published": "2023-10-14T06:23:52.000Z",
            "content_html": "<h1 id=\"Linux-发行版\"><a href=\"#Linux-发行版\" class=\"headerlink\" title=\"Linux 发行版\"></a>Linux 发行版</h1><p>Linux 操作系统 &#x3D; Linux 内核 + 不同功能<br>但是因为内核和功能包有多种不同配置，因此 Linux 有多种发行版。<br>几种主要的发行版及其衍生是：</p>\n<ul>\n<li>Arch -&gt; Manjaro</li>\n<li>Debian -&gt; Ubuntu</li>\n<li>RHEL -&gt; Scientific Linux</li>\n</ul>\n<h1 id=\"安装软件的困惑？\"><a href=\"#安装软件的困惑？\" class=\"headerlink\" title=\"安装软件的困惑？\"></a>安装软件的困惑？</h1><p>:::default<br>我们要在 Linux 操作系统上安装一个软件，思考如下问题：<br>:::</p>\n<ul>\n<li>你需要哪些文件？如何获取他们？</li>\n<li>用户需要做多少工作？</li>\n<li>开发者需要做多少工作？</li>\n<li>在发行软件的过程中还有其他人参与工作吗？</li>\n<li>如何更新软件包？</li>\n<li>如何保证软件包来源的安全性？</li>\n</ul>\n<p>:::default<br>一个简陋的安装方案是：直接下载一堆文件。这其中包含的内容有：<br>:::</p>\n<ul>\n<li>编译好的二进制可执行文件</li>\n<li>配置信息</li>\n<li>说明文档</li>\n<li>许可证(License)</li>\n<li>其他</li>\n</ul>\n<p>:::default<br>那么问题来了：<br>:::</p>\n<ul>\n<li>我们需要哪些文件？</li>\n<li>这些文件放在哪里？</li>\n<li>如何进行环境配置？</li>\n<li>这个安装包和我的系统兼容吗？</li>\n<li>我怎么更新呢？</li>\n</ul>\n<p>:::default<br>一个进阶的安装方案是：下载一个压缩包。但是我们也面临一些问题：<br>:::</p>\n<ul>\n<li>这里面的文件是编译好的还是未编译的？</li>\n<li>软件包之间存在依赖关系怎么办？</li>\n<li>这个软件如何应对不同 Linux 发行版的需求？</li>\n<li>如何更新？如何保证更新后的版本可靠？</li>\n</ul>\n<h1 id=\"解决方案：打包！\"><a href=\"#解决方案：打包！\" class=\"headerlink\" title=\"解决方案：打包！\"></a>解决方案：打包！</h1><h2 id=\"什么是包？\"><a href=\"#什么是包？\" class=\"headerlink\" title=\"什么是包？\"></a>什么是包？</h2><p>包是 Linux 操作系统上软件的组织方式。</p>\n<h2 id=\"什么是仓库（repository）？\"><a href=\"#什么是仓库（repository）？\" class=\"headerlink\" title=\"什么是仓库（repository）？\"></a>什么是仓库（<code>repository</code>）？</h2><p>仓库是一系列软件包的合集列表。<code>Debian</code>上常见的仓库包括：</p>\n<ul>\n<li>Debian stable (all the packages available to install on a default Debian stable install)</li>\n<li>Debian security updates</li>\n<li>Debian backports</li>\n<li>Docker’s custom repositories</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>每个 Linux 发行版都维护仓库，里面列举了该仓库中可安装的所有软件包</li>\n<li>包维护者负责对开发者的软件进行打包</li>\n<li>对于不同的 Linux 发行版，打包的方式不同</li>\n</ul>\n<p>:::info<br>包和仓库区别的详细解释参考这里:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMDkwNzU4L3doYXQtYXJlLXBhY2thZ2VzLWFuZC1yZXBvc2l0b3JpZXM=\">what are packages and repositories</span></li>\n<li><a href=\"https://linux.cn/article-14994-1.html\"><code>apt-update</code>和<code>apt-upgrade</code>的区别</a><br>:::</li>\n</ul>\n<h1 id=\"包的安装过程\"><a href=\"#包的安装过程\" class=\"headerlink\" title=\"包的安装过程\"></a>包的安装过程</h1><ol>\n<li>从包列表中读取该包</li>\n<li>查看该包的所有依赖项</li>\n<li>看看依赖项中哪些包已经安装了</li>\n<li>安装未安装的依赖</li>\n<li>解压缩文件等</li>\n<li>完成一些安装后需要做的工作，如将其作为<code>service</code>启动</li>\n</ol>\n<!-- # 仓库 vs App Store\n仓库和App Store均是集中管理包的地方，但是他们略有不同。\n## 软件包更新方式\n仓库：\n- 维护者负责发布更新\n- 部分不稳定的更新会延迟\n- 用户可自己选择使用测试版\nApp Store：\n- 开发者直接向用户推送更新\n- 可能随机挑选用户测试更新\n## 安全方面和依赖管理方面\n仓库：\n- 用户可信赖开发者\nApp Store:\n- 具有隔离性，一切依赖开发者决定 -->\n\n<h1 id=\"包更新方式\"><a href=\"#包更新方式\" class=\"headerlink\" title=\"包更新方式\"></a>包更新方式</h1><ul>\n<li>部分 Linux 发行版采用<code>periodic release</code>方式，例如<code>Debian</code>，2 年一发行</li>\n<li>部分采用<code>rolling release</code>方式，例如<code>Arch</code>，发行版更新更快，但是是以稳定性为代价<br>更多内容参考这里：<span class=\"exturl\" data-url=\"aHR0cHM6Ly91dGNjLnV0b3JvbnRvLmNhL35ja3Mvc3BhY2UvYmxvZy9saW51eC9Sb2xsaW5nVnNSZWxlYXNlc05vV2lubmVy\">Rolling distribution releases versus periodic releases are a tradeoff</span></li>\n</ul>\n<h1 id=\"自动化包管理工具\"><a href=\"#自动化包管理工具\" class=\"headerlink\" title=\"自动化包管理工具\"></a>自动化包管理工具</h1><h2 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a><code>apt</code></h2><ol>\n<li><code>apt update</code>：生成列表，显示仓库中包含哪些包</li>\n<li><code>apt upgrade</code>&#x2F;<code>apt dist-upgrade</code>：把列表中的包升级到最新版本</li>\n<li><code>apt policy &lt;packagename&gt;</code>：列举可安装的包版本</li>\n<li><code>apt -t [targetrelease] install [package]</code>：安装特定版本包</li>\n<li><code>apt install &lt;packagename&gt;</code>：安装包</li>\n<li><code>apt remove &lt;packagename&gt;</code>：卸载包</li>\n<li><code>apt search &lt;packagename&gt;</code>：搜索包</li>\n<li><code>apt install ./&lt;packagename&gt;.deb</code>：安装本地的<code>deb</code>包</li>\n<li><code>apt download &lt;packagename&gt;.deb</code>：下载包<br>:::info<br>几种不同命令的区别参考这里：</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xOTQ2NTEvd2h5LXVzZS1hcHQtZ2V0LXVwZ3JhZGUtaW5zdGVhZC1vZi1hcHQtZ2V0LWRpc3QtdXBncmFkZQ==\">Why use apt-get upgrade instead of apt-get dist-upgrade?</span><br>:::</li>\n</ul>\n<h2 id=\"dpkg-多用于安装本地包\"><a href=\"#dpkg-多用于安装本地包\" class=\"headerlink\" title=\"dpkg:多用于安装本地包\"></a><code>dpkg</code>:多用于安装本地包</h2><ol>\n<li><code>dpkg -i [packagefilename]</code>：安装本地包</li>\n<li><code>dpkg --remove [packagename]</code>：卸载本地包</li>\n<li><code>dpkg -I [packagename]</code>：查看本地包的更多信息</li>\n<li><code>dpkg --configure -a</code>：查看所有解压了但是还没安装的包</li>\n</ol>\n<h2 id=\"使用什么包？\"><a href=\"#使用什么包？\" class=\"headerlink\" title=\"使用什么包？\"></a>使用什么包？</h2><p>在<code>/etc/apt/sources.list</code>和<code>/etc/apt/sources.list.d</code>文件中维护镜像源：</p>\n<pre><code class=\"bash\">deb http://mirrors/debian/ stretch-backports main contrib non-free\ndeb http://mirrors/debian-security/ stretch/updates main contrib non-free\ndeb-src http://mirrors/debian-security/ stretch/updates main contrib non-free\ndeb http://mirrors/debian/ stretch-updates main contrib non-free\ndeb-src http://mirrors/debian/ stretch-updates main contrib non-free\ndeb http://mirrors/debian/ stretch main contrib non-free\ndeb-src http://mirrors/debian/ stretch main contrib non-free\n# OCF\ndeb http://apt/ stretch-backports main\ndeb-src http://apt/ stretch-backports main\ndeb http://apt/ stretch main\ndeb-src http://apt/ stretch main\ndeb http://mirrors/puppetlabs/apt/ stretch puppet\n</code></pre>\n<p>:::info<br>我个人的理解是，<code>repository</code>是指仓库名，仓库中列举了该仓库有哪些软件包。而<code>mirror list</code>指明了从哪里下载这个仓库中的软件包（网络地址）？在清华的镜像中有这个仓库，而在中科大的镜像中也有这个仓库。镜像中仓库的内容随着官方仓库内容的更新而更新？<br>关于什么是镜像，请看这里:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy85MTMxODAvd2hhdC1hcmUtbWlycm9ycw==\">What are mirrors？</span><br>:::<br>不同的仓库中的软件版本可能不同，需要通过<code>apt policy</code>来看软件包所属的仓库。</li>\n</ul>\n<h2 id=\"每行内容如何解读？\"><a href=\"#每行内容如何解读？\" class=\"headerlink\" title=\"每行内容如何解读？\"></a>每行内容如何解读？</h2><p>:::info<br>以下内容摘自 UC Berkeley System Admin Decal 原文<br>:::</p>\n<pre><code class=\"bash\">deb http://mirrors/debian/ stretch-backports main contrib non-free\n</code></pre>\n<blockquote>\n<p><code>deb</code> is binary package source. <code>deb-src</code> indicates src packages.<br><code>http://…</code> describes the location<br><code>stretch-backports</code> means that this is for <code>Jessie stretch</code> and from a <code>backport</code> repository<br><code>main</code> means that the repo has packages licensed under <code>Debian Free Software Guidelines (DFSG)</code><br><code>contrib</code> repos have packages licensed under <code>DSFG</code> but require <code>non-free dependencies</code><br><code>non-free</code> repos have packages that do not comply with <code>DSFG</code></p>\n</blockquote>\n<h1 id=\"手动安装包\"><a href=\"#手动安装包\" class=\"headerlink\" title=\"手动安装包\"></a>手动安装包</h1><p>包中通常含有<code>Makefile</code>文件，我们可以手动的进行安装。<br>步骤：</p>\n<ol>\n<li>安装所需的相关包，例如<code>gcc</code>等</li>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>make install</code></li>\n</ol>\n<p>不便之处：卸载麻烦。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>Debian 包通常具有如下几个目录和文件：</p>\n<ul>\n<li><code>control</code>：涵盖包的元信息，例如包的大小、版本、依赖</li>\n<li><code>debian-binary</code></li>\n<li><code>etc</code>：配置文件</li>\n<li><code>md5sums</code>：文件有效性检验</li>\n<li><code>usr</code><ul>\n<li><code>bin</code>：可执行文件，要加到<code>$PATH</code>环境变量中</li>\n<li><code>share</code>：文档，man page，本地化设置<ul>\n<li><code>doc</code>：文档</li>\n<li><code>info</code>: info page</li>\n<li><code>locale</code>：本地化设置</li>\n<li><code>man</code>：man page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自己组包\"><a href=\"#自己组包\" class=\"headerlink\" title=\"自己组包\"></a>自己组包</h1><h2 id=\"usr-目录下几个重要的目录\"><a href=\"#usr-目录下几个重要的目录\" class=\"headerlink\" title=\"&#x2F;usr 目录下几个重要的目录\"></a>&#x2F;usr 目录下几个重要的目录</h2><ul>\n<li><code>/usr/bin</code> 二进制可执行文件</li>\n<li><code>/usr/lib</code> 相关的库</li>\n<li><code>/usr/include</code> 头文件</li>\n<li><code>/usr/share</code> 文档等等</li>\n</ul>\n<h2 id=\"打包过程：将hellopenguin-c程序打包\"><a href=\"#打包过程：将hellopenguin-c程序打包\" class=\"headerlink\" title=\"打包过程：将hellopenguin.c程序打包\"></a>打包过程：将<code>hellopenguin.c</code>程序打包</h2><h3 id=\"初始准备\"><a href=\"#初始准备\" class=\"headerlink\" title=\"初始准备\"></a>初始准备</h3><ol>\n<li>编写<code>hellopenguin.c</code>程序</li>\n</ol>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\nint main(void)\n&#123;\n    printf(&quot;Hello Penguin!\\n&quot;);\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>编译<code>hellopenguin.c</code>程序，生成可执行文件<code>hellopenguin</code></li>\n</ol>\n<pre><code class=\"bash\">gcc hellopenguin.c -o hellopenguin\n</code></pre>\n<h3 id=\"打包环境准备\"><a href=\"#打包环境准备\" class=\"headerlink\" title=\"打包环境准备\"></a>打包环境准备</h3><ol>\n<li>使用<code>fpm</code>工具(<code>Ruby Gem</code>)</li>\n</ol>\n<pre><code class=\"bash\">$ sudo apt install ruby-dev\n$ sudo gem install fpm\n$ fpm -s dir -t deb -n [name here] -v [version #] -C [the directory with the /usr folder]\n</code></pre>\n<p>:::info<br>如果<code>gem</code>安装<code>fpm</code>过慢的话，需要给 ruby 环境换源，命令如下（这里使用清华源）：</p>\n<pre><code class=\"bash\"># 添加镜像源并移除默认源\ngem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/\n# 列出已有源\ngem sources -l\n# 应该只有镜像源一个\n</code></pre>\n<p>或者在<code>~/.gemrc</code>中将<code>https://mirrors.tuna.tsinghua.edu.cn/rubygems/</code>加到<code>sources</code>字段。<br>:::</p>\n<ol start=\"3\">\n<li>查看<code>fpm</code>是否安装，输入<code>fpm</code></li>\n</ol>\n<h3 id=\"创建包文件夹\"><a href=\"#创建包文件夹\" class=\"headerlink\" title=\"创建包文件夹\"></a>创建包文件夹</h3><ol>\n<li>创建目录<code>packpenguin/usr/bin</code>，将<code>hellopenguin</code>放进去</li>\n</ol>\n<pre><code class=\"bash\">mkdir -p packpenguin/usr/bin\nmv hellopenguin packpenguin/usr/bin\n</code></pre>\n<ol start=\"2\">\n<li>在<code>packpenguin</code>的父目录中，使用<code>fpm</code>进行打包，命令如下：</li>\n</ol>\n<pre><code class=\"bash\">fpm -s dir -t deb -n hellopenguin -v 1.0~ocf1 -C packpenguin\n</code></pre>\n<p>其中几个字段解释如下：</p>\n<ul>\n<li><code>-s</code>：使用一个目录构建</li>\n<li><code>-t</code>：生成<code>deb</code>包</li>\n<li><code>-n</code>：输出包的名字叫<code>hellopenguin</code></li>\n<li><code>-v</code>：版本号为<code>1.0~ocf1</code></li>\n<li><code>-C</code>:由<code>packpenguin</code>目录生成</li>\n</ul>\n<ol start=\"3\">\n<li>安装我们组建的包:<code>sudo dpkg -i ./hellopenguin_1.0~ocf1_amd64.deb</code></li>\n<li>输入<code>hellopenguin</code>，运行<code>hellopenguin</code>，可以看到输出了<code>Hello Penguin!</code></li>\n</ol>\n<p>:::info<br>要卸载我们安装的包，可以使用<code>dpkg --remove hellopenguin</code>命令。<br>:::</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVJNTlBSSE5vaDRhNUtXd1hZOGZCV0o0OW5CYWZ4Ym80Zy1PdlNaWjg1VjgvZWRpdCNzbGlkZT1pZC5nNTM2NGNlYzI4Y18wXzEx\">Packaging</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTIvI2dyYWRpbmctbm90ZQ==\">Advanced Lab 2 - Packages and Packaging and Troubleshooting</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVVKSE83Zlhvay02Uk43REFKNVNQVHFjQ1hpUlNSOGhwR1p4OU9RTW5NT1UvZWRpdCNzbGlkZT1pZC5w\">Distros, Packaging, and Compiling</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYjQvI3doYXQtaXMtYS1kaXN0cmlidXRpb24=\">Beginner Lab 4 - Debian, packages, compiling software</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0vd2lraQ==\">FPM 文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90bGRyLnNoLw==\">TLDR 页面</span></li>\n</ul>\n",
            "tags": [
                "Linux",
                "操作系统",
                "notes",
                "Debian",
                "包管理"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "url": "https://salvely.github.io/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "title": "Arch Linux安装实录&知识讲解&踩坑分析（超详细！）",
            "date_published": "2023-10-12T05:50:44.000Z",
            "content_html": "<p>:::danger<br>此坑还没填完，暂时只添加了安装部分（装完发现 Arch wiki 实在是已经写得很详细了），还有很多的知识还没有完全弄清楚和补充。<br>等我学习完<code>计算机组成原理</code>，<code>操作系统</code>和<code>计算机网络</code>后会再来填坑。<br>:::</p>\n<p>:::info<br>本文安装过程基本按照 Arch Linux 安装文档，附带了额外的相关知识。其中可能伴有踩坑，但是也是一种经验啦！:smile:<br>如发现本文某些地方有误，请在评论区评论，我看到的话会改过来哒！<br>:::</p>\n<h1 id=\"写作起因\"><a href=\"#写作起因\" class=\"headerlink\" title=\"写作起因\"></a>写作起因</h1><p>Arch Linux 的安装过程涉及较多的操作系统知识，而不仅仅是像 Ubuntu&#x2F;Debian 那样提供 GUI 中的几个选项供你选择。此外，Arch Linux 的文档较为详细（Arch wiki 简直是棒极了！）。<br>因此，本教程不只是演示本人的安装&amp;踩坑过程，还附带许多的相关文档带读、踩坑原因分析等。</p>\n<h1 id=\"本文适合哪些人\"><a href=\"#本文适合哪些人\" class=\"headerlink\" title=\"本文适合哪些人\"></a>本文适合哪些人</h1><ol>\n<li>热爱倒腾的</li>\n<li>不怕踩坑的</li>\n<li>想要通过 Arch Linux 安装过程递归学习其他知识的</li>\n</ol>\n<h1 id=\"对于其他同学\"><a href=\"#对于其他同学\" class=\"headerlink\" title=\"对于其他同学\"></a>对于其他同学</h1><p>若您仅需要高效的安装 Arch Linux，而不希望看相关知识及其他无关的踩坑过程的，可以：</p>\n<ol>\n<li>参考其他博主的奶妈式教程</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81OTYyMjc1MjQ=\">Arch Linux 详细安装教程，萌新再也不怕了！「2023.09」</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoLmljZWt5bGluLm9ubGluZS8=\">archlinux 简明指南 包含安装、配置、维护等，帮助新手快速上手</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMv\">Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ttaW5kaS9qaWZmeWJveC1hcmNobGludXgtdHV0b3JpYWw=\">Github 教程 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RzMTk5OTE5OTkvQXJjaExpbnV4LUluc3RhbGwtVHV0b3JpYWw=\">Github 教程 2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NzgwNzU1Mzg=\">2022 年 12 月最新安装 Archlinux 一次过的教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTM4NTkyMzY=\">2022.5 archlinux 详细安装过程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWl2bS5jbi9hcmNobGludXgtaW5zdGFsbGF0aW9uLWd1aWRlLXNpbXBsZQ==\">ArchLinux 安装指南（新手向）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MzM5MjAwNzk=\">Archlinux 安装教程超详细（2021.11.15</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YyMDc1MzA1Mi8=\">Arch Linux 完全安装教程 2023.10</span></li>\n</ul>\n<ol start=\"2\">\n<li>archinstall 工具</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTE0NDQ0LTEuaHRtbA==\">用 archinstall 自动化脚本安装 Arch Linux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyY2hsaW51eC9hcmNoaW5zdGFsbA==\">archinstall github 链接</span></li>\n</ul>\n<ol start=\"3\">\n<li>一些图形化界面安装工具</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Nwb29reWtpZG1tL3plbl9pbnN0YWxsZXI=\">Zen installer</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyY2gtbGludXgtZ3VpL2FsZy1yZWxlYXNlcw==\">archlinuxgui</span></li>\n</ul>\n<ol start=\"4\">\n<li>Netboot 网络安装</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Rlbmd0ZW5nc25ha2UvQXJjaC1saW51eC1pbnN0YWxsLXR1dG9yaWFs\">Github 上提供的脚本（按照里面的命令一个个输入）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQ2F0ZWdvcnk6SW5zdGFsbGF0aW9uX3Byb2Nlc3M=\">其他安装方式</span></li>\n<li>要在一个 Ubuntu 虚拟机上安装 Arch 虚拟机（嵌套虚拟机），请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTMv\">这里</span></li>\n</ol>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在使用 Arch 前看了 UCB System Admin Decal 的 Linux Pre-install and Install 一节，其中的实验是在 Ubuntu 虚拟机上安装 Arch。Arch 的安装涉及到自己进行分区，对系统进行加密和解密等，我觉得非常有趣，对于操作系统本身也是一个探索的过程。因此决定挑战自己跟着官方文档进行安装。<br>以前每次安装 Linux 虚拟机，包括 Ubuntu 和 Debian，都是跟着一些博主自己写的奶妈式手把手安装教程一步步的装。每次都能安装成功，但是总是感觉少了一些<code>【探索的乐趣】</code>:laughing:。<br>今天我就要跟着 Arch Linux 的官方文档一步步装，感受一把极致的安装酸爽体验！<br>+++ 如果你也想体验自己安装 Arch，或者是想成为 Arch 开发者，下面内容可能对你有帮助：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSW5zdGFsbGF0aW9uX2d1aWRlI0FjcXVpcmVfYW5faW5zdGFsbGF0aW9uX2ltYWdl\">Arch Linux 官方安装文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaGlzby8tL2lzc3Vlcw==\">Issue tracker</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXN0cy5hcmNobGludXgub3JnL21haWxtYW4zL2xpc3RzL2FyY2gtcmVsZW5nLmxpc3RzLmFyY2hsaW51eC5vcmcv\">Mailing List</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCOCVCOCVFOCVBNyU4MSVFOSU5NyVBRSVFOSVBMiU5OA==\">常见问题及解答</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL0hlbHA6JUU5JTk4JTg1JUU4JUFGJUJC\">帮助</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL1Byb2plY3Q6JUU1JTg1JUIzJUU0JUJBJThF\">贡献项目</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL01hbl9wYWdl\">帮助手册</span><br>+++</li>\n</ol>\n<h1 id=\"过程简介\"><a href=\"#过程简介\" class=\"headerlink\" title=\"过程简介\"></a>过程简介</h1><p>安装过程涉及到的步骤包含：</p>\n<ol>\n<li>UEFI 模式启动（或 BIOS，但是分区会不一样，需要注意）</li>\n<li>设置键盘模式</li>\n<li>检查网络连接</li>\n<li>更新系统时钟</li>\n<li>创建磁盘分区</li>\n<li>初始化分区中的文件系统（<code>/</code>文件系统可选是否加密）</li>\n<li>挂载文件系统</li>\n<li>利用<code>pacstrap</code>安装必要的包：linux 内核，<code>initrd</code>、<code>init system</code>、<code>pacman</code>\\、<code>base</code>等等</li>\n<li>利用<code>genfstab</code>生成<code>/etc/fstab</code>（文件系统表）</li>\n<li><code>arch-chroot</code>进入<code>/mnt</code>目录</li>\n<li>通过修改<code>/etc/hostname</code>修改主机名<br>+++ boot 启动原理<blockquote>\n<p>图源自 UCB System Admin Decal(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMW9MdHNqc0VJc3ZDaE9JMzFfNVlZRmhJTGZ6R2x5eDdIazlEc0wxTnYtbWMvZWRpdD9wbGk9MSNzbGlkZT1pZC5nOWI0MTRkZGEwNF8wXzE1OA==\">https://docs.google.com/presentation/d/1oLtsjsEIsvChOI31_5YYFhILfzGlyx7Hk9DsL1Nv-mc/edit?pli=1#slide=id.g9b414dda04_0_158</span>)</p>\n</blockquote>\n</li>\n</ol>\n<p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/boot.png\" alt=\"boot启动原理\"><br>+++</p>\n<h1 id=\"获取安装镜像（后缀为-iso）\"><a href=\"#获取安装镜像（后缀为-iso）\" class=\"headerlink\" title=\"获取安装镜像（后缀为.iso）\"></a>获取安装镜像（后缀为.iso）</h1><p>看了一下下载界面，最顶部写了当前发行版的信息，下面是对于几种不同用户的安装方式以及校验和，最后是所有的 Arch 镜像源集合。</p>\n<h2 id=\"发行版信息\"><a href=\"#发行版信息\" class=\"headerlink\" title=\"发行版信息\"></a>发行版信息</h2><p>当前发布版本: 2023.09.01<br>内核版本: 6.4.12<br>ISO 镜像文件大小: 804.3 MB</p>\n<h2 id=\"几种下载方式\"><a href=\"#几种下载方式\" class=\"headerlink\" title=\"几种下载方式\"></a>几种下载方式</h2><h3 id=\"对于已经是-Arch-用户的人\"><a href=\"#对于已经是-Arch-用户的人\" class=\"headerlink\" title=\"对于已经是 Arch 用户的人\"></a>对于已经是 Arch 用户的人</h3><ol>\n<li>通过命令<code>pacman -Syu</code>更新</li>\n<li>通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL21pcnJvcmxpc3Qv\">这里</span>更新镜像源</li>\n</ol>\n<h3 id=\"种子链接下载（官方推荐）\"><a href=\"#种子链接下载（官方推荐）\" class=\"headerlink\" title=\"种子链接下载（官方推荐）\"></a>种子链接下载（官方推荐）</h3><p>对于这种资源，可以使用<code>百度网盘</code>或者<code>迅雷</code>下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘&#x2F;迅雷，然后将其中的 iso 镜像文件下载到本地目录中。</p>\n<h3 id=\"Netboot\"><a href=\"#Netboot\" class=\"headerlink\" title=\"Netboot\"></a>Netboot</h3><p>安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。</p>\n<blockquote>\n<p>Netboot 使用定制的 <code>iPXE</code> 版本。 实时系统的 Linux 内核、<code>initramfs</code> 和 <code>squashfs 文件</code>是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用<code>加密签名</code>进行验证。</p>\n</blockquote>\n<p>这其中有几个问题：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pcHhlLm9yZy9zdGFydA==\">iPXE</span>是啥？<strong>一种开源的网络启动固件</strong><br>其官方文档中的描述如下：<blockquote>\n<p>iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如：</p>\n<ul>\n<li>通过 HTTP 从 Web 服务器启动</li>\n<li>从 iSCSI SAN 引导</li>\n<li>通过 FCoE 从光纤通道 SAN 启动</li>\n<li>从 AoE SAN 引导</li>\n<li>从无线网络引导</li>\n<li>从广域网引导</li>\n<li>从 Infiniband 网络引导</li>\n<li>使用脚本控制引导过程</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求：</p>\n<ul>\n<li>具有 DHCP 自配置的网络</li>\n<li>能够运行系统的足够存储</li>\n</ul>\n<p>而它的具体实现是基于<code>PXE</code>协议。<br>基于递归学习的理念，我又查了查<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JUEyJTg0JUU1JTkwJUFGJUU1JThBJUE4JUU2JTg5JUE3JUU4JUExJThDJUU3JThFJUFGJUU1JUEyJTgzIw==\">PXE</span>。。。<br>其基本概念如下：</p>\n<blockquote>\n<p>预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。<br>PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。<br>PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。</p>\n</blockquote>\n<p>其基本的运行机制是：</p>\n<blockquote>\n<p>客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。</p>\n</blockquote>\n<p>由<code>PXE</code>机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。<code>PXE</code>的协议规范在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTMxMTAyMDAzMTQxL2h0dHA6Ly9kb3dubG9hZC5pbnRlbC5jb20vZGVzaWduL2FyY2hpdmVzL3dmbS9kb3dubG9hZHMvcHhlc3BlYy5wZGY=\">intel 的这篇文档中</span>可以查到。而 PXE 的两个实现，一个为<code>iPXE</code>，另一个则是<code>gPXE</code>。<code>gPXE</code>目前已经停止开发，取而代之的是<code>iPXE</code>。<br>对于<code>iPXE</code>和<code>gPXE</code>更详细的介绍，可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmhjbC5tb2UvYXJjaGl2ZXMvMjE3Nw==\">这篇博文</span></p>\n<ol start=\"2\">\n<li><p><code>initramfs文件</code>和<code>squashfs文件</code>做什么用？<br>TODO</p>\n</li>\n<li><p>为什么<code>Arch Linux</code>在下载过程中需要使用加密签名对镜像完整性进行验证？<br>TODO</p>\n</li>\n</ol>\n<h3 id=\"Vagrant-images-docker-images\"><a href=\"#Vagrant-images-docker-images\" class=\"headerlink\" title=\"Vagrant images &amp; docker images\"></a>Vagrant images &amp; docker images</h3><p>TODO</p>\n<h3 id=\"VM-image\"><a href=\"#VM-image\" class=\"headerlink\" title=\"VM image\"></a>VM image</h3><p>archlinux 虚拟机可从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaC1ib3hlcy8tL3BhY2thZ2Vz\">这里</span>下载，使用手册<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaC1ib3hlcw==\">在此</span>。</p>\n<h3 id=\"HTTP-下载（最常用）\"><a href=\"#HTTP-下载（最常用）\" class=\"headerlink\" title=\"HTTP 下载（最常用）\"></a>HTTP 下载（最常用）</h3><p>从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录<code>sha256sums.txt</code>及<code>b2sums.txt</code>文件中的校验和匹配。<br>下载签名：<code>sq wkd get pierre@archlinux.org -o release-key.pgp</code><br>验证：<code>sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso</code><br>:::info<br><code>sq</code>命令需要使用<code>scoop</code>进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文<br>:::</p>\n<h2 id=\"校验和\"><a href=\"#校验和\" class=\"headerlink\" title=\"校验和\"></a>校验和</h2><p>最新版本的校验和下载详见官网。在镜像源网站上也可以看到<code>sha256sums.txt</code>和<code>b2sums.txt</code><br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/tsinghua_mirror.png\" alt=\"清华大学镜像站\">。下载镜像后我们需要利用它与我们下载到的镜像的校验和进行比对(主要是用于比对，这两个文件可下载也可不下载，在镜像站上也能打开，只要我们下载到的镜像的校验和文件中版本对应的那行的校验和匹配就行了)。</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><ol>\n<li>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==\">Download 界面</span>选择推荐的 BitTorrent Download:<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/download.png\" alt=\"下载界面\"></li>\n<li>下载到本地电脑的 Downloads 文件夹中，其后缀名为<code>.torrent</code></li>\n<li>打开百度网盘，在其中上传该文件</li>\n<li>上传后双击该文件，点击开始下载到网盘，等待下载完成（有点慢哈！）</li>\n<li>下载到网盘后，将<code>iso镜像文件</code>下载到在自选的本地目录中<br>:::info<br>由于这种方式下载过慢，笔者建议使用方法二，即通过开源镜像站进行下载。<br>:::</li>\n</ol>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><ol>\n<li>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==\">Download 界面</span>下翻，找到中国的镜像站列表:<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/mirrors.png\" alt=\"中国镜像站列表\"></li>\n<li>在其中选择<code>tuna.tsinghua.edu.cn</code>，即清华大学镜像站（我每次都用他们的镜像，速度不错）<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/tsinghua_mirror.png\" alt=\"清华大学镜像站\"></li>\n<li>选择<code>archlinux-2023.09.01-x86_64.iso</code>下载</li>\n<li>将<code>.iso</code>文件保存到我们想要虚拟机保存的目录中</li>\n</ol>\n<h1 id=\"获取GnuPG签名\"><a href=\"#获取GnuPG签名\" class=\"headerlink\" title=\"获取GnuPG签名\"></a>获取<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL0dudVBH\">GnuPG</span>签名</h1><blockquote>\n<p>GnuPG 是什么？<br>GnuPG 是完整实现了 RFC4880（即 PGP）所定义的 OpenPGP 标准的自由软件。GnuPG 可以加密和签名你的数据和通讯信息，包含一个通用的密钥管理系统以及用于各种公钥目录的访问模块。GnuPG，简称 GPG，是一个易于与其它程序整合的命令行工具，拥有很多前端程序和函数库。GnuPG 还支持 S&#x2F;MIME 和 Secure Shell (ssh)。</p>\n</blockquote>\n<p>从上述清华大学镜像站，可获取 iso 版本对应的 PGP 签名<code>archlinux-2023.09.01-x86_64.iso.sig`` ![清华大学镜像站](tsinghua_mirror.png) 在本次安装中，我使用的是</code>Git Bash<code>，其中装有GPG，</code>cmd<code>和</code>powershell&#96;中也装有 gpg，可选择一个终端进行后续操作。</p>\n<h1 id=\"验证签名\"><a href=\"#验证签名\" class=\"headerlink\" title=\"验证签名\"></a>验证签名</h1><p>为避免因 HTTP 连接下载镜像时遭到拦截，获取到恶意镜像，我们需要利用 PGP 签名对镜像进行验证。<br>通过以下命令验证:</p>\n<pre><code class=\"bash\">gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig\n</code></pre>\n<p>其中<code>version</code>替换成你所下载的版本号，如<code>2023.09.01</code>。我的显示结果是：</p>\n<pre><code class=\"bash\">legion@DESKTOP-ROOSFVQ MINGW64 /e/VMs/Arch\n$ gpg --keyserver-options auto-key-retrieve --verify archlinux-2023.09.01-x86_64.iso.sig\ngpg: assuming signed data in &#39;archlinux-2023.09.01-x86_64.iso&#39;\ngpg: Signature made 2023年09月 1日 18:48:49\ngpg:                using EDDSA key 3E80CA1A8B89F69CBA57D98A76A5EF9054449A5C\ngpg:                issuer &quot;pierre@archlinux.org&quot;\ngpg: Good signature from &quot;Pierre Schmitz &lt;pierre@archlinux.org&gt;&quot; [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: 3E80 CA1A 8B89 F69C BA57  D98A 76A5 EF90 5444 9A5C\n</code></pre>\n<p>若从镜像站下载，则会显示<code>fingerprint</code>，我们需要打开<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rZXlzZXJ2ZXIudWJ1bnR1LmNvbS9wa3MvbG9va3VwP29wPXZpbmRleCZmaW5nZXJwcmludD1vbiZleGFjdD1vbiZzZWFyY2g9MHgzRTgwQ0ExQThCODlGNjlDQkE1N0Q5OEE3NkE1RUY5MDU0NDQ5QTVD\">fingerprint 合集</span>,确保我们所获得的镜像的<code>fingerprint</code>和该网站上的 fingerprint 吻合。（确保公钥的指纹等于其中一位签署了 ISO 文件 Arch Linux 开发者的指纹）</p>\n<h1 id=\"准备安装介质\"><a href=\"#准备安装介质\" class=\"headerlink\" title=\"准备安装介质\"></a>准备安装介质</h1><p>安装镜像包括：U 盘，光盘，和带有 PXE 的网络安装镜像。此处我是用 VMWare 虚拟机进行安装。</p>\n<h1 id=\"VMWare-新建虚拟机\"><a href=\"#VMWare-新建虚拟机\" class=\"headerlink\" title=\"VMWare 新建虚拟机\"></a>VMWare 新建虚拟机</h1><p>依次选择：</p>\n<ol>\n<li>自定义（高级）</li>\n<li>硬件兼容性</li>\n<li>稍后安装操作系统</li>\n<li>本内核版本为 6.4.12，因 VMware 中没有 Arch，因此我选择<code>其他 Linux 5.x 内核 64位</code></li>\n<li>选择安装目录（自定）</li>\n<li>处理器配置、<del>内存大小分配</del>均选择默认（注意：内存大小选择 2G，768MB 完全不够)</li>\n<li>使用网络地址转换（NAT）</li>\n<li>SCSI 控制器:LSI Logic（L）</li>\n<li>虚拟磁盘类型：SCSI（S）</li>\n<li>创建新虚拟磁盘</li>\n<li>最大磁盘大小默认，将虚拟磁盘拆分成多个文件</li>\n<li>磁盘文件名默认</li>\n<li>自定义硬件-&gt;新 CD&#x2F;DVD-&gt;使用 ISO 映像文件-&gt;选择我们下载的 iso 文件-&gt;关闭</li>\n<li>完成</li>\n<li>你可以自行决定 BIOS 或 UEFI 模式启动（我选择 UEFI，但是应该影响不大）</li>\n<li>点击开启此虚拟机<br>:::info<br>Ready for the journey? Let’s go!<br>:::</li>\n</ol>\n<h1 id=\"进入安装程序\"><a href=\"#进入安装程序\" class=\"headerlink\" title=\"进入安装程序\"></a>进入安装程序</h1><ol>\n<li>默认第一项，等待一会儿，随后进入命令行模式</li>\n</ol>\n<h1 id=\"一号坑：VMware-默认分配内存-768MB-过小，需要-2G\"><a href=\"#一号坑：VMware-默认分配内存-768MB-过小，需要-2G\" class=\"headerlink\" title=\"一号坑：VMware 默认分配内存 768MB 过小，需要 2G\"></a>一号坑：VMware 默认分配内存 768MB 过小，需要 2G</h1><p>开局遇雷：怎么回事？<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/command.png\" alt=\"命令行模式开启\"><br>:::info<br>参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDk5MDgwL2FydGljbGUvZGV0YWlscy8xMzE3MTE1MDMjOn46dGV4dD0yJUUzJTgwJTgxJUU2JTlCJUI0JUU2JTk2JUIwJUU5JTk1JTlDJUU1JTgzJThGJUU2JUJBJTkwcGFjbWFuLC1TeXkzJUUzJTgwJTgxJUU2JTlCJUI0JUU2JTk2JUIwUk9PVCVFNSVBRiU4NiVFNyVBMCU4MXBhc3N3ZDQlRTMlODAlODE=\">这篇博文</span>虚拟机默认的是 768MB，不够。在设置中修改为 2G,成功启动。<br>:::</p>\n<h1 id=\"二号坑：网络出现问题\"><a href=\"#二号坑：网络出现问题\" class=\"headerlink\" title=\"二号坑：网络出现问题\"></a>二号坑：网络出现问题</h1><p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/network_error.png\" alt=\"Arch网络出问题\"><br>:::info<br>关了虚拟机，重新开机，成功启动<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/success.png\" alt=\"Arch成功启动\"><br>:::</p>\n<h1 id=\"配置控制台键盘布局和字体\"><a href=\"#配置控制台键盘布局和字体\" class=\"headerlink\" title=\"配置控制台键盘布局和字体\"></a>配置控制台键盘布局和字体</h1><p>系统启动后，控制台键盘布局默认为 us（美式键盘）。如果您需要列出所有可用的键盘布局，可以使用以下命令：</p>\n<pre><code class=\"bash\">ls /usr/share/kbd/keymaps/**/*.map.gz\n</code></pre>\n<p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/keymaps.png\" alt=\"显示所有键盘布局\"><br>此处我使用<code>us</code>键盘布局，不修改。</p>\n<h1 id=\"检查是否连接到互联网\"><a href=\"#检查是否连接到互联网\" class=\"headerlink\" title=\"检查是否连接到互联网\"></a>检查是否连接到互联网</h1><pre><code class=\"bash\">ip link\nping archlinux.org\n</code></pre>\n<p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/network.png\" alt=\"检查网络连接\"></p>\n<h1 id=\"更新系统时间\"><a href=\"#更新系统时间\" class=\"headerlink\" title=\"更新系统时间\"></a>更新系统时间</h1><pre><code class=\"bash\">timedatectl #查看系统时间\ntimedatectl list-timezones #查看所有时区\ntimedatectl set-timezone &quot;Asia/Shanghai&quot; # 设置为亚洲上海\n</code></pre>\n<p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/set-timezone.png\" alt=\"设置时区\"><br>:::info<br>要创建磁盘分区了，为保证出问题后还能倒回来，此处拍摄快照 1<br>:::</p>\n<h1 id=\"创建硬盘分区\"><a href=\"#创建硬盘分区\" class=\"headerlink\" title=\"创建硬盘分区\"></a>创建硬盘分区</h1><h2 id=\"指南\"><a href=\"#指南\" class=\"headerlink\" title=\"指南\"></a>指南</h2><p>系统如果识别到计算机的内置硬盘、U 盘或者移动硬盘等类型磁盘，就会将其分配为一个块设备，如 &#x2F;dev&#x2F;sda、&#x2F;dev&#x2F;nvme0n1 或 &#x2F;dev&#x2F;mmcblk0。可以使用 lsblk 或者 fdisk 查看：</p>\n<pre><code class=\"bash\">fdisk -l(此处为小写字母l)\n</code></pre>\n<p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/block.png\" alt=\"块设备\"><br>结果中以 rom、loop 或者 airoot 结尾的设备可以被忽略。<br>:::info<br>提示：在分区之前，请您检查 NVMe 驱动器和 Advanced Format 硬盘是否使用了最佳逻辑扇区大小。需要注意的是，更改逻辑扇区大小后，可能会导致在 Windows 系统中出现兼容性问题。<br>对于一个选定的设备，以下分区是必须要有的：</p>\n<ol>\n<li>一个根分区（挂载在 根目录）&#x2F;；</li>\n<li>要在 UEFI 模式中启动，还需要一个 EFI 系统分区。</li>\n<li>如果您需要创建多级存储例如 LVM、磁盘加密 或 RAID，请您在这时候完成。<br>请使用分区工具（fdisk 、parted、cfdisk 等等）修改分区表。例如：</li>\n</ol>\n<pre><code class=\"bash\">fdisk /dev/the_disk_to_be_partitioned（要被分区的磁盘）\n</code></pre>\n<p>注意：<br>如果您想要的磁盘没有显示出来， 确保您的磁盘控制器未处于 RAID 模式。<br>如果要启动的磁盘已经有一个 EFI 系统分区，就不要再新建 EFI 分区了，而是使用现有的 EFI 分区。<br>如果文件系统支持，交换空间 可以通过 交换文件 实现。<br>:::</p>\n<h2 id=\"分区方案：\"><a href=\"#分区方案：\" class=\"headerlink\" title=\"分区方案：\"></a>分区方案：</h2><p><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/partition.png\" alt=\"分区方案\"></p>\n<h2 id=\"分区步骤\"><a href=\"#分区步骤\" class=\"headerlink\" title=\"分区步骤\"></a>分区步骤</h2><h3 id=\"创建-GPT-分区表\"><a href=\"#创建-GPT-分区表\" class=\"headerlink\" title=\"创建 GPT 分区表\"></a>创建 GPT 分区表</h3><ol>\n<li>输入<code>fdisk /dev/sda</code>，对<code>/dev/sda</code>磁盘进行分区</li>\n<li>输入<code>g</code>，创建一个<code>GUID</code>分区表</li>\n</ol>\n<h3 id=\"创建第一个分区：EFI-分区\"><a href=\"#创建第一个分区：EFI-分区\" class=\"headerlink\" title=\"创建第一个分区：EFI 分区\"></a>创建第一个分区：EFI 分区</h3><ol>\n<li>输入<code>n</code>，创建第一个分区，输入其编号（默认为 1，即<code>/dev/sda1</code>）</li>\n<li>回车，默认其大小</li>\n<li>对最后一个扇区，输入<code>+512M</code></li>\n<li>输入<code>t</code>来将这个新分区改为”EFI System”</li>\n<li>输入<code>L</code>来查看所有分区名，输入<code>q</code>退出，可见<code>EFI System</code>分区别名为 1</li>\n<li>输入<code>1</code>，将分区改为<code>EFI System</code></li>\n</ol>\n<h3 id=\"创建第二个分区：文件系统分区\"><a href=\"#创建第二个分区：文件系统分区\" class=\"headerlink\" title=\"创建第二个分区：文件系统分区\"></a>创建第二个分区：文件系统分区</h3><ol>\n<li>输入<code>n</code>，创建第二个分区</li>\n<li>两次回车，使用默认分区号和扇区大小</li>\n<li>输入<code>-512M</code>，为交换分区留出 512MB 大小来</li>\n<li>分区默认名为<code>Linux filesystem</code>，因此不需要改</li>\n</ol>\n<h3 id=\"创建第三个分区：交换分区\"><a href=\"#创建第三个分区：交换分区\" class=\"headerlink\" title=\"创建第三个分区：交换分区\"></a>创建第三个分区：交换分区</h3><ol>\n<li>输入<code>n</code>，创建第三个分区</li>\n<li>连按 3 次回车，接受所有默认设置</li>\n<li>输入<code>t</code>，将新分区改为<code>Linux Swap</code>,别名为 19</li>\n</ol>\n<h3 id=\"查看分区结果\"><a href=\"#查看分区结果\" class=\"headerlink\" title=\"查看分区结果\"></a>查看分区结果</h3><p>输入<code>p</code></p>\n<h3 id=\"完成修改\"><a href=\"#完成修改\" class=\"headerlink\" title=\"完成修改\"></a>完成修改</h3><p>输入<code>w</code></p>\n<h1 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h1><p>对于不同的分区，我们使用不同的文件系统：</p>\n<h2 id=\"ESP-分区格式化：mkfs-fat格式化-FAT32-文件系统\"><a href=\"#ESP-分区格式化：mkfs-fat格式化-FAT32-文件系统\" class=\"headerlink\" title=\"ESP 分区格式化：mkfs.fat格式化 FAT32 文件系统\"></a>ESP 分区格式化：<code>mkfs.fat</code>格式化 FAT32 文件系统</h2><p>ESP 在<code>/dev/sda1</code>中，运行<code>mkfs.fat -F32 /dev/sda1</code>来挂载 FAT32 文件系统</p>\n<h2 id=\"根分区-通过mkfs-ext4格式化-ext4-文件系统\"><a href=\"#根分区-通过mkfs-ext4格式化-ext4-文件系统\" class=\"headerlink\" title=\"根分区:通过mkfs.ext4格式化 ext4 文件系统\"></a>根分区:通过<code>mkfs.ext4</code>格式化 ext4 文件系统</h2><p><code>mkfs.ext4 /dev/sad2</code></p>\n<h2 id=\"交换分区格式化：mkswap\"><a href=\"#交换分区格式化：mkswap\" class=\"headerlink\" title=\"交换分区格式化：mkswap\"></a>交换分区格式化：<code>mkswap</code></h2><p><code>mkswap /dev/sda3</code></p>\n<h1 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h1><h2 id=\"挂载根分区\"><a href=\"#挂载根分区\" class=\"headerlink\" title=\"挂载根分区\"></a>挂载根分区</h2><p>将根磁盘卷挂载到<code>/mnt</code>，使用命令：<code>mount /dev/sda2 /mnt</code></p>\n<h2 id=\"挂载-EFI-分区\"><a href=\"#挂载-EFI-分区\" class=\"headerlink\" title=\"挂载 EFI 分区\"></a>挂载 EFI 分区</h2><pre><code class=\"bash\">mount --mkdir /dev/sda1 /mnt/boot\n</code></pre>\n<h2 id=\"挂载-swap-分区\"><a href=\"#挂载-swap-分区\" class=\"headerlink\" title=\"挂载 swap 分区\"></a>挂载 swap 分区</h2><p><code>swapon /dev/sda3</code>来启用交换分区</p>\n<p>稍后 genfstab(8) 将自动检测挂载的文件系统和交换空间。</p>\n<h1 id=\"开始安装系统\"><a href=\"#开始安装系统\" class=\"headerlink\" title=\"开始安装系统\"></a>开始安装系统</h1><h2 id=\"选择镜像站\"><a href=\"#选择镜像站\" class=\"headerlink\" title=\"选择镜像站\"></a>选择镜像站</h2><h3 id=\"安装reflector包\"><a href=\"#安装reflector包\" class=\"headerlink\" title=\"安装reflector包\"></a>安装<code>reflector</code>包</h3><p>通常来说系统默认有，如果没有的话使用如下命令安装：<br><code>sudo pacman -S reflector</code></p>\n<h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><pre><code class=\"bash\">sudo reflector --country China --save /etc/pacman.d/mirrorlist.pacnew\n</code></pre>\n<p>确保源准确无误后，将<code>mirrorlist.pacnew</code>复制到<code>mirrorlist</code></p>\n<h2 id=\"安装必须的软件包\"><a href=\"#安装必须的软件包\" class=\"headerlink\" title=\"安装必须的软件包\"></a>安装必须的软件包</h2><p>使用 pacstrap(8) 脚本，安装 base 包 软件包和 Linux 内核以及常规硬件的固件：</p>\n<pre><code class=\"bash\">pacstrap -K /mnt base linux vim man-db man-pages texinfo\n</code></pre>\n<p>这时候可以同时额外安装计算机的 CPU 微码包。如果计算机是 Intel 的 CPU ，使用<code>intel-ucode</code>包，AMD CPU 则使用 <code>amd-ucode</code>包。也可以暂时都不安装，等到进入系统后再安装。<br>:::info</p>\n<ol>\n<li>因为我是在虚拟机中安装，因此我不安装固件<code>linux-firmware</code>和微码包<code>intel-ucode</code>。如果你有想补充的软件，请加在<code>pacstrap</code>后面。</li>\n<li>是<code>texinfo</code>，不是<code>textinfo</code>，不要看错啦！<br>:::<!-- ~~# 三号坑：出现`error: failed to install packages to new root`~~\n解决方案：</li>\n<li><code>pacman -S archlinux-keyring</code></li>\n<li><code>pacman-key --refresh-keys</code><br>–&gt;</li>\n</ol>\n<h1 id=\"配置系统\"><a href=\"#配置系统\" class=\"headerlink\" title=\"配置系统\"></a>配置系统</h1><h2 id=\"生成-fstab-文件\"><a href=\"#生成-fstab-文件\" class=\"headerlink\" title=\"生成 fstab 文件\"></a>生成 fstab 文件</h2><p>通过以下命令生成 fstab 文件 (用 -U 或 -L 选项设置 UUID 或卷标)：</p>\n<pre><code class=\"bash\">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre>\n<p>强烈建议在执行完以上命令后，检查一下生成的<code>/mnt/etc/fstab</code>文件是否正确。</p>\n<h2 id=\"chroot-到新安装的系统\"><a href=\"#chroot-到新安装的系统\" class=\"headerlink\" title=\"chroot 到新安装的系统\"></a>chroot 到新安装的系统</h2><pre><code class=\"bash\">arch-chroot /mnt\n</code></pre>\n<p>:::info<br>提示：此处使用的是 arch-chroot 而不是直接使用 chroot，注意不要输错了。在<code>arch-chroot</code>进入<code>/mnt</code>后，提示符应该变为了<code>[root@archiso]</code>样式，如果没有，请检查一下前面的步骤是否都准确完成了。<br>:::</p>\n<h2 id=\"设置时区\"><a href=\"#设置时区\" class=\"headerlink\" title=\"设置时区\"></a>设置时区</h2><pre><code class=\"bash\">ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime\n</code></pre>\n<p>地区名填 Asia,城市名填 Shanghai<br>然后运行 hwclock(8) 以生成 &#x2F;etc&#x2F;adjtime：</p>\n<pre><code class=\"bash\">hwclock --systohc\n</code></pre>\n<p>这个命令假定已设置硬件时间为 UTC 时间。</p>\n<h2 id=\"区域和本地化设置\"><a href=\"#区域和本地化设置\" class=\"headerlink\" title=\"区域和本地化设置\"></a>区域和本地化设置</h2><ol>\n<li>编辑<code>/etc/locale.gen</code>。将<code>en_US.UTF-8</code>或其他你想要的配置，对应那行取消注释。修改后，执行<code>locale-gen</code>，以生成<code>locale信息</code>。</li>\n<li>创建<code>/etc/locale.conf</code>，在其中写入：</li>\n</ol>\n<pre><code class=\"bash\">LANG=en_US.UTF-8\n</code></pre>\n<h2 id=\"控制台键盘布局和字体设置\"><a href=\"#控制台键盘布局和字体设置\" class=\"headerlink\" title=\"控制台键盘布局和字体设置\"></a>控制台键盘布局和字体设置</h2><p>如果需要修改控制台键盘布局和字体，可编辑 &#x2F;etc&#x2F;vconsole.conf 使其长期生效，例如：</p>\n<pre><code class=\"bash\">KEYMAP=de-latin1\n</code></pre>\n<h2 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h2><p>:::info<br>网络配置很重要,否则安装系统后会连不上网（例如<code>VirtualBox</code>桥接模式就需要配置 DHCP）<br>:::</p>\n<h3 id=\"设置主机名\"><a href=\"#设置主机名\" class=\"headerlink\" title=\"设置主机名\"></a>设置主机名</h3><p>创建<code>/etc/hostname</code>文件，在其中直接填写你所设定的主机名，我填写的主机名是<code>arch</code></p>\n<h3 id=\"检查连接\"><a href=\"#检查连接\" class=\"headerlink\" title=\"检查连接\"></a>检查连接</h3><p>TODO</p>\n<h3 id=\"安装网络管理器\"><a href=\"#安装网络管理器\" class=\"headerlink\" title=\"安装网络管理器\"></a>安装网络管理器</h3><ol>\n<li><code>pacman -S networkmanager</code></li>\n<li><code>systemctl enable NetworkManager.service</code>设置网络管理器开机自启动</li>\n</ol>\n<h2 id=\"关于-initramfs\"><a href=\"#关于-initramfs\" class=\"headerlink\" title=\"关于 initramfs\"></a>关于 initramfs</h2><p>通常不需要自己创建新的 initramfs，因为在执行 pacstrap 时已经安装 linux 包，这时已经运行过 mkinitcpio 了。</p>\n<h2 id=\"设置-root-密码\"><a href=\"#设置-root-密码\" class=\"headerlink\" title=\"设置 root 密码\"></a>设置 root 密码</h2><p>输入<code>passwd</code>创建一个<code>root</code>密码</p>\n<h2 id=\"安装引导程序\"><a href=\"#安装引导程序\" class=\"headerlink\" title=\"安装引导程序\"></a>安装引导程序</h2><p>需要安装 Linux 引导加载程序，才能在安装后启动系统，可以使用的的引导程序已在启动加载器中列出，请选择一个安装并配置它，GRUB 是最常见的选择。<br>如果有 Intel 或 AMD 的 CPU，请另外启用微码更新。</p>\n<ol>\n<li>安装<code>grub</code>和<code>efibootmgr</code>：输入<code>pacman -S grub efibootmgr</code></li>\n<li>输入<code>grub-install --target=x86_64-efi --efi-directory=[esp] --bootloader-id=GRUB</code><br>:::info<br>我的<code>esp</code>挂载点是<code>/mnt/boot</code>，因为我已经<code>arch-chroot</code>到<code>/mnt</code>中了，因此<code>esp</code>字段填写<code>/boot</code>即可。如果你安装在了其他挂载点上，请在<code>esp</code>字段填写你自己的挂载点。如果出现问题，检查：</li>\n</ol>\n<ul>\n<li>是否已经<code>arch-chroot</code>到了<code>/mnt</code>下？命令提示符为<code>[root@archiso]</code></li>\n<li>前面的配置过程有没有出现问题？<br>:::<br><code>grub-install</code>命令成功时应该出现:<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/grub-install.png\" alt=\"grub-install成功\"></li>\n</ul>\n<ol start=\"3\">\n<li>生成主配置文件:<code>grub-mkconfig -o /boot/grub/grub.cfg</code><br>配置成功时界面：<br><img data-src=\"/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/configure.png\" alt=\"配置成功\"></li>\n</ol>\n<h1 id=\"重新启动计算机\"><a href=\"#重新启动计算机\" class=\"headerlink\" title=\"重新启动计算机\"></a>重新启动计算机</h1><ol>\n<li><code>exit</code>退出<code>chroot</code>环境</li>\n<li><code>umount -R /mnt</code>取消挂载<code>/mnt</code>（也等到可<code>reboot</code>时 systemd 自动卸载）</li>\n<li><code>reboot</code>重启系统</li>\n</ol>\n<h1 id=\"安装后的工作\"><a href=\"#安装后的工作\" class=\"headerlink\" title=\"安装后的工作\"></a>安装后的工作</h1><p>参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCQiVCQSVFOCVBRSVBRSVFOSU5OCU4NSVFOCVBRiVCQg==\">建议阅读列表</span>及<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCQSU5NCVFNyU5NCVBOCVFNyVBOCU4QiVFNSVCQSU4RiVFNSU4OCU5NyVFOCVBMSVBOA==\">应用程序列表</span></p>\n",
            "tags": [
                "Arch",
                "Linux",
                "操作系统",
                "notes",
                "安装教程"
            ]
        }
    ]
}