{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"系统\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "url": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "title": "15213 Lab 1-data lab 实验总结",
            "date_published": "2024-02-05T07:50:22.000Z",
            "content_html": "<p>部分的题目我参考了一下网上的内容（出处已注明），其他的均为自己实现（有的题目的实现过程可能会有些繁琐），部分 dlc 检测出来可能会报些 error，但是 btest 均能过。</p>\n<blockquote>\n<p>没有 TA 可太难了！自己实现了一天多，终于苟完了。不算完美，但也能看吧。</p>\n</blockquote>\n<h2 id=\"bitXor\"><a href=\"#bitXor\" class=\"headerlink\" title=\"bitXor\"></a>bitXor</h2><pre><code class=\"c\">/*\n * bitXor - x^y using only ~ and &amp;\n *   Example: bitXor(4, 5) = 1\n *   Legal ops: ~ &amp;\n *   Max ops: 14\n *   Rating: 1\n */\nint bitXor(int x, int y)\n&#123;\n   /**\n    * x + y = ~( ~x &amp; ~y)\n    */\n   return ~((~(x &amp; ~y)) &amp; (~(y &amp; ~x)));\n&#125;\n</code></pre>\n<p>bitXor 要求我们使用位操作来实现<code>^</code>运算符。根据运算定律我们知道: <code>a ^ b = (a &amp; (~b)) | (b &amp; (~a))</code>。但是问题来了，我们这里不允许使用<code>|</code>，只能用<code>~</code>和<code>&amp;</code>。那么我们就必须使用这两个操作符来实现<code>|</code>运算。<br>通过德摩根定律我们知道：<code>a | b = ~((~a) &amp; (~b))</code>。这不就解决问题了嘛，所以将这两个式子综合一下，最后的结果是<code>~((~(x &amp; ~y)) &amp; (~(y &amp; ~x)))</code></p>\n<h2 id=\"tmin\"><a href=\"#tmin\" class=\"headerlink\" title=\"tmin\"></a>tmin</h2><pre><code class=\"c\">/*\n * tmin - return minimum two&#39;s complement integer\n *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 4\n *   Rating: 1\n */\nint tmin(void)\n&#123;\n   /**\n    * the most significant bit = 1, others = 0, so (1 &lt;&lt; 31)\n    */\n   return (1 &lt;&lt; 31);\n&#125;\n</code></pre>\n<p>这题要求我们返回最小的补码整数，返回类型为<code>int</code>。首先，在二进制补码表示中，最高位的权值为-1，其他位的权值为 1。因此，最小的补码整数 tmin 的最高位为 1，其他位为 0。而题目中<code>int</code>类型为 32 位，因此只要返回<code>(1 &lt;&lt; 31)</code>即可。</p>\n<h2 id=\"isTmax\"><a href=\"#isTmax\" class=\"headerlink\" title=\"isTmax\"></a>isTmax</h2><pre><code class=\"c\">/*\n * isTmax - returns 1 if x is the maximum, two&#39;s complement number,\n *     and 0 otherwise\n *   Legal ops: ! ~ &amp; ^ | +\n *   Max ops: 10\n *   Rating: 1\n */\nint isTmax(int x)\n&#123;\n   /**\n    * Tmax ^ Tmin = 0xffffffff, ~0xffffffff = 0x0, !0x0 = 0x1\n    */\n   // return !(~(x ^ (1 &lt;&lt; 31)));\n\n   /**\n    * ~Tmax = Tmin -&gt; ~Tmin + 1 = Tmin 且 Tmin != 0\n    */\n   int num = ~x;\n   return !(num ^ (~num + 1)) &amp; !!num;\n&#125;\n</code></pre>\n<p>tmax 是二进制补码中最大的数，通过分析这个数的特点，我们可以完成这道题目。</p>\n<ol>\n<li>该数除了最高位是 0 外，其他位均是 1。因此该数和(1&lt;&lt;31)（也就是 tmin）的亦或（或者和）为<code>0xffffffff</code>。<code>0xffffffff</code>按位取反得到<code>0x0</code>，而<code>0x0</code>按位取反得到<code>0x1</code>。但是其他的数并没有这个特性。</li>\n</ol>\n<pre><code class=\"c\">return !(~(x ^ (1 &lt;&lt; 31)));\n</code></pre>\n<ol start=\"2\">\n<li>该数取反后得到 tmin，tmin 的一个特点是 tmin 和 -tmin 的表示相同。因此两者亦或得到 0。还有一个树也有这样的特性，也就是 0。因此我们需要排除 0 的可能性。我们使用<code>&amp;</code>操作符来实现两种特性的叠加。我本没有想到该方法，是从这篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQxMjY3OTU=\">知乎帖子</span>学习到的。</li>\n</ol>\n<pre><code class=\"c\">int num = ~x;\nreturn !(num ^ (~num + 1)) &amp; !!num;\n</code></pre>\n<p>但是题目不允许在该题中使用移位运算符，因此只能使用方法二。</p>\n<h2 id=\"allOddBits\"><a href=\"#allOddBits\" class=\"headerlink\" title=\"allOddBits\"></a>allOddBits</h2><pre><code class=\"c\">/*\n * allOddBits - return 1 if all odd-numbered bits in word set to 1\n *   where bits are numbered from 0 (least significant) to 31 (most significant)\n *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1\n *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 12\n *   Rating: 2\n */\nint allOddBits(int x)\n&#123;\n   /**\n    * tear the number into 4 parts, get rid of the other digits except 0xaa\n    * if the results are all the same, then compare it with 0xaa, if there are the same, xor returns 0\n    * otherwise not all odd bits in word set is set to 1\n    */\n   int first = (x &gt;&gt; 24) &amp; 0xaa;\n   int second = (x &gt;&gt; 16) &amp; 0xaa;\n   int third = (x &gt;&gt; 8) &amp; 0xaa;\n   int fourth = x &amp; 0xaa;\n   return !((first &amp; second &amp; third &amp; fourth) ^ 0xaa);\n&#125;\n</code></pre>\n<p>对于单个字节的奇数位，我们可以使用<code>0xaa</code>作为 mask。<br>本题目中我将位打成 4 个部分，每个部分与 mask 相与。如果每个奇数位都是 1 的话，四个部分的比较结果应该相同，都等于<code>0xaa</code>，该值与<code>0xaa</code>异或得到<code>0x0</code>，取<code>!</code>后得到<code>0x1</code>。否则该值不为<code>0xaa</code>，同<code>0xaa</code>亦或得到其他非零值，取<code>!</code>后得到<code>0x0</code>。</p>\n<h2 id=\"negate\"><a href=\"#negate\" class=\"headerlink\" title=\"negate\"></a>negate</h2><pre><code class=\"c\">/*\n * negate - return -x\n *   Example: negate(1) = -1.\n *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 5\n *   Rating: 2\n */\nint negate(int x)\n&#123;\n   return (~x + 1);\n&#125;\n</code></pre>\n<p>该题目中我们需要求解某个数的相反数。在课堂中我们学过，一个数和它相反数的和为 0。那么如何获得其相反数呢？以<code>x</code>为例，我们知道<code>x + ~x = ~0</code>，也就是全 f，然后<code>~0 + 1 = 0</code>。因此，<code>-x</code>的补码表示即为<code>~x + 1</code>。</p>\n<h2 id=\"isAsciiDigit\"><a href=\"#isAsciiDigit\" class=\"headerlink\" title=\"isAsciiDigit\"></a>isAsciiDigit</h2><pre><code class=\"c\">/*\n * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#39;0&#39; to &#39;9&#39;)\n *   Example: isAsciiDigit(0x35) = 1.\n *            isAsciiDigit(0x3a) = 0.\n *            isAsciiDigit(0x05) = 0.\n *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 15\n *   Rating: 3\n */\nint isAsciiDigit(int x)\n&#123;\n   /**\n    * least = (x &amp; 0xf) - 0xa\n    * if least &gt; 0 (with 0 in most significant bit) then least = 0\n    * else least = 1\n    */\n   int least = ((((x &amp; 0xf) + (~0xa + 1)) &gt;&gt; 31) &amp; 0x1);\n   int second = !((x &gt;&gt; 4) ^ 0x3);\n   return least &amp; second;\n&#125;\n</code></pre>\n<p>这里我使用的方法是将该数拆分为最低位和其他位来比较。我们将最低位与<code>0xa</code>相减，如果求得的结果为负数，符号位即为 1，代表该值在 0-9 之间。接下来判断其他位是否为<code>0x3</code>，如果是，则和<code>0x3</code>异或结果为 0，通过逻辑<code>!</code>返回 1。</p>\n<h2 id=\"conditional\"><a href=\"#conditional\" class=\"headerlink\" title=\"conditional\"></a>conditional</h2><pre><code class=\"c\">/*\n * conditional - same as x ? y : z\n *   Example: conditional(2,4,5) = 4\n *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 16\n *   Rating: 3\n */\nint conditional(int x, int y, int z)\n&#123;\n   /**\n    * judge if x != 0, if true, !!x = 1, return y, otherwise !!x = 0, return z\n    */\n\n   // cond gets all f when !!x == 1\n   int cond = ((!!x) &lt;&lt; 31) &gt;&gt; 31;\n   return (cond &amp; y) | (~cond &amp; z);\n&#125;\n</code></pre>\n<p>这里我们先获取<code>x</code>的值，如果<code>x != 0</code>，则<code>!!x = 0x1</code>，否则为<code>0x0</code>。扩展该值，当该值为<code>0x1</code>时与<code>y</code>相与得到 y。当该值为<code>0x0</code>，取反后与 z 相与得到 z。因为这两个值只取其一，当一边不为 0 时另一边必然为 0，因此两边用<code>|</code>连接。</p>\n<h2 id=\"isLessOrEqual\"><a href=\"#isLessOrEqual\" class=\"headerlink\" title=\"isLessOrEqual\"></a>isLessOrEqual</h2><blockquote>\n<p>本题要求使用最多 24 个运算符，但是这里我使用的过多了，应该会有更好的办法。期待有人指正。</p>\n</blockquote>\n<pre><code class=\"c\">/*\n * isLessOrEqual - if x &lt;= y  then return 1, else return 0\n *   Example: isLessOrEqual(4,5) = 1.\n *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 24\n *   Rating: 3\n */\nint isLessOrEqual(int x, int y)\n&#123;\n   // first compare their sign bit\n   int sign_x = (x &gt;&gt; 31) &amp; 0x1;\n   int sign_y = (y &gt;&gt; 31) &amp; 0x1;\n   // return true if sign = 1(&gt;0)\n   int sign_diff = sign_x + (~sign_y + 1);\n   int sign_bit = (sign_diff &gt;&gt; 31) &amp; 0x1;\n\n   // then compare the magnitude\n   int mask = (~0) + (0x1 &lt;&lt; 31);\n   int mag_x = x &amp; mask;\n   int mag_y = y &amp; mask;\n   int mag_diff = mag_x + (~mag_y + 1);\n   int mag_sign = !(mag_x ^ mag_y) | ((mag_diff &gt;&gt; 31) &amp; 0x1);\n\n   /**\n    * 2 conditions return true:\n    * 1. sign of x = 1 and sign of y = 0\n    * 2. sign of x and y equals, and magnitude of x &lt;= y\n    */\n   return (((!sign_bit) &amp; sign_diff) | ((!sign_diff) &amp; mag_sign));\n&#125;\n</code></pre>\n<p>这里要分几种情况：</p>\n<ol>\n<li>x 为负数，y 为正数，直接返回<code>0x1</code></li>\n<li>x 和 y 同符号，比较数值部分。x &lt;&#x3D; y 时，返回<code>0x1</code>；x &gt; y 时，返回<code>0x0</code></li>\n<li>x 为正数，y 为负数，返回<code>0x0</code></li>\n</ol>\n<p>其中<code>sign_diff</code>为两数符号位之差，此处分三种情况：</p>\n<ol>\n<li>x 为负数，符号位为 1；y 为正数，符号位为 0。那么两者符号位相减等于<code>0x1</code>，该值的符号位为 0。（这是我们要返回<code>0x1</code>的结果）</li>\n<li>x 为正数，符号位为 0；y 为负数，符号位为 1。那么两者符号位相减等于<code>0xffffffff</code>(-1)，该值的符号位为 1。（我们不要这个结果）</li>\n<li>x 和 y 的符号位相同，两者相减为<code>0x0</code>，该值的符号位为 0。（这里我们要看情况，看<code>x</code>是否和<code>y</code>相等）</li>\n</ol>\n<p>代码中<code>sign_diff</code>为两符号位之差，<code>sign_bit</code>为该做差结果的最高位。当 x 和 y 的符号位不相同时，当<code>sign_diff</code>为<code>0x1</code>且<code>sign_bit</code>为<code>0x0</code>是，我们返回<code>0x1</code>。这也是运算结果<code>|</code>左半边的由来。</p>\n<p>代码中<code>mag_diff</code>为两者数值部分之差，<code>mag_sign</code>为该差值的符号位。当<code>x &lt; y</code>时，<code>mag_diff</code>为<code>0xffffffff</code>。当<code>x == y</code>时，<code>!(mag_x ^ mag_y)</code>为<code>0x1</code>。因此<code>mag_sign = !(mag_x ^ mag_y) | ((mag_diff &gt;&gt; 31) &amp; 0x1)</code>。在判断数值之差部分时，我们需要保证两数符号位之差为<code>0x0</code>，而不是其他（如 x 正 y 负）。因此运算结果右半边的值为<code>(!sign_diff) &amp; mag_sign</code>。</p>\n<p>综上，最后的结果是<code>((!sign_bit) &amp; sign_diff) | ((!sign_diff) &amp; mag_sign)</code>。</p>\n<h2 id=\"logicalNeg\"><a href=\"#logicalNeg\" class=\"headerlink\" title=\"logicalNeg\"></a>logicalNeg</h2><pre><code class=\"c\">/*\n * logicalNeg - implement the ! operator, using all of\n *              the legal operators except !\n *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1\n *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *   Max ops: 12\n *   Rating: 4\n */\nint logicalNeg(int x)\n&#123;\n   /**\n    * if x == 0, x ^ 0x0 = 0\n    */\n   return ((x | (x + ~0 + (~(1 &lt;&lt; 31) + 1))) &gt;&gt; 31) + 1;\n&#125;\n</code></pre>\n<p>这道题的难点在于：</p>\n<ol>\n<li>将 0 映射到 0x1</li>\n<li>将非 0 值映射到 0x0</li>\n</ol>\n<p>在一开始实现时，我的思路是对于 0，可以和<code>0x0</code>异或，判断为 0。但是对于非 0 的数，和<code>0x0</code>异或后还是他自己，我们也不知道 1 落在其中哪个位上，一个个位去找也不现实。那么就需要思考其他的办法。从<code>0x0</code>这个数和其他数的特点下手。这里我参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaW5nZmVuLmdpdGh1Yi5pby9jc2FwcC8yMDIxLzA0LzMwL0NTQVBQTGFiMDEuaHRtbA==\">这篇博客</span>。</p>\n<p>其给出的思路是：<br>-x 为 x 按位取反再+1。</p>\n<ul>\n<li>如果一个数为全 0，和相反数相<code>|</code>后结果全部是 0，加 1 后得到<code>0x1</code></li>\n<li>否则结果最高位必然含有 1。向右移动 31 位获得<code>~0</code>，再加 1 得到<code>0x0</code></li>\n</ul>\n<p>问题可改为，如何判断一个数全为 0 。注意到，-x 相当于按位取反再加一，如果 x 为 非 0 数，那么 x|(-x) 后必定为 -1 。利用这个性质，即可判断是否为 0 。</p>\n<h2 id=\"howManyBits\"><a href=\"#howManyBits\" class=\"headerlink\" title=\"howManyBits\"></a>howManyBits</h2><pre><code class=\"c\">/* howManyBits - return the minimum number of bits required to represent x in\n *             two&#39;s complement\n *  Examples: howManyBits(12) = 5\n *            howManyBits(298) = 10\n *            howManyBits(-5) = 4\n *            howManyBits(0)  = 1\n *            howManyBits(-1) = 1\n *            howManyBits(0x80000000) = 32\n *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;\n *  Max ops: 90\n *  Rating: 4\n */\nint howManyBits(int x)\n&#123;\n   /**\n    * divide and conquer\n    * for positive number, the number of bits = the last position of 1 + 1\n    * for negative number, the number of bits = the last position of 1\n    * inverse negative number and deal with it as the same as positive number\n    * 1. judge the sign bit of x, if x is negative, inverse it\n    * 2. judge the high 16 bits, if true(high 16 bits != 0x0), result + 16\n    * 3. judge the high 8 bits, if true, result + 8\n    * 4. judge the high 4 bits, if true, result + 4\n    * 5. judge the high 2 bits, if true, result + 2\n    * 6. judge the high 1 bits, if true, result + 1\n    * 7. judge the last 1 bit, if true, result + !!x\n    * 8. the final sum must + 1\n    * 9. return the result\n    */\n   // neg x if it&#39;s negative\n   int sign = ((x &amp; (1 &lt;&lt; 31)) &gt;&gt; 31);\n   x = (sign &amp; ~x) | (~sign &amp; x);\n\n   int b16, b8, b4, b2, b1, b0;\n\n   // int mask_16 = (1 &lt;&lt; 15) &gt;&gt; 15;\n   b16 = !!(x &gt;&gt; 16) &lt;&lt; 4;\n   x = x &gt;&gt; b16;\n\n   // int mask_8 = 0xff;\n   b8 = !!(x &gt;&gt; 8) &lt;&lt; 3;\n   x = x &gt;&gt; b8;\n\n   // int mask_4 = 0xf;\n   b4 = !!(x &gt;&gt; 4) &lt;&lt; 2;\n   x = x &gt;&gt; b4;\n\n   // int mask_2 = 0x3;\n   b2 = !!(x &gt;&gt; 2) &lt;&lt; 1;\n   x = x &gt;&gt; b2;\n\n   // int mask_1 = 0x1;\n   b1 = !!(x &gt;&gt; 1);\n   x = x &gt;&gt; b1;\n\n   //! judge if the last bit == 1\n   b0 = !!x;\n\n   return b16 + b8 + b4 + b2 + b1 + b0 + 1;\n&#125;\n</code></pre>\n<p>在这个题目中，我们主要采用分而治之的方法。分治方法的几道例题可以参考 CMU 15-213 课程的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MuY211LmVkdS9hZnMvY3MvYWNhZGVtaWMvY2xhc3MvMTUyMTMtZjIzL3d3dy9yZWNpdGF0aW9ucy9yZWMwMV9zb2x1dGlvbnMucGRm\">Recitation Slides</span>。</p>\n<p>首先，我们可以看到，如果该数是一个正数，则其最高位必然是 0，该数的位数 &#x3D; 最高一个 1 的位置 + 1；<br>如果该数是一个负数，该数的位数 &#x3D; 最高一个 1 的位置。<br>我们不想那么麻烦，把正负数分开讨论，因此我们把负数翻转过来。</p>\n<p>在这道题中我们采用的方法是：</p>\n<ol>\n<li>判断高 16 位是否有 1（把数向右移动 16 位后，结果不为 0，<code>!!(x &gt;&gt; 16)</code>）。<code>b16 = !!(x &gt;&gt; 16) &lt;&lt; 4</code>。如果是的话，把数值向右移动 16 位<code>(x&gt;&gt;b16)</code>。把<code>b16</code>添加到结果中去。这里一个妙用在于如果<code>!!(x &gt;&gt; 16）= 0x1</code>，<code>!!(x &gt;&gt; 16) &lt;&lt; 4</code>可以直接起到获得数字 16 的方法，无需增加其他的运算。</li>\n<li>判断高 8 位是否有 1，操作同上</li>\n<li>判断高 4 位是否有 1，操作同上</li>\n<li>判断高 2 位是否有 1，操作同上</li>\n<li>判断高 1 位是否有 1，操作同上</li>\n<li>判断该位是否有 1</li>\n<li>结果 + 1（位数 &#x3D; 最高一个 1 的位置 + 1）</li>\n<li>最后把所有判断结果加起来（每次判断的结果都是一个累加的位数，加在一起就是最后的总位数）</li>\n</ol>\n<h2 id=\"浮点数复习\"><a href=\"#浮点数复习\" class=\"headerlink\" title=\"浮点数复习\"></a>浮点数复习</h2><p>在完成浮点数部分的题目之前，我们需要复习一下浮点数的和其表示方法：</p>\n<ul>\n<li>单精度浮点数：1 位符号位 + 8 位阶码(exp) + 11 位尾数(frac)</li>\n<li>双精度浮点数：1 位符号位 + 11 位阶码(exp) + 52 位尾数(frac)</li>\n</ul>\n<p>其中阶码使用移码表示。$bias &#x3D; 2^{k-1}-1$</p>\n<p>浮点数分为三类：</p>\n<ul>\n<li>规格化数：阶码不全为 1 也不全为 0，尾数前有隐含的 1，指数$E&#x3D;exp - bias$，分布在非规格化数外侧</li>\n<li>非规格化数：阶码全为 0，尾数前隐含 0，指数$E&#x3D;1 - bias$，主要分布在靠近 0 侧</li>\n<li>特殊值：阶码全为 1，若尾数全为 0，则为<code>inf</code>，否则为<code>NaN</code></li>\n</ul>\n<h2 id=\"floatScale2\"><a href=\"#floatScale2\" class=\"headerlink\" title=\"floatScale2\"></a>floatScale2</h2><pre><code class=\"c\">// float\n/*\n * floatScale2 - Return bit-level equivalent of expression 2*f for\n *   floating point argument f.\n *   Both the argument and result are passed as unsigned int&#39;s, but\n *   they are to be interpreted as the bit-level representation of\n *   single-precision floating point values.\n *   When argument is NaN, return argument\n *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nunsigned floatScale2(unsigned uf)\n&#123;\n   // first get the sign, exp and mag bit of the number\n   unsigned sign = (uf &gt;&gt; 31) &amp; 0x1;\n   unsigned e = (uf &gt;&gt; 23) &amp; ((1 &lt;&lt; 8) - 1);\n   unsigned f = (uf &amp; ((1 &lt;&lt; 23) - 1));\n\n   if (e == 0)\n   &#123;\n      // denormalized number\n      // E = 1 - bias\n      // frac = f\n\n      //! how to multiply a denormalized number? frac * 2!\n      f = f * 2;\n   &#125;\n   else if (e == 0xff)\n   &#123;\n      // special number\n      // if frac = 0, then value = inf\n      if (f == 0)\n      &#123;\n         // frac = 1 / 0;\n         return uf;\n      &#125;\n      else\n      &#123;\n         // if frac != 0, value = NaN\n         return uf;\n      &#125;\n   &#125;\n   else\n   &#123;\n      // normalized number\n      // E = e - bias\n      // value = 1 + f\n\n      e += 1;\n      if (e == ~0)\n      &#123;\n         return uf;\n      &#125;\n   &#125;\n\n   return (sign &lt;&lt; 31) | (e &lt;&lt; 23) | f;\n&#125;\n</code></pre>\n<p>本题目要求是计算一个 unsigned 形式表示的浮点数 <code>* 2</code> 后的表示。在完成这题之前，我们首先把浮点数的几个部分提取出来，分几个情况讨论：</p>\n<ul>\n<li>非规格化数：指数不变，尾数乘 2。<strong>问题来了，这到底是为什么？因为当exp全为0时，exp &#x3D; 0, E &#x3D; 1 - bias, frac &#x3D; 0.f。乘以2就相当于把f左移一位，最高位会进到exp的位置去。如果f最高位是0，左移一位不影响exp（全0）。如果f最高位是1，左移一位后该数变为规格化数，exp变为1，E依然等于 1 - bias。实现了非规格化数到规格化数的平滑过渡（非常重要！）</strong></li>\n<li>规格化数：首先将指数 + 1，然后判断是否为特殊值，若是则返回<code>uf</code>。</li>\n<li>特殊值：<code>e = 0</code>，直接返回<code>uf</code>（根据题目意思）</li>\n</ul>\n<p>将符号位，指数和尾数三个部分拼凑起来，直接返回（本题中无需进行任何计算）。</p>\n<h2 id=\"floatFloat2Int\"><a href=\"#floatFloat2Int\" class=\"headerlink\" title=\"floatFloat2Int\"></a>floatFloat2Int</h2><blockquote>\n<p>本题中不允许使用<code>double</code>类型，我擅自用了，这里应该是不严谨的。</p>\n</blockquote>\n<pre><code class=\"c\">/*\n * floatFloat2Int - Return bit-level equivalent of expression (int) f\n *   for floating point argument f.\n *   Argument is passed as unsigned int, but\n *   it is to be interpreted as the bit-level representation of a\n *   single-precision floating point value.\n *   Anything out of range (including NaN and infinity) should return\n *   0x80000000u.\n *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nint floatFloat2Int(unsigned uf)\n&#123;\n   // first get the sign, exp and mag bit of the number\n   unsigned sign = (uf &gt;&gt; 31) &amp; 0x1;\n   unsigned e = (uf &gt;&gt; 23) &amp; ((1 &lt;&lt; 8) - 1);\n   float f = (uf &amp; ((1 &lt;&lt; 23) - 1)) / (1 &lt;&lt; 23);\n\n   // then get the exact sign, E and value of the number\n   int s = 0;\n   if (sign == 0)\n      s = 1;\n   else\n      s = -1;\n\n   int E = 0;\n   float frac = 0;\n   int bias = 127;\n   if (e == 0)\n   &#123;\n      // denormalized number\n      // E = 1 - bias\n      E = 1 - bias;\n      // frac = f\n      frac = f;\n   &#125;\n   else if (e == 0xff)\n   &#123;\n      //! COMPARE WITH 0XFF INSTEAD OF ~0\n      // special number\n      // if frac = 0, then value = inf\n      if (f == 0)\n      &#123;\n         // frac = 1 / 0;\n         return 0x80000000u;\n      &#125;\n      else\n      &#123;\n         // if frac != 0, value = NaN\n         return 0x80000000u;\n      &#125;\n   &#125;\n   else\n   &#123;\n      // normalized number\n      // E = e - bias\n      E = e - bias;\n      // value = 1 + f\n      frac = 1 + f;\n   &#125;\n   if (E &lt; 0)\n   &#123;\n      return 0;\n   &#125;\n   else if (E &gt; 31)\n   &#123;\n      //! REMEMBER THE SITUATION THAT E &gt; 31\n      return 0x80000000u;\n   &#125;\n\n   return s * frac * (1 &lt;&lt; E);\n&#125;\n</code></pre>\n<p>本题需要返回浮点数转化后的 int 类型数值。需要我们对浮点数的结构有所了解，并且其转化为 int 后需要切割掉小数部分，此外，我们还需要判断指数过大的情况（溢出）。</p>\n<p>本题中我们采用的步骤是：</p>\n<ol>\n<li>提取出浮点数三个部分，计算符号位的值</li>\n<li>当<code>e == 0</code>时，为特殊值的情况，<code>E = 1 - bias</code>，<code>frac = f</code></li>\n<li>当<code>e == 0xff</code>时（注意不是<code>~0/0xffffffff</code>,容易写错！），返回<code>0x80000000u</code></li>\n<li>以上两种情况都不是，则该数为规格化数，<code>E = e - bias; frac = 1 + f;</code></li>\n</ol>\n<p>最后，我们需要进行<strong>特殊情况的分类讨论</strong>：</p>\n<ol>\n<li>E &lt; 0, 则最后生成的结果（无论规格化还是非规格化）肯定是个小数，打头的是 0 那种，要切割为<code>int</code>类型，小数部分就被切割掉了</li>\n<li>E &gt; 31, 超过了指数可以表示的范围（算是溢出了？），返回<code>0x80000000u</code></li>\n<li>正常情况下返回<code>s * frac * (1 &lt;&lt; E)</code></li>\n</ol>\n<h2 id=\"floatPower2\"><a href=\"#floatPower2\" class=\"headerlink\" title=\"floatPower2\"></a>floatPower2</h2><pre><code class=\"c\">/*\n * floatPower2 - Return bit-level equivalent of the expression 2.0^x\n *   (2.0 raised to the power x) for any 32-bit integer x.\n *\n *   The unsigned value that is returned should have the identical bit\n *   representation as the single-precision floating-point number 2.0^x.\n *   If the result is too small to be represented as a denorm, return\n *   0. If too large, return +INF.\n *\n *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nunsigned floatPower2(int x)\n&#123;\n   //! REMEMEBER THAT FLOATING POINT ITSELF IS IN THE FORMAT (-1)^S * M * 2.0^E\n   // fit x into E\n   x = x + 127;\n   //! MIND THE SITUATION THAT X IS TOO LARGE OR TOO SMALL\n   if (x &gt;= 0xff)\n      x = 0xff;\n   else if (x &lt;= 0)\n      x = 0;\n   unsigned result = (x &lt;&lt; 23);\n   return result;\n&#125;\n</code></pre>\n<p>因为浮点数表示法本身就是以 2 为底，所以本实验就相当于如何把 x 转化为那个 8 位的阶码。因为<code>阶码 = 指数 + bias</code>，这里<code>bias = 127</code>，因此这里<code>E = x + 127</code>。然后和上一题一样，我们需要判断一下 x 的范围是否在<code>0xff</code>和<code>0</code>之间。最后将 x 移动到阶码的位置返回(<code>return x &lt;&lt; 23</code>)即可。</p>\n<h2 id=\"参考实现\"><a href=\"#参考实现\" class=\"headerlink\" title=\"参考实现\"></a>参考实现</h2><p>在完成 data lab 过程中，我参考了部分如下几个博客的实现:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQxMjY3OTU=\">CSAPP 实验一：DataLab 详细讲解与满分代码</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NDk4Nzc0NzU=\">lab1 CSAPP：datalab</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTc0ODExMTI=\">CSAPP lab1: datalab</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaW5nZmVuLmdpdGh1Yi5pby9jc2FwcC8yMDIxLzA0LzMwL0NTQVBQTGFiMDEuaHRtbA==\">深入理解计算机系统之位操作实验</span></li>\n</ul>\n",
            "tags": [
                "lab"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_Project/",
            "url": "https://salvely.github.io/blog/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_Project/",
            "title": "Final Project: 多线程HTTP服务器 实现记录",
            "date_published": "2024-01-08T02:32:56.000Z",
            "content_html": "<blockquote>\n<p>进入课程网页的时候意外发现这个 Project 的代码已经被填完了。所以没什么好做的。</p>\n</blockquote>\n<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>多线程网络服务器大致功能：简单的搜索和文件浏览</p>\n<ul>\n<li>Part A: 实现服务器读取文件，统计文件中的单词个数</li>\n<li>Part B: 实现网络连接和 HTTP 请求响应</li>\n<li>Part C: 将 A 和 B 两部分结合起来</li>\n</ul>\n<h2 id=\"Part-A\"><a href=\"#Part-A\" class=\"headerlink\" title=\"Part A\"></a>Part A</h2><h3 id=\"FileReader-cc\"><a href=\"#FileReader-cc\" class=\"headerlink\" title=\"FileReader.cc\"></a><code>FileReader.cc</code></h3><ul>\n<li>简单的文件阅读器</li>\n<li>在构建时读入文件名，<code>read_file</code>将整个文件读入一个<code>string</code></li>\n<li>可以使用<code>POSIX</code>, C 接口或者 C++文件流实现</li>\n</ul>\n<h3 id=\"WordIndex-h-WordIndex-cc\"><a href=\"#WordIndex-h-WordIndex-cc\" class=\"headerlink\" title=\"WordIndex.h &amp; WordIndex.cc\"></a><code>WordIndex.h &amp; WordIndex.cc</code></h3><p>实现一个数据结构，用于存储各个文件中的单词及其出现次数</p>\n<h3 id=\"CrawlFileTree-cc\"><a href=\"#CrawlFileTree-cc\" class=\"headerlink\" title=\"CrawlFileTree.cc\"></a><code>CrawlFileTree.cc</code></h3><p>实现<code>HandleFile</code>函数，其获取一个文件名和一个<code>WordIndex</code>，这个函数读取对应文件，并且将每个单词及其对应的个数存储在<code>WordIndex</code>中</p>\n<h2 id=\"Part-B\"><a href=\"#Part-B\" class=\"headerlink\" title=\"Part B\"></a>Part B</h2><h3 id=\"ServerSocket-cc\"><a href=\"#ServerSocket-cc\" class=\"headerlink\" title=\"ServerSocket.cc\"></a><code>ServerSocket.cc</code></h3><p>实现一个类，这个类包含：</p>\n<ul>\n<li>创建一个服务器端的监听 socket</li>\n<li>从客户端接受新的连接请求</li>\n<li><code>ServerSocket.h</code>中提供了头文件，需要在<code>ServerSocket.cc</code>中实现</li>\n</ul>\n<h3 id=\"HttpConnection-cc\"><a href=\"#HttpConnection-cc\" class=\"headerlink\" title=\"HttpConnection.cc\"></a><code>HttpConnection.cc</code></h3><ul>\n<li><code>HttpConnection</code>处理<code>HTTP</code>连接请求，将该请求转化为一个对象，并且负责将响应写回去</li>\n<li>该函数中主要实现<code>HTTP</code>请求的读取和解析(string 操作)</li>\n</ul>\n<h3 id=\"HttpUtils-cc\"><a href=\"#HttpUtils-cc\" class=\"headerlink\" title=\"HttpUtils.cc\"></a><code>HttpUtils.cc</code></h3><p>主要负责一些其他功能，尤其是安全方面：</p>\n<ul>\n<li><code>escape_html</code><ul>\n<li>用于防止<code>cross-site scripting</code>，参考<span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3NjcmlwdGluZw==\">Cross-site scripting</span></li>\n</ul>\n</li>\n<li><code>in_path_safe</code><ul>\n<li>保证使用该服务器的人只能获取到对应目录下的文件，其他目录下对他不开放权限</li>\n<li>否则可能会有攻击者使用<code>directory traverse attack</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Part-C\"><a href=\"#Part-C\" class=\"headerlink\" title=\"Part C\"></a>Part C</h2><ul>\n<li><code>HttpServer_ThrFn</code>函数实现<ul>\n<li>每个线程可以获取到一个连接</li>\n</ul>\n</li>\n<li>两个<code>helper_function</code><ul>\n<li>分别处理两种类型的请求<ul>\n<li>对查看文件的请求(<code>ProcessFileRequest</code>)</li>\n<li>执行查询的请求(<code>ProcessQueryRequest</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用<code>htttp</code>测试<code>Http Server</code>。输入命令<code>./httpd 3000 ./test_tree/</code>，在显示<code>accepting connections...</code>后，点击下方的<code>Open Server on port 3000</code></li>\n</ul>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><ol>\n<li><code>FileReader::read_file</code></li>\n<li><code>WordIndex.cc &amp; WordIndex.h</code></li>\n<li><code>CrawlFileTree.cc handle_file函数</code></li>\n<li><code>ServerSocket.cc</code></li>\n<li><code>get_request &amp; parse_request from HttpConnection.cc</code></li>\n<li><code>write_response in HttpConnection.cc</code></li>\n<li><code>HttpUtils.cc</code>两个函数实现</li>\n<li>test_suite 通过</li>\n<li>valgrind 通过</li>\n<li><code>HttpServer.cc</code>实现并测试</li>\n</ol>\n<h2 id=\"实现提示\"><a href=\"#实现提示\" class=\"headerlink\" title=\"实现提示\"></a>实现提示</h2><ul>\n<li><code>boost</code>库中的<code>split()/trim()/replace_all()</code>函数可以使用，使用<code>split()</code>时可以使用<code>is_any_of()/isalpha()/</code></li>\n<li>实现<code>ServerSocket.cc</code>时，留意<code>server_accept_rw_close</code></li>\n<li>有个小函数可以让<code>is_path_safe</code>的实现更简单(留意<code>HttpUtils.cc</code>中的注释，自己上网学习它的用法)</li>\n<li><code>FileReader</code>需要处理只含有 0 个字节的<code>binary_files</code>，这里可以使用传入 2 个参数的<code>string</code>构造函数</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre><code class=\"bash\">make\n./test_suite\nvalgrind ./test_suite\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW4/",
            "url": "https://salvely.github.io/blog/2024/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW4/",
            "title": "HW4: Shell & Pipe 实现记录",
            "date_published": "2024-01-06T06:49:15.000Z",
            "content_html": "<h1 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h1><p>实现一个只含有基本命令和 Pipe(不含重定向符及其他符号)的 Shell。</p>\n<h1 id=\"指南\"><a href=\"#指南\" class=\"headerlink\" title=\"指南\"></a>指南</h1><h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ul>\n<li><code>pipe_shell.cc</code>:在其中实现 shell 程序</li>\n<li><code>sh.cc</code>: 传入一个附带参数的程序，<code>fork()</code>子程序然后<code>execvp()</code>去执行它</li>\n<li><code>stdin_echo.cc</code>: 从<code>stdin</code>中读取，输出读取的内容，直到获取<code>EOF</code>，然后停止</li>\n<li><code>example_tests/</code>: 其中含有示例输入和对应输出</li>\n<li><code>solution_binaries/</code>: 官方答案执行码</li>\n</ul>\n<h2 id=\"具体要求\"><a href=\"#具体要求\" class=\"headerlink\" title=\"具体要求\"></a>具体要求</h2><ul>\n<li>程序一次从标准输入读取一行命令</li>\n<li>一行命令包括命令本身和连接他们的 Pipe</li>\n<li>不停读入直到读入<code>EOF</code>&#x2F;用户输入<code>exit</code></li>\n<li>在当前命令完成之后才能运行下一条命令</li>\n<li>命令可以是绝对路径或者是程序名（用<code>execvp</code>执行）</li>\n</ul>\n<h2 id=\"建议方法\"><a href=\"#建议方法\" class=\"headerlink\" title=\"建议方法\"></a>建议方法</h2><ul>\n<li>通读该指南和提供的源代码，搞清楚作业是在做什么</li>\n<li>执行一下<code>./solution_binaries/pipe_shell</code>，看看结果长什么样</li>\n<li>开始实现<code>pipe_shell.cc</code>，从循环提示用户输入开始，并且打印<code>$</code>提示符，直到无输入或者遇到<code>EOF</code>&#x2F;输入<code>exit</code></li>\n<li>实现<code>fork()</code>，<code>pipe</code>连接和命令的执行(<code>execvp</code>或者直接运行命令路径)</li>\n</ul>\n<h2 id=\"实现提示\"><a href=\"#实现提示\" class=\"headerlink\" title=\"实现提示\"></a>实现提示</h2><ul>\n<li>可以使用<code>boost</code>库中的<code>split()</code>和<code>trim()</code>方法，</li>\n<li>使用<code>execvp(), fork(), pipe(), waitpid()</code>等函数</li>\n<li>注意不同情形：无管道，一个管道，多于一个管道</li>\n<li>两种方法<ul>\n<li>使用一个 pipe 数组</li>\n<li>每次<code>fork()</code>之前创建一个<code>pipe</code></li>\n</ul>\n</li>\n<li>每个子进程只需要两个端口，从上一个进程送来的读端口，和给下一个子进程的写端口</li>\n<li>子进程用完端口之后关闭端口，否则程序无法正常退出</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ul>\n<li>普通测试: <code>make &amp;&amp; ./pipe_shell</code></li>\n<li>内存泄漏测试: <code>valgrind --leak-check=full ./pipe_shell</code></li>\n<li>比较自己的程序和<code>solution_binaries/pipe_shell</code>的结果：</li>\n</ul>\n<pre><code class=\"bash\">cat ./tests/simple_input.txt | ./pipe_shell &amp;&gt; my_output.txt\ndiff my_output.txt ./tests/simple_output.txt\n</code></pre>\n<h2 id=\"pipe-shell-cc\"><a href=\"#pipe-shell-cc\" class=\"headerlink\" title=\"pipe_shell.cc\"></a><code>pipe_shell.cc</code></h2><blockquote>\n<p>实现核心：<code>pipe</code>的内存在操作系统内核中。在每次循环前创建一个<code>pipe</code>，然后<code>fork()</code>一个子进程读取上一个<code>pipe</code>的内容，写入当前这个<code>pipe</code>。使用完毕后关闭这个<code>pipe</code>的写端，保留这个<code>pipe</code>的读端口。进而让下一次<code>dup2</code>导入时使用，使用完后可关闭该<code>pipe</code>的读端口。<code>pipe</code>不会像本地变量那样随着循环的进行而消失，只要保存一下读&#x2F;写端口，在下一轮循环中就可以正常的进行读写。<br>此外，我们使用<code>dup2</code>来进行端口的重定向。</p>\n</blockquote>\n<pre><code class=\"cpp\">#include &lt;unistd.h&gt;    // for fork()\n#include &lt;sys/types.h&gt; // for pid_t\n#include &lt;sys/wait.h&gt;  // for wait(), waitpid(), etc.\n\n#include &lt;cstdlib&gt; // for exit(), EXIT_SUCCESS, and EXIT_FAILURE\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string.h&gt;\n#include &lt;boost/algorithm/string.hpp&gt;\n\nusing namespace std;\n\n#define BUF_SIZ 1000\n\nint main()\n&#123;\n    string s;\n    cout &lt;&lt; &quot;$ &quot;;\n    while (getline(std::cin, s))\n    &#123;\n        if (s == &quot;exit&quot;)\n        &#123;\n            return EXIT_SUCCESS;\n        &#125;\n\n        int fd[2];\n        int in_fd = 0; // input fd\n\n        // split the command into multiple parts\n        vector&lt;string&gt; tokens;\n        boost::algorithm::split(tokens, s, boost::is_any_of(&quot;|&quot;), boost::token_compress_on);\n\n        int count = 1;\n        int command_num = tokens.size();\n\n        for (auto &amp;command : tokens)\n        &#123;\n            // initialize a pipe\n            if (pipe(fd) == -1)\n            &#123;\n                perror(&quot;pipe creation failed!&quot;);\n                return EXIT_FAILURE;\n            &#125;\n\n            // prepare to run the current command\n\n            // get the current command\n            boost::algorithm::trim(command);\n            // split the command into an array of args\n            vector&lt;string&gt; args;\n            boost::algorithm::split(args, command, boost::is_any_of(&quot; &quot;), boost::token_compress_on);\n            int argc = args.size();\n            if (argc &lt; 1)\n            &#123;\n                cerr &lt;&lt; &quot;We need a command!&quot; &lt;&lt; endl;\n                return EXIT_FAILURE;\n            &#125;\n\n            // run the current command\n            pid_t child = fork();\n            if (child == 0)\n            &#123;\n                // setup the file name and input arguments\n                const char *filename = args[0].c_str();\n                char **argv = new char *[argc + 1];\n                for (int i = 0; i &lt; argc; i++)\n                &#123;\n                    string args_str = args[i];\n                    argv[i] = new char[10];\n                    strcpy(argv[i], args_str.c_str());\n                &#125;\n                argv[argc] = nullptr;\n\n                if (in_fd != 0)\n                &#123;\n                    // write the pipe value into stdin\n                    dup2(in_fd, STDIN_FILENO);\n                    close(in_fd);\n                &#125;\n\n                if (count != command_num)\n                &#123;\n                    // write stdout to the pipe\n                    dup2(fd[1], STDOUT_FILENO);\n                    close(fd[1]);\n                &#125;\n\n                // use execvp() to run the commmand\n                execvp(filename, argv);\n\n                // exec didn&#39;t work, so an error must have been occurred\n                cerr &lt;&lt; strerror(errno) &lt;&lt; endl;\n                delete[] argv;\n                return EXIT_FAILURE;\n            &#125;\n\n            // wait for the child process to complete\n            int status;\n            waitpid(child, &amp;status, 0);\n\n            // close the current pipe write fd\n            close(fd[1]);\n            in_fd = fd[0];\n            count += 1;\n        &#125;\n\n        // // read out the pipe\n        // char buffer[BUF_SIZ];\n        // int count = read(in_fd, buffer, BUF_SIZ);\n        // buffer[count] = &#39;\\0&#39;;\n        // if (count &gt; 0)\n        // &#123;\n        //     fprintf(stdout, &quot;%s&quot;, buffer);\n        // &#125;\n        close(in_fd);\n\n        cout &lt;&lt; &quot;$ &quot;;\n    &#125;\n    return EXIT_SUCCESS;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW3/",
            "url": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW3/",
            "title": "HW3: LRU SimpleVM 实现记录",
            "date_published": "2024-01-04T05:27:01.000Z",
            "content_html": "<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>本作业要求实现:</p>\n<ul>\n<li>Page 对象：<ul>\n<li>若 Page 不在 memory 中，那么它的数据被存储在磁盘上的<code>swap file</code>部分。在<code>swap file</code>中，每一页都有对应的顺序存储的数据。</li>\n<li>可以使用 C++ <code>fstream</code>类进行 I&#x2F;O 读写。尤其是<code>read()</code>和<code>write()</code>方法。</li>\n</ul>\n</li>\n<li>PageTable 对象<ul>\n<li>包含多个 page 以及<code>swap file</code></li>\n<li>这里主要要求实现 LRU 算法</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h1><h2 id=\"Page\"><a href=\"#Page\" class=\"headerlink\" title=\"Page\"></a>Page</h2><ul>\n<li><code>Page.h</code></li>\n<li><code>Page.cc</code></li>\n<li><code>PageTemplates.cc</code></li>\n</ul>\n<h2 id=\"PageTable\"><a href=\"#PageTable\" class=\"headerlink\" title=\"PageTable\"></a>PageTable</h2><ul>\n<li><code>PageTable.h</code></li>\n<li><code>PageTable.cc</code></li>\n</ul>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><ul>\n<li><code>test_page.cc</code></li>\n<li><code>test_pagetable.cc</code></li>\n</ul>\n<h1 id=\"实现提示\"><a href=\"#实现提示\" class=\"headerlink\" title=\"实现提示\"></a>实现提示</h1><ul>\n<li>map, unordered_map, list, vector 结构都很有用</li>\n<li><code>fstream</code>中的<code>read()</code>和<code>write()</code>很有用</li>\n<li>需要将<code>uint8_t</code>切换到<code>char</code>类型来使用<code>fstream</code></li>\n<li>利用初始化列表来初始化引用类型</li>\n</ul>\n<h1 id=\"Page实现\"><a href=\"#Page实现\" class=\"headerlink\" title=\"Page实现\"></a>Page实现</h1><h2 id=\"Page-源码分析\"><a href=\"#Page-源码分析\" class=\"headerlink\" title=\"Page 源码分析\"></a>Page 源码分析</h2><p><code>simplevm namespace</code>中存在一个类<code>Page</code>，此外还有一个<code>uint32_t</code>类型(<code>pno_t</code>类型)的变量，用来表示页号。<code>Page</code>页的解释如下:</p>\n<ul>\n<li>页对象存在-&gt;页被导入到 physical memory-&gt;创建一个<code>page</code>，并且从<code>swap_file</code>中读<code>page</code>数据。页的数据从<code>virtual_pno * Page::PAGE_SIZE</code>开始</li>\n<li>页对象不存在-&gt;数据存储在<code>swap_file</code>中</li>\n<li>用户可以<ul>\n<li>获取数据</li>\n<li>存储数据</li>\n<li>将数据刷新到<code>swap file</code>中（多余的无法放入 physical memory 的虚拟内存所存储的地方）</li>\n</ul>\n</li>\n</ul>\n<p><code>Page</code>类中包含如下<code>public</code>方法:</p>\n<ul>\n<li><code>Page(fstream&amp; swap_file, pno_t virtual_pno);</code><ul>\n<li>构造函数，传入该<code>page</code>对应的<code>swap_file</code>和页号</li>\n<li>我们从<code>swap_file</code>读入页数据，刷新时将页数据写入<code>swap_file</code></li>\n<li>页号规定了我们在<code>swap_file</code>的哪里写入数据</li>\n</ul>\n</li>\n<li><code>Page(const Page&amp; other);</code><ul>\n<li>利用一个页来复制构造另一个页，两个页具有相同的页号和<code>swap_file</code>地址，但是数据是复制了的（不是引用）</li>\n</ul>\n</li>\n<li><code>~Page()</code><ul>\n<li>清理声明的变量</li>\n<li>如果当前数据为 dirty 状态，那么将其刷新到对应的<code>swap_file</code></li>\n</ul>\n</li>\n<li><code>Page&amp; operator=(const Page&amp; rhs)</code><ul>\n<li>赋值函数，同复制构造函数，两个<code>Page</code>具有相同的<code>swap_file</code>和页号，但是<code>data</code>是被复制了的</li>\n</ul>\n</li>\n<li><code>template &lt;typename T&gt; T access(uint32_t virtual_address);</code><ul>\n<li>获取该页面的值（需要考虑错误情况）</li>\n</ul>\n</li>\n<li><code>T store(uint32_t virtual address, const T&amp; to_write)</code><ul>\n<li>存储值到该页面中去</li>\n</ul>\n</li>\n<li><code>bool operator&lt;(const Page&amp; rhs);</code><ul>\n<li>比较两个页面顺序</li>\n</ul>\n</li>\n<li><code>pno_t pno();</code><ul>\n<li>获取该页面的页号</li>\n</ul>\n</li>\n<li><code>bool dirty();</code><ul>\n<li>该 page 是否为 dirty 状态(如果有人在 flush 之后，向该 page 写过值就是 dirty)</li>\n</ul>\n</li>\n<li><code>void flush();</code><ul>\n<li>如果该 page 是 dirty 状态，就把内容刷新到<code>swap_file</code></li>\n</ul>\n</li>\n<li>变量：<code>static constexpr size_t PAGE_SIZE = 4096U;</code><ul>\n<li>该 page 的大小</li>\n</ul>\n</li>\n</ul>\n<p>Page 中还包括如下<code>private</code>变量:</p>\n<ul>\n<li><code>fstream&amp; swap_file_;</code><ul>\n<li>注意这里是个引用，一个 page 没有对<code>swap_file</code>的所有权，只能 access 到它，所以这里<code>swap_file</code>是个引用</li>\n</ul>\n</li>\n<li><code>pno_t virtual_pno_;</code><ul>\n<li>该 page 的页号</li>\n</ul>\n</li>\n<li><code>uint8_t *bytes_;</code><ul>\n<li>该 page 的字节内容</li>\n</ul>\n</li>\n<li><code>bool dirty_;</code><ul>\n<li>该 page 是否在 flush 后被写入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Page-设计\"><a href=\"#Page-设计\" class=\"headerlink\" title=\"Page 设计\"></a>Page 设计</h2><h2 id=\"PageTemplates-cc实现\"><a href=\"#PageTemplates-cc实现\" class=\"headerlink\" title=\"PageTemplates.cc实现\"></a><code>PageTemplates.cc</code>实现</h2><p><code>PageTemplates.cc</code>在<code>simplevm namespace</code>中。源码如下:</p>\n<pre><code class=\"cpp\">\nnamespace simplevm &#123;\n  // TODO: implement all template member functions for Page\n\n  // This function allows users to read various data types\n  // from the page. Trying to read a non-primitive type or use\n  // a virtual address that doesn&#39;t map to this page results\n  // in undefined behaviour. You can also assume that\n  // anything being read fits in on the page we are reading\n  // is not partially on another page.\n  // If you are familiar with endianness, it shouldn&#39;t be\n  // considered for this function.\n  //\n  // Arguments:\n  //   - virtual_address: a virtual address that maps somewhere\n  //     into the page, where we will read data of type T\n  //\n  // Returns:\n  //   - the data of type T that was read from the page\n  template &lt;typename T&gt;\n  T Page::access(uint32_t virtual_address) &#123;\n    if(virtual_address / PAGE_SIZE != virtual_pno_)\n        return 0;\n    virtual_address = virtual_address % PAGE_SIZE;\n    T* address = (T*)(bytes_ + virtual_address);\n    return *address;\n  &#125;\n\n  // This function allows users to write various data types\n  // to the page. Trying to write a non-primitive type or use\n  // a virtual address that doesn&#39;t map to this page results\n  // in undefined behaviour. You can also assume that\n  // anything being written fits on the current page\n  // is not partially on another page.\n  // If you are familiar with endianness, it shouldn&#39;t be\n  // considered for this function.\n  //\n  // Arguments:\n  //   - virtual_address: a virtual address that maps somewhere\n  //     into the page, where we will read data of type T\n  //   - to_write: the data of type T to write to the page\n  //\n  // Returns: nothing\n\n  template &lt;typename T&gt;\n  void Page::store(uint32_t virtual_address, const T&amp; to_write) &#123;\n    if(virtual_address / PAGE_SIZE != virtual_pno_)\n        return;\n    virtual_address = virtual_address % PAGE_SIZE;\n    T* address = (T*)(bytes_ + virtual_address);\n    *address = to_write;\n    dirty_ = true;\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"Page-h定义\"><a href=\"#Page-h定义\" class=\"headerlink\" title=\"Page.h定义\"></a><code>Page.h</code>定义</h2><p><code>Page.h</code>在<code>simplevm namespace</code>中。源码如下:</p>\n<pre><code class=\"cpp\">#ifndef PAGE_H_\n#define PAGE_H_\n\n#include &lt;cstdint&gt;\n#include &lt;fstream&gt;\n\nusing std::fstream;\n\nnamespace simplevm &#123;\n\n// defines the type pno_t, which is the type\n// that represents a page number\ntypedef uint32_t pno_t;\n\n///////////////////////////////////////////////////////////////////////////////\n// A Page is a class that represents a page of memory\n// in our simple virtual memory model.\n// If a page object exists, then we say that the page is loaded\n// into physical memory. When the page object doesn&#39;t exist, then its\n// data is stored in the swap_file. When we load in a page to\n// &quot;physical memory&quot;, we are creating the page and we read the page&#39;s data\n// from the swap file. A page&#39;s data in the swap file starts at\n// virtual_pno * Page::PAGE_SIZE\n//\n// This Class manages a page&#39;s worth of data\n// Users can access or store data, sa well as flush the data in the\n// page to the specified swap file. A swap file is where exceess virtual\n// memory is stored when it can&#39;t fit in physical memory.\n///////////////////////////////////////////////////////////////////////////////\nclass Page &#123;\n public:\n  // Constructs a new Page object associated\n  // with a swap_file and a virtual page number.\n  // The swap file is where we will load in the page\n  // contents and flush the page contents. The virtual\n  // page number decides where in that file we read\n  // and write this page.\n  // Passing in an invalid page number is undefined behaviour\n  // Note that a Page does not have ownership\n  // of the swap_file_, just access to it.\n  //\n  // Arguments:\n  //  - swap_file the swap_file associated with the page\n  //  - the virtual page number of our new page\n  Page(fstream&amp; swap_file, pno_t virtual_pno);\n\n  // Constructs a new Page object that is a copy of\n  // another page object. Both pages will have\n  // the same page number and swap_file, but should\n  // have independent copies of the page data.\n  //\n  // Misc: this means that there could be issues with\n  // having the original and copy page having differnt\n  // data. This cctor should only really be used\n  // in the context of managing pages with something\n  // like STL, where the original page used for the cctor\n  // will be discarded. In real C++, we would want to\n  // use move semantics here.\n  //\n  // Arguements:\n  //   - other: the page we are copying\n  Page(const Page&amp; other);\n\n  // Destructor for the page object\n  // Cleans up any dynamically allocated data or\n  // otherwise allocated resources AND should flush\n  // its contents if the page is dirty at time of\n  // destruction.\n  ~Page();\n\n  // Set the current Page object so that is a copy of\n  // another page object. Both pages will have\n  // the same page number and swap_file, but should\n  // have independent copies of the page data.\n  //\n  // Misc: this means that there could be issues with\n  // having the original and copy page having differnt\n  // data. This op= should only really be used\n  // in the context of managing pages with something\n  // like STL, where the original page used for the cctor\n  // will be discarded. In real C++, we would want to\n  // use move semantics here.\n  //\n  // You can assume each page has the same swap_file.\n  //\n  // Arguements:\n  //   - rhs: the page we are copying\n  Page&amp; operator=(const Page&amp; rhs);\n\n  // This function is not required, but you may add it\n  // if it is needed for some of the STL containers\n  // you use in PageTable\n  //\n  // Determines if this page should go before another page if they\n  // were in sorted order.\n  //\n  // Arguments:\n  //   - rhs: the Page we are comparing this to\n  //\n  // Returns: true iff this page would show up before the other\n  // page in sorted order. False otherwise.\n  bool operator&lt;(const Page&amp; rhs);\n\n  // This function allows users to read various data types\n  // from the page. Trying to read a non-primitive type or use\n  // a virtual address that doesn&#39;t map to this page results\n  // in undefined behaviour. You can also assume that\n  // anything being read fits in on the page we are reading\n  // is not partially on another page.\n  // If you are familiar with endianness, it shouldn&#39;t be\n  // considered for this function.\n  //\n  // Arguments:\n  //   - virtual_address: a virtual address that maps somewhere\n  //     into the page, where we will read data of type T\n  //\n  // Returns:\n  //   - the data of type T that was read from the page\n  template &lt;typename T&gt;\n  T access(uint32_t virtual_address);\n\n  // This function allows users to write various data types\n  // to the page. Trying to write a non-primitive type or use\n  // a virtual address that doesn&#39;t map to this page results\n  // in undefined behaviour. You can also assume that\n  // anything being written fits on the current page\n  // is not partially on another page.\n  // If you are familiar with endianness, it shouldn&#39;t be\n  // considered for this function.\n  //\n  // Arguments:\n  //   - virtual_address: a virtual address that maps somewhere\n  //     into the page, where we will read data of type T\n  //   - to_write: the data of type T to write to the page\n  //\n  // Returns: nothing\n  template &lt;typename T&gt;\n  void store(uint32_t virtual_address, const T&amp; to_write);\n\n  // Returns the virtual page number of this page\n  //\n  // Arguments: None\n  //\n  // Returns: this page&#39;s virtual page number\n  pno_t pno();\n\n  // Returns whether or not a page is dirty\n  // A page is &quot;dirty&quot; if someone has written to the data managed\n  // by the page since the last time the page was flush()&#39;d.\n  //\n  // Arguments: None\n  //\n  // Returns: Whether this page is dirty or not\n  bool dirty();\n\n  // Flushes the page to the swap file if it is dirty.\n  // Flushing a page to the swap file involves writing\n  // the page at the the spot correspoding to its page number\n  // in the swap_file. For a description of what it means\n  // for a page to be dirty, see the dirty() member function.\n  // The page should not be written if it is not dirty.\n  //\n  // Arguments: None\n  //\n  // Returns: Nothing\n  void flush();\n\n  // The amount of memory a page represents\n  static constexpr size_t PAGE_SIZE = 4096U;\n\n private:\n  // The file we will be reading/writing to\n  // Note how this is a reference\n  //\n  // also note that a Page does not have ownership\n  // of the swap_file_, just access to it.\n  fstream&amp; swap_file_;\n\n  // the virtual page number\n  pno_t virtual_pno_;\n\n  // The bytes of the page. One byte is 8 bits\n  // so we use 8-bit unsigned integers.\n  // You can also assume that a &#39;char&#39; is one byte big\n  uint8_t *bytes_;\n\n  // Whether the page is dirty or not\n  bool dirty_;\n&#125;;\n\n&#125;\n\n// since we have template code\n#include &quot;./PageTemplates.cc&quot;\n\n#endif  // PAGE_H_\n</code></pre>\n<h2 id=\"Page-cc实现\"><a href=\"#Page-cc实现\" class=\"headerlink\" title=\"Page.cc实现\"></a><code>Page.cc</code>实现</h2><p><code>Page.cc</code>在<code>simplevm namespace</code>中。源码如下:</p>\n<pre><code class=\"cpp\">#include &quot;./Page.h&quot;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nnamespace simplevm &#123;\n  // TODO: implement all non template member functions for Page\n    // Constructs a new Page object associated\n  // with a swap_file and a virtual page number.\n  // The swap file is where we will load in the page\n  // contents and flush the page contents. The virtual\n  // page number decides where in that file we read\n  // and write this page.\n  // Passing in an invalid page number is undefined behaviour\n  // Note that a Page does not have ownership\n  // of the swap_file_, just access to it.\n  //\n  // Arguments:\n  //  - swap_file the swap_file associated with the page\n  //  - the virtual page number of our new page\n  Page::Page(fstream&amp; swap_file, pno_t virtual_pno):swap_file_(swap_file) &#123;\n    this-&gt;virtual_pno_ = virtual_pno;\n    this-&gt;bytes_ = new uint8_t[PAGE_SIZE];\n    // seek the correct position\n    swap_file_.seekg(virtual_pno_ * PAGE_SIZE, std::ios::beg);\n    // read from the swap file\n    swap_file_.read((char*)bytes_,PAGE_SIZE);\n    if(!swap_file_) &#123;\n        std::cerr &lt;&lt; &quot;Swap file read failed!&quot; &lt;&lt; std::endl;\n        exit(1);\n    &#125;\n    this-&gt;dirty_ = false;\n  &#125;\n\n  // Constructs a new Page object that is a copy of\n  // another page object. Both pages will have\n  // the same page number and swap_file, but should\n  // have independent copies of the page data.\n  //\n  // Misc: this means that there could be issues with\n  // having the original and copy page having differnt\n  // data. This cctor should only really be used\n  // in the context of managing pages with something\n  // like STL, where the original page used for the cctor\n  // will be discarded. In real C++, we would want to\n  // use move semantics here.\n  //\n  // Arguements:\n  //   - other: the page we are copying\n  Page::Page(const Page&amp; other):swap_file_(other.swap_file_) &#123;\n    this-&gt;virtual_pno_ = other.virtual_pno_;\n    this-&gt;bytes_ = new uint8_t[PAGE_SIZE];\n    memcpy(this-&gt;bytes_,other.bytes_,PAGE_SIZE);\n    this-&gt;dirty_ = other.dirty_;\n  &#125;\n\n  // Destructor for the page object\n  // Cleans up any dynamically allocated data or\n  // otherwise allocated resources AND should flush\n  // its contents if the page is dirty at time of\n  // destruction.\n  Page::~Page() &#123;\n    if(dirty_) &#123;\n        flush();\n    &#125;\n    dirty_ = false;\n    delete[] bytes_;\n  &#125;\n\n  // Set the current Page object so that is a copy of\n  // another page object. Both pages will have\n  // the same page number and swap_file, but should\n  // have independent copies of the page data.\n  //\n  // Misc: this means that there could be issues with\n  // having the original and copy page having differnt\n  // data. This op= should only really be used\n  // in the context of managing pages with something\n  // like STL, where the original page used for the cctor\n  // will be discarded. In real C++, we would want to\n  // use move semantics here.\n  //\n  // You can assume each page has the same swap_file.\n  //\n  // Arguements:\n  //   - rhs: the page we are copying\n  Page&amp; Page::operator=(const Page&amp; rhs) &#123;\n    if (this!=&amp;rhs)\n    &#123;\n        this-&gt;~Page();\n        new (this)Page(rhs);\n    &#125;\n\n    return *this;\n  &#125;\n\n  // This function is not required, but you may add it\n  // if it is needed for some of the STL containers\n  // you use in PageTable\n  //\n  // Determines if this page should go before another page if they\n  // were in sorted order.\n  //\n  // Arguments:\n  //   - rhs: the Page we are comparing this to\n  //\n  // Returns: true iff this page would show up before the other\n  // page in sorted order. False otherwise.\n  bool Page::operator&lt;(const Page&amp; rhs) &#123;\n    return this-&gt;virtual_pno_ &lt; rhs.virtual_pno_;\n  &#125;\n\n  // Returns the virtual page number of this page\n  //\n  // Arguments: None\n  //\n  // Returns: this page&#39;s virtual page number\n  pno_t Page::pno() &#123;\n    return this-&gt;virtual_pno_;\n  &#125;\n\n  // Returns whether or not a page is dirty\n  // A page is &quot;dirty&quot; if someone has written to the data managed\n  // by the page since the last time the page was flush()&#39;d.\n  //\n  // Arguments: None\n  //\n  // Returns: Whether this page is dirty or not\n  bool Page::dirty() &#123;\n    return this-&gt;dirty_;\n  &#125;\n\n  // Flushes the page to the swap file if it is dirty.\n  // Flushing a page to the swap file involves writing\n  // the page at the the spot correspoding to its page number\n  // in the swap_file. For a description of what it means\n  // for a page to be dirty, see the dirty() member function.\n  // The page should not be written if it is not dirty.\n  //\n  // Arguments: None\n  //\n  // Returns: Nothing\n  void Page::flush() &#123;\n    if(dirty()) &#123;\n        // seek the correct position\n        swap_file_.seekg(virtual_pno_ * PAGE_SIZE,std::ios::beg);\n        // write to the swap file\n        swap_file_.write((char*)bytes_,PAGE_SIZE);\n        if(!swap_file_) &#123;\n            std::cerr &lt;&lt; &quot;Swap file write failed!&quot; &lt;&lt; std::endl;\n            exit(1);\n        &#125;\n        dirty_ = false;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h1 id=\"PageTable实现\"><a href=\"#PageTable实现\" class=\"headerlink\" title=\"PageTable实现\"></a>PageTable实现</h1><h2 id=\"PageTable-源码分析\"><a href=\"#PageTable-源码分析\" class=\"headerlink\" title=\"PageTable 源码分析\"></a>PageTable 源码分析</h2><p>PageTable 的作用如下：</p>\n<ul>\n<li>管理一个进程的地址空间</li>\n<li>包括<code>swap_file</code></li>\n<li>从 physical memory 中读取页</li>\n<li>选择页淘汰，进行页替换</li>\n</ul>\n<p><code>PageTable.cc</code>中有如下一些方法：</p>\n<ul>\n<li><code>PageTable(std::string swap_file_name, size_t page_capacity);</code><ul>\n<li>初始化页表，制定<code>swap_file</code>名称和页容量</li>\n<li>存储的页不可超过页容量</li>\n</ul>\n</li>\n<li><code>~PageTable();</code><ul>\n<li>清理所有变量</li>\n<li>flush dirty pages</li>\n</ul>\n</li>\n<li><code>Page&amp; get_page(uint32_t virtual_address);</code><ul>\n<li>返回一个虚拟地址对应的 page</li>\n<li>将该页导入 physical memory</li>\n<li>返回它</li>\n<li>有几种可能情况<ul>\n<li>该页在 Physical memory 中，返回对应的页的引用，并且将该页标记为最新（挪到 vector 最前）</li>\n<li>该页不在 physical memory 中，并且 physical memory 还没满。那么将其导入 physical memory，并且标记为最新（挪到 vector 最前），返回该页引用</li>\n<li>该页不在 Physical memory 中，并且 physical memory 已经满了，那么先执行淘汰算法，淘汰最老的页，将其写入<code>swap_file</code>。然后将该页从<code>swap_file</code>中导入进来，放在 vector 最前</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>virtual address !&#x3D; 页号，可能有多个 virtual address 对应同一个页号(一页有 4096 个字节嘛)</li>\n<li>页的最新和最老完全取决于<code>get_page</code>函数的调用情况</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>size_t capacity();</code><ul>\n<li>返回页容量</li>\n</ul>\n</li>\n<li><code>size_t loaded_pages();</code><ul>\n<li>返回导入 physical memory 的页数目</li>\n</ul>\n</li>\n<li><code>bool page_available(pno_t virtual_pno);</code><ul>\n<li>返回对应页是否存在 physical memory 中</li>\n</ul>\n</li>\n<li><code>void flush_all_pages();</code><ul>\n<li>将所有页都刷新到<code>swap_file</code>中</li>\n</ul>\n</li>\n<li><code>void flush_page(pno_t virtual_pno);</code><ul>\n<li>将对应的页刷新到<code>swap_file</code>中</li>\n</ul>\n</li>\n<li><code>void discard_page(pno_t virtual_pno);</code><ul>\n<li>从页表中丢弃对应的页。如果该页不存在，则返回。否则，若该页为 dirty，则将该页数据写入<code>swap_file</code>，然后丢弃它</li>\n</ul>\n</li>\n<li><code>void evict_page();</code><ul>\n<li>若没有 page 在页表中，则什么也不做。否则丢弃最老的一页（丢弃前记得将其写入<code>swap_file</code>）</li>\n</ul>\n</li>\n</ul>\n<p><code>PageTable.cc</code>有两个<code>private</code>变量：</p>\n<ul>\n<li><code>fstream swap_file_</code>: 交换文件</li>\n<li><code>size_t capacity</code>: 页容量</li>\n<li><code>size_t page_num</code>: 当前已经导入 physical memory 的页数目</li>\n<li><code>std::vector&lt;Page*&gt; page_list</code>: 记录所有在 physical memory 中的页</li>\n<li><code>std::unordered_map&lt;pno_t,Page*&gt; mp</code>:</li>\n</ul>\n<h2 id=\"PageTable-h设计\"><a href=\"#PageTable-h设计\" class=\"headerlink\" title=\"PageTable.h设计\"></a><code>PageTable.h</code>设计</h2><pre><code class=\"cpp\">#ifndef PAGE_TABLE_H_\n#define PAGE_TABLE_H_\n\n#include &lt;fstream&gt;\n#include &lt;cstdint&gt;\n// #include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n#include &lt;list&gt;\n\n#include &quot;./Page.h&quot;\n\nusing std::fstream;\n\nnamespace simplevm &#123;\n\n///////////////////////////////////////////////////////////////////////////////\n// A PageTable manages a processes memeory for our simplified\n// virtual memory model. This involves managing a swap_file\n// which is where pages of data are stored when they aren&#39;t loaded\n// into physical memory. For our software model, we will say a page\n// is in &quot;physical memory&quot; if it is loaded into our memory space\n// (e.g. it is on the heap). Pages that aren&#39;t loaded in will have\n// their contents stored in the swap_file and will not have an\n// associated Page object (see Page.h). Our page table can only have\n// so many pages stored in memory at one time, which is specified\n// on PageTable Creation. We implement an LRU page replacement\n// policy to decide which pages to evict if we need to load a new page\n// and we already have reached our capacity on the numberof pages we can\n// hold.\n//\n// Users can get a page from the cache, flush pages to the swap_file,\n// request any page is evicted, and specifically ask for a page to be evicted.\n///////////////////////////////////////////////////////////////////////////////\nclass PageTable &#123;\n public:\n  // Constructs a new page table with the specified\n  // swap file and the specified page capacity, which is\n  // the number of pages that can be held in memory\n  // at one time. There cannot be more than page_capacity\n  // number of pages loaded in at a time.\n  //\n  // Arguments:\n  //   - swap_file_name: the name of the swap_file\n  //   - page_capacity: the maximum number of pages that can be held\n  //     in memory at one time.\n  PageTable(std::string swap_file_name, size_t page_capacity);\n\n  // Destructs the page table, freeing any allocated resources\n  // and flushing any pages currently loaded into memory that\n  // are dirty\n  ~PageTable();\n\n  // Given a virtual address, gets the associated\n  // page for that virtual address. This page will\n  // be &quot;loaded&quot; into physical memory by the time it\n  // is returned.\n  //\n  // There are three possiblities when a page is requested:\n  // 1. The page is currently in the &quot;loaded&quot; and in the cache.\n  //    In this case, a reference to the page is returned and\n  //    and the page is marked as most recently used in the cache\n  // 2. The page is not currently &quot;loaded&quot;, and the PageTable\n  //    has not reached its page capacity:\n  //    In this case, the page is loaded from the swap file and added\n  //    to the cache as the most recently used page.\n  // 3. The page is not currently &quot;loaded&quot;, and the PageTable\n  //    is at page capacity:\n  //    The least recently used page in the cache is evicted from the\n  //    cache. Afterwards the requested page is loaded from the swap file\n  //    and added to the cache as the most recently used page.\n  //\n  // NOTE: What decides how recntly used a page was used is entirely\n  // decided by how recntly it was returned by a call to get_page.\n  //\n  // Arguments:\n  //   - virtual_address: A virtual address that is associated\n  //     with a requested page. The virutal address is represented\n  //     as a unsigned 32 bit integer. NOTE: a virtual address\n  //     is NOT the same as a page number. Multiple virtual addresses\n  //     could be associated with the same page number.\n  //\n  // Returns:\n  //   - the requested page, which is loaded into the cache and\n  //     marked as the most recently used page\n  Page&amp; get_page(uint32_t virtual_address);\n\n  // Returns the page capacity of the page table\n  //\n  // Arguments: None\n  //\n  // Returns: the page capacity of the page table\n  size_t capacity();\n\n  // Returns the number of pages currently loaded into &quot;physical memory&quot;\n  //\n  // Arguments: None\n  //\n  // Returns: the number of pages currently loaded into &quot;physical memory&quot;\n  size_t loaded_pages();\n\n  // Checks to see if the specified page is loaded into memory\n  //\n  // Arguments: The virtual page number of the page to check for\n  //\n  // Returns: True iff the page is loaded into memory, false otherwise\n  bool page_available(pno_t virtual_pno);\n\n  // Makes sure that all currently loaded pages are flushed\n  // meaning tha the page contents are updated on the swap file.\n  // This should not affect how recently used each page is and all pages\n  // will remain loaded into memory after this operation is performed.\n  //\n  // Arguments: None\n  //\n  // Returns: Nothing\n  void flush_all_pages();\n\n  // Flushes the specified page to the swap file.\n  // This should not affect how recently used each page is and all pages\n  // will remain loaded into memory after this operation is performed.\n  //\n  // Arguments: the virtual page number of the page to flush\n  //\n  // Returns: Nothing\n  void flush_page(pno_t virtual_pno);\n\n  // Discards the specified page from the PageTable.\n  // If the page is dirty, then it is flushed before it is discarded.\n  // If the page is not in the table, then nothing happens.\n  //\n  // Arguments: the virtual page number of the page to discard.\n  //\n  // Returns: Nothing\n  void discard_page(pno_t virtual_pno);\n\n  // Evicts a page from the PageTable. The page evicted\n  // should be the least recntly used page in the cache.\n  // If the evicted page is dirty, then it is flushed before it is evicted.\n  // If there are no pages in the cache, then do nothing.\n  //\n  // Arguments: None\n  //\n  // Returns: Nothing\n  void evict_page();\n\n private:\n  // The swap file where pages are stored\n  fstream swap_file_;\n\n  // The number of pages that can be stored\n  // in the PageTable at one time.\n  size_t capacity_;\n\n  // TODO: add fields\n  size_t page_num;\n\n  // a vector to store pages in physical memory\n  std::list&lt;std::pair&lt;pno_t,Page*&gt;&gt; page_list;\n\n  // use an unordered_map to quickly determined the corresponding page\n  std::unordered_map&lt;pno_t,Page*&gt; mp;\n&#125;;\n\n&#125;\n\n\n#endif  // PAGE_TABLE_H_\n</code></pre>\n<h2 id=\"PageTable-cc实现\"><a href=\"#PageTable-cc实现\" class=\"headerlink\" title=\"PageTable.cc实现\"></a><code>PageTable.cc</code>实现</h2><pre><code class=\"cpp\">#include &quot;./PageTable.h&quot;\n#include &quot;./Page.h&quot;\n\nnamespace simplevm &#123;\n  // TODO: implment PageTable member functions\n  // Constructs a new page table with the specified\n  // swap file and the specified page capacity, which is\n  // the number of pages that can be held in memory\n  // at one time. There cannot be more than page_capacity\n  // number of pages loaded in at a time.\n  //\n  // Arguments:\n  //   - swap_file_name: the name of the swap_file\n  //   - page_capacity: the maximum number of pages that can be held\n  //     in memory at one time.\n  PageTable::PageTable(std::string swap_file_name, size_t page_capacity) &#123;\n    swap_file_.open(swap_file_name);\n    this-&gt;capacity_ = page_capacity;\n    this-&gt;page_num = 0;\n  &#125;\n\n  // Destructs the page table, freeing any allocated resources\n  // and flushing any pages currently loaded into memory that\n  // are dirty\n  PageTable::~PageTable() &#123;\n    while(page_num &gt; 0) &#123;\n        Page* deleted_page = page_list.back().second;\n        page_list.pop_back();\n        deleted_page-&gt;~Page();\n        page_num -= 1;\n    &#125;\n    mp.clear();\n    page_list.clear();\n  &#125;\n\n  // Given a virtual address, gets the associated\n  // page for that virtual address. This page will\n  // be &quot;loaded&quot; into physical memory by the time it\n  // is returned.\n  //\n  // There are three possiblities when a page is requested:\n  // 1. The page is currently in the &quot;loaded&quot; and in the cache.\n  //    In this case, a reference to the page is returned and\n  //    and the page is marked as most recently used in the cache\n  // 2. The page is not currently &quot;loaded&quot;, and the PageTable\n  //    has not reached its page capacity:\n  //    In this case, the page is loaded from the swap file and added\n  //    to the cache as the most recently used page.\n  // 3. The page is not currently &quot;loaded&quot;, and the PageTable\n  //    is at page capacity:\n  //    The least recently used page in the cache is evicted from the\n  //    cache. Afterwards the requested page is loaded from the swap file\n  //    and added to the cache as the most recently used page.\n  //\n  // NOTE: What decides how recntly used a page was used is entirely\n  // decided by how recntly it was returned by a call to get_page.\n  //\n  // Arguments:\n  //   - virtual_address: A virtual address that is associated\n  //     with a requested page. The virutal address is represented\n  //     as a unsigned 32 bit integer. NOTE: a virtual address\n  //     is NOT the same as a page number. Multiple virtual addresses\n  //     could be associated with the same page number.\n  //\n  // Returns:\n  //   - the requested page, which is loaded into the cache and\n  //     marked as the most recently used page\n  Page&amp; PageTable::get_page(uint32_t virtual_address) &#123;\n    // obtain the virtual_pno according to the virtual address\n    pno_t pno = virtual_address / Page::PAGE_SIZE;\n    if(page_available(pno)) &#123;\n        Page* p = mp[pno];\n        page_list.remove(std::make_pair(pno,p));\n        page_list.push_front(std::make_pair(pno,p));\n        return *p;\n    &#125;\n    else &#123;\n        Page* pg = new Page(swap_file_,pno);\n\n        if(page_num &lt; capacity_) &#123;\n            page_list.push_front(std::make_pair(pno,pg));\n            flush_page(pno);\n            page_num += 1;\n        &#125;\n        else &#123;\n            // LRU Algorithms\n            // evict the oldest page, and flush it\n            evict_page();\n            // add the new page to the front of the list\n            page_list.push_front(std::make_pair(pno,pg));\n            page_num += 1;\n        &#125;\n        mp[pno] = pg;\n        return *(mp[pno]);\n    &#125;\n  &#125;\n\n  // Returns the page capacity of the page table\n  //\n  // Arguments: None\n  //\n  // Returns: the page capacity of the page table\n  size_t PageTable::capacity() &#123;\n    return capacity_;\n  &#125;\n\n  // Returns the number of pages currently loaded into &quot;physical memory&quot;\n  //\n  // Arguments: None\n  //\n  // Returns: the number of pages currently loaded into &quot;physical memory&quot;\n  size_t PageTable::loaded_pages() &#123;\n    return page_num;\n  &#125;\n\n  // Checks to see if the specified page is loaded into memory\n  //\n  // Arguments: The virtual page number of the page to check for\n  //\n  // Returns: True iff the page is loaded into memory, false otherwise\n  bool PageTable::page_available(pno_t virtual_pno) &#123;\n    return mp.find(virtual_pno) != mp.end();\n  &#125;\n\n  // Makes sure that all currently loaded pages are flushed\n  // meaning tha the page contents are updated on the swap file.\n  // This should not affect how recently used each page is and all pages\n  // will remain loaded into memory after this operation is performed.\n  //\n  // Arguments: None\n  //\n  // Returns: Nothing\n  void PageTable::flush_all_pages() &#123;\n    for(auto p:page_list) &#123;\n        p.second-&gt;flush();\n    &#125;\n  &#125;\n\n  // Flushes the specified page to the swap file.\n  // This should not affect how recently used each page is and all pages\n  // will remain loaded into memory after this operation is performed.\n  //\n  // Arguments: the virtual page number of the page to flush\n  //\n  // Returns: Nothing\n  void PageTable::flush_page(pno_t virtual_pno) &#123;\n    if(page_available(virtual_pno))&#123;\n        Page* p = mp.find(virtual_pno)-&gt;second;\n        p-&gt;flush();\n    &#125;\n  &#125;\n\n  // Discards the specified page from the PageTable.\n  // If the page is dirty, then it is flushed before it is discarded.\n  // If the page is not in the table, then nothing happens.\n  //\n  // Arguments: the virtual page number of the page to discard.\n  //\n  // Returns: Nothing\n  void PageTable::discard_page(pno_t virtual_pno) &#123;\n    if(page_available(virtual_pno))&#123;\n        Page* p = mp.find(virtual_pno)-&gt;second;\n        p-&gt;flush();\n        page_list.remove(std::make_pair(virtual_pno,p));\n        mp.erase(virtual_pno);\n        page_num -= 1;\n    &#125;\n  &#125;\n\n  // Evicts a page from the PageTable. The page evicted\n  // should be the least recntly used page in the cache.\n  // If the evicted page is dirty, then it is flushed before it is evicted.\n  // If there are no pages in the cache, then do nothing.\n  //\n  // Arguments: None\n  //\n  // Returns: Nothing\n  void PageTable::evict_page() &#123;\n    pno_t current_pno = page_list.back().first;\n    Page* p = page_list.back().second;\n    // find the value in unordered_map\n    for(auto it = mp.begin(); it != mp.end(); it++) &#123;\n        if(it-&gt;first == current_pno &amp;&amp; it-&gt;second == p) &#123;\n            mp.erase(it);\n            break;\n        &#125;\n    &#125;\n    page_list.pop_back();\n    p-&gt;flush();\n    page_num -= 1;\n  &#125;\n&#125;\n</code></pre>\n",
            "tags": []
        }
    ]
}