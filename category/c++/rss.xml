<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>望春风 • Posts by &#34;c++&#34; category</title>
        <link>https://salvely.github.io/blog</link>
        <description>计算机&amp;数理&amp;文学爱好者，喜欢健身、下厨、听音乐和看电影</description>
        <language>zh-CN</language>
        <pubDate>Fri, 27 Oct 2023 17:45:08 +0800</pubDate>
        <lastBuildDate>Fri, 27 Oct 2023 17:45:08 +0800</lastBuildDate>
        <category>C++</category>
        <category>Arch</category>
        <category>Linux</category>
        <category>安装教程</category>
        <category>操作系统</category>
        <category>notes</category>
        <category>配置教程</category>
        <category>参考资料</category>
        <category>CMake</category>
        <category>Makefile</category>
        <category>Debian</category>
        <category>包管理</category>
        <category>lab</category>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/</guid>
            <title>C++编译与工程构建</title>
            <link>https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/</link>
            <category>C++</category>
            <category>CMake</category>
            <category>Makefile</category>
            <pubDate>Fri, 27 Oct 2023 17:45:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;我们在课程中写的都是代码量不大的小文件，但是在实际工程开发中，情况可就不一样了。但是那么多的代码，我们不可能将它们放在同一个文件中，肯定要分成不同的源文件。但是如何分解程序？如何实现程序之间的交流，就成了一个问题。本节中我们将探讨如何将一个大的工程分成不同的源程序，并且实现这些源程序之间的交流。我们首先介绍 C++ 的编译模型，也就是 C++ 源程序是如何编译成为机器可理解的二进制代码的。然后，我们讨论如何将一个大的工程分解为多个小的源程序，并且实现他们之间的交流。最后，我们探讨 C++ 的预处理器的工作模式。&lt;/p&gt;
&lt;h1 id=&#34;c-编译模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c-编译模型&#34;&gt;#&lt;/a&gt; C++ 编译模型&lt;/h1&gt;
&lt;p&gt;C++ 是一种编译型的语言，即通过编译器将源代码转化为机器可以理解的二进制代码。其编译过程分为 3 个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预处理阶段：扩展头文件，进行宏替换等&lt;/li&gt;
&lt;li&gt;编译阶段：将预处理后的高级语言代码转化为机器可以理解的二进制代码，即目标文件。在这个阶段，编译器会检查一些语法错误，如漏掉了 &lt;code&gt;;&lt;/code&gt;  等&lt;/li&gt;
&lt;li&gt;链接阶段：将生成的多个目标文件合并成一个最终的可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法错误主要集中在编译阶段进行检查，而程序的一些其他问题则多半是出现在链接阶段。例如，程序可能定义了一个函数的原型，并且对他进行了调用，但是却没有实现这个函数。又或者，定义的函数原型和实现不一样，按照函数原型进行调用以后，程序找不到函数的实现。有的人会奇怪为什么这种错误会出现在链接阶段，是因为链接器没有在这个文件中找到函数原型时，他会本能的想到是不是在需要链接的其他文件中。如果在其他文件中也没有找到的话，链接器才会告诉你出现了链接错误。&lt;/p&gt;
&lt;h1 id=&#34;模块化与分解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模块化与分解&#34;&gt;#&lt;/a&gt; 模块化与分解&lt;/h1&gt;
&lt;p&gt;通常来说，对于一个大的工程问题，我们无法一口气思考到所有的细节。而在这种情况下，我们倾向于将问题分解成不同的模块，然后通过不同模块间的合作和交流来解决。但是，如何确定模块划分的粒度呢？毕竟越往下分，细节就越多。而在这个时候，我们会选择使用一些抽象的接口。举个例子，我们无需设计 C++ STL，只需要调用其提供给我们的接口，便可以实现多种功能。而这就是模块划分的尽头。&lt;br&gt;
对于模块化，通常来说遵循 3 个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单化：提供一个较为简单的接口&lt;/li&gt;
&lt;li&gt;可扩展：在需要的时候，我们可以在不改变接口的条件下改变其实现方式。&lt;/li&gt;
&lt;li&gt;可复用：接口足够泛用（使用泛型，模板之类），可以保证函数可以被用在多个不同的项目中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;c-预处理器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c-预处理器&#34;&gt;#&lt;/a&gt; C++ 预处理器&lt;/h1&gt;
&lt;h2 id=&#34;前言-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言-2&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在编写 C++ 程序时，我们通常把一个程序分为 &lt;code&gt;file.h&lt;/code&gt;  和 &lt;code&gt;file.cpp&lt;/code&gt;  两个部分。 &lt;code&gt;file.h&lt;/code&gt;  中描述的是程序提供的类及函数接口（定义），而 &lt;code&gt;.cpp&lt;/code&gt;  文件中描述的是其实现。此外，通常在 &lt;code&gt;.h&lt;/code&gt;  文件的前后，会加上如下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;StrUtils_Included&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;StrUtils_Included&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;ConvertToUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;ConvertToLowerCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;IntegerToString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;DoubleToString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;include头文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#include头文件&#34;&gt;#&lt;/a&gt;  &lt;code&gt;include&lt;/code&gt;  头文件&lt;/h2&gt;
&lt;p&gt;其作用在于将头文件的内容复制到 &lt;code&gt;#include&lt;/code&gt;  处。头文件分为两种，一种用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;  包起，是 C++ 标准库中的文件；而另外一种用 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;  包起，是用户自定义的头文件，编译器会在当前工程文件夹下找。&lt;/p&gt;
&lt;h2 id=&#34;define定义与替换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#define定义与替换&#34;&gt;#&lt;/a&gt;  &lt;code&gt;define&lt;/code&gt;  定义与替换&lt;/h2&gt;
&lt;p&gt;宏定义的基本格式是 &lt;code&gt;define val replacement&lt;/code&gt; 。在进行宏替换时，做的不是值替换，而是普通的字符串的替换。即将程序中所有的 &lt;code&gt;val&lt;/code&gt;  都替换成 &lt;code&gt;replacement&lt;/code&gt; 。在进行宏替换时编译器并不理解这到底是什么东西，就是简单的左无脑替换。因此在替换时必须要注意，譬如：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在进行宏替换后，效果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;而不是:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为它做的仅仅是简单的字符串替换。这种错误经常发生，而要避免这类错误的方法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;define&lt;/code&gt;  时使用 &lt;code&gt;()&lt;/code&gt;  圆括号&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;const&lt;/code&gt;  语句&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;include-guard&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#include-guard&#34;&gt;#&lt;/a&gt;  &lt;code&gt;include guard&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;预处理语句可以通过条件判断来决定是否要定义某些文件，一个简单的格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ifndef&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;define&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;endif&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这套语句的基本意思是：如果已经 &lt;code&gt;#include&lt;/code&gt;  过上述文件，就不需要再定义一次了。C++ 工程文件之间相互 &lt;code&gt;#include&lt;/code&gt;  是家常便饭，这样做是为了防止由于多次互相 &lt;code&gt;#include&lt;/code&gt;  带来的重定义问题。上述语句只是一个较为简化的版本，更为完整的定义是：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;statement&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;another&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;statement&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;yet&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;another&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;statement&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这其中的 &lt;code&gt;statement&lt;/code&gt;  可以是条件判断语句，也可以是 &lt;code&gt;define()&lt;/code&gt;  语句。做条件判断时，使用的必须是已经定义过的变量，如：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;MY_CONSTANT &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;137&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Legal&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;MY_CONSTANT &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; MY_CONSTANT &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Legal&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MY_CONSTANT&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Illegal, cannot call function sqrt&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;MY_CONSTANT &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Illegal, can only use integral values&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;而使用 &lt;code&gt;define&lt;/code&gt;  语句时，如果变量已经定义，则 &lt;code&gt;define()&lt;/code&gt;  返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MY_CONSTANT&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Evaluates to true.&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;OTHER_CONSTANT&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Evaluates to false.&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MY_CONSTANT&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// Evaluates to false.&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其判断结果被应用在 &lt;code&gt;if&lt;/code&gt;  语句中。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A is defined.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;B&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;B is defined.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token function&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;C is defined.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;None of A, B, or C is defined.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这套语句的效果相当于将所有 &lt;code&gt;include&lt;/code&gt;  的内容复制粘贴到源程序中，但是注释掉重复定义的部分。它和注释不一样之处在于，这套语句可以嵌套，而注释不能。&lt;/p&gt;
&lt;h2 id=&#34;宏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#宏&#34;&gt;#&lt;/a&gt; 宏&lt;/h2&gt;
&lt;h2 id=&#34;内联函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内联函数&#34;&gt;#&lt;/a&gt; 内联函数&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</guid>
            <title>C++参考资料</title>
            <link>https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
            <category>C++</category>
            <category>参考资料</category>
            <pubDate>Sun, 22 Oct 2023 16:47:56 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pc29jcHAuZ2l0aHViLmlvL0NwcENvcmVHdWlkZWxpbmVzL0NwcENvcmVHdWlkZWxpbmVz&#34;&gt;C++ Core Guidelines&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/</guid>
            <title>Stanford CS106L:Standard C++ Programming</title>
            <link>https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/</link>
            <category>C++</category>
            <pubDate>Sun, 22 Oct 2023 11:36:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;课程资料&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#课程资料&#34;&gt;#&lt;/a&gt; 课程资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUs4NDExYjdBVS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT04NWFjZjBhNTlkZWQwMmU0Yzc1YWUxMTU4YmFjYTIwNw==&#34;&gt;Video&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjI0Lw==&#34;&gt;Slides/Code&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm&#34;&gt;Course Reader&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9hc3NpZ25tZW50LXNldHVw&#34;&gt;Assignment&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29yZ3MvY291cnNld29ya3MvcmVwb3NpdG9yaWVzP3E9QVAxNDAxLTImYW1wO3R5cGU9YWxsJmFtcDtsYW5ndWFnZT0mYW1wO3NvcnQ9&#34;&gt;AP1401-2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjEyLw==&#34;&gt;Spring 2021 资料&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9sZWN0dXJlcy8=&#34;&gt;综合资料&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;学习流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#学习流程&#34;&gt;#&lt;/a&gt; 学习流程&lt;/h1&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt; 阅读 Course Reader对应章节&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt; 观看video&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt; 阅读Slides&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token number&#34;&gt;4.&lt;/span&gt; 整理Code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上流程完成后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完成 CS106L 所有 Assignment&lt;/li&gt;
&lt;li&gt;完成 AP1401-2 所有作业&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;welcome&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#welcome&#34;&gt;#&lt;/a&gt; Welcome&lt;/h1&gt;
&lt;p&gt;本节课主要讲述了 C++ 的应用前景，历史发展和设计哲学。&lt;/p&gt;
&lt;h2 id=&#34;c应用前景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c应用前景&#34;&gt;#&lt;/a&gt; C++ 应用前景&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;future.png&#34; alt=&#34;C++应用前景&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;c的历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c的历史&#34;&gt;#&lt;/a&gt; C++ 的历史&lt;/h2&gt;
&lt;h3 id=&#34;汇编语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#汇编语言&#34;&gt;#&lt;/a&gt; 汇编语言&lt;/h3&gt;
&lt;p&gt;在早期阶段，尚没有高级语言这一说。程序员大多使用汇编语言编写程序，汇编语言的好处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用较为简单的指令进行编程&lt;/li&gt;
&lt;li&gt;汇编语言执行速度较快&lt;/li&gt;
&lt;li&gt;程序员可以直接操作计算机底层寄存器等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，汇编语言编程也有它的缺陷，缺陷就在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序涉及到对计算机底层硬件的基础操作，而不只是处理逻辑，因此对其他程序员来说，阅读起来较为困难&lt;/li&gt;
&lt;li&gt;因为汇编语言涉及到指令集架构，而指令集架构和计算机底层硬件和操作系统紧密相关，因此在一台机器上运行的程序可能无法迁移到另一台程序，简单来说就是可移植性较差&lt;/li&gt;
&lt;li&gt;汇编语言编写的程序因为使用的是一些基本的操作，因此程序较长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此， &lt;code&gt;Ken Thompson&lt;/code&gt;  和 &lt;code&gt;Dennis Ritchie&lt;/code&gt;  于 1972 年发明了 C 语言。&lt;/p&gt;
&lt;h3 id=&#34;c-语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c-语言&#34;&gt;#&lt;/a&gt; C 语言&lt;/h3&gt;
&lt;p&gt;C 语言是一门高级语言，相较汇编，它的优势在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向过程编程，较为简单。程序员在编写程序时，无需考虑计算机底层架构，而只需要考虑处理逻辑，因此编程较为简单&lt;/li&gt;
&lt;li&gt;C 语言可以由编译器编译为汇编指令，在不同的机器上，可以编译出不同的汇编指令，而后汇编器又可以将汇编指令转化为针对该计算机指令集架构的机器指令，实现 C 语言的可迁移性&lt;/li&gt;
&lt;li&gt;C 语言程序执行速度非常快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，在面对更复杂的编程问题时，C 语言也表现出了它的不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C 语言是面向过程的语言，它无法面向对象。当我们需要更复杂的结构和它的一系列方法时，C 语言只为我们提供了一些有限的结构，无法满足我们对高级结构的需求&lt;/li&gt;
&lt;li&gt;C 语言无法对不同类型提供一个泛化的模板，对于不同类型的传入参数，我们可能需要重复写多个几乎一致的处理函数&lt;/li&gt;
&lt;li&gt;写大型项目时，很多时候很难将一个问题拆解为一个面向过程的模型，不是所有问题都可以使用模块化的过程方法解决&lt;/li&gt;
&lt;li&gt;写出来的程序较长&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c&#34;&gt;#&lt;/a&gt; C++&lt;/h3&gt;
&lt;p&gt;针对 C 语言的问题， &lt;code&gt;Bjarne Stroustrup&lt;/code&gt;  于 1983 年开发了 C++ 语言，他希望能够在 C 语言基础上实现一个具有多种不同特性的高级语言。 C++ 语言一开始只是 &lt;code&gt;C with classes&lt;/code&gt; ，实现了 C 语言面向对象的延伸。而后逐步发展，直到今天的 &lt;code&gt;C++23&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;evolution.png&#34; alt=&#34;C++的演化&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;c的几大特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c的几大特性&#34;&gt;#&lt;/a&gt; C++ 的几大特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通用语言&lt;br&gt;
有的语言可以在应用到多个场景中，但是在解决特定场景问题时会显得复杂，比如 C++ 在做矩阵乘除法时，需要程序员手动编写程序，效率较低。但是 C++ 的用途很广。而有的语言，可以解决特定问题，但是并不泛用。比如 Matlab 在做科学计算时非常的常用，但是在解决其他问题时并没有 C++ 高效。&lt;/li&gt;
&lt;li&gt;编译型语言&lt;br&gt;
高级语言需要转换成机器可以阅读的二进制码才能被计算机执行。而高级语言分为编译型和解释型。其区别在于，解释型语言使用解释器 (Interpreters) 进行翻译，一边翻译一边执行。解释器在执行一条语句的同时，获取下一条语句。而编译型语言使用编译器进行编译。将整个源代码编译完成后，直接执行生成的二进制码。&lt;/li&gt;
&lt;li&gt;静态类型语言&lt;br&gt;
静态类型语言是指语句中的每个变量在声明后都有固定的类型，一旦确定，不能随意更改。而动态类型（如 Python、Javascript）会在执行的过程中动态的判断变量的类型。静态类型语言会在编译阶段检查语句是否合法，否则产生编译错误。而动态类型通常无法在编译阶段确定该语句是否有编译错误，错误均在程序运行时产生，也称为运行时错误。编译阶段排错让运行时错误出现的概率大大降低。这样无需运行即可排除程序错误。&lt;/li&gt;
&lt;li&gt;多范式语言&lt;br&gt;
部分语言只有单一范式，如 C 语言，无法编写面向对象程序。而 C++ 可以同时实现面向对象特性，泛型特性，和面向过程的特性。非常灵活。&lt;/li&gt;
&lt;li&gt;中间语言&lt;br&gt;
部分底层语言（如汇编）直接和计算机内存打交道，但是利用其写出的程序逻辑不清晰，难以理解。而部分语言无法直接对计算机底层进行操纵（如 Python、Java) 等，程序员在编写程序时就像是被禁锢，无法探索底层的奥秘。C++ 可以像 C 语言那样接触底层硬件（利用指针），也可以利用其面向对象特性构造大型程序，同时实现封装和抽象。触及底层系统和实现抽象的目的同时达到，非常便于程序员大展身手。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c的设计哲学&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c的设计哲学&#34;&gt;#&lt;/a&gt; C++ 的设计哲学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只有在需要解决特定问题时引入新的特性&lt;/li&gt;
&lt;li&gt;程序员可以自由选择编程风格&lt;/li&gt;
&lt;li&gt;隐藏实现细节，抽象出编程接口&lt;/li&gt;
&lt;li&gt;让程序员能够完全以自己想要的方式编写程序&lt;/li&gt;
&lt;li&gt;让编写的程序尽可能高效&lt;/li&gt;
&lt;li&gt;编译时进行类型检查&lt;/li&gt;
&lt;li&gt;可以兼容早期版本程序，也兼容 C 语言程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c的应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c的应用&#34;&gt;#&lt;/a&gt; C++ 的应用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;li&gt;JVM&lt;/li&gt;
&lt;li&gt;火星探索车&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;type-and-structs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#type-and-structs&#34;&gt;#&lt;/a&gt; Type and Structs&lt;/h1&gt;
&lt;p&gt;关于类型和结构体没什么好说的，主要的用法和 C 语言中差不多。但是 &lt;code&gt;string&lt;/code&gt;  类在使用之前需要在程序最开始处 &lt;code&gt;#include&amp;lt;string&amp;gt;&lt;/code&gt; ，并且最好是不要使用 &lt;code&gt;using namespace std&lt;/code&gt; ，而是使用 &lt;code&gt;std::string&lt;/code&gt; ，对于 &lt;code&gt;std::cout&lt;/code&gt;  和 &lt;code&gt;std::cin&lt;/code&gt;  也是一样。这样做是为了保证程序员在自主开发时，不和 &lt;code&gt;std&lt;/code&gt;  域内的的东西重名导致出错。&lt;/p&gt;
&lt;h2 id=&#34;stdpair&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stdpair&#34;&gt;#&lt;/a&gt;  &lt;code&gt;std::pair&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;一种 &lt;code&gt;STL&lt;/code&gt;  内置结构，其中包括两个域。 &lt;code&gt;std::pair&lt;/code&gt;  相当于是个模板，其中域的类型随意。声明时使用如下格式：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;st&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此外，还可以在程序中使用如下方法构建 &lt;code&gt;std::pair&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;make_pair&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;st&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在使用 &lt;code&gt;pair&lt;/code&gt;  时，分别用 &lt;code&gt;p.first&lt;/code&gt;  和 &lt;code&gt;p.second&lt;/code&gt;  来引用两个域。&lt;/p&gt;
&lt;h2 id=&#34;auto类型推导&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#auto类型推导&#34;&gt;#&lt;/a&gt;  &lt;code&gt;auto&lt;/code&gt;  类型推导&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;auto&lt;/code&gt;  变量表示允许编译器自行推导值的类型。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;什么时候使用 &lt;code&gt;auto&lt;/code&gt; ？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用迭代器时，我不关心值的类型&lt;/li&gt;
&lt;li&gt;使用模板时，值的类型已经可以根据上下文推断出来&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;lambda&lt;/code&gt;  时，咱不知道值是啥类型&lt;/li&gt;
&lt;li&gt;没那个必要时，尽量不要将 &lt;code&gt;auto&lt;/code&gt;  作为返回值类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;streams&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#streams&#34;&gt;#&lt;/a&gt; Streams&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;How can we convert between string-represented data and the real thing? Streams!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节首先介绍了什么是环境，而后引入 &lt;code&gt;Stream&lt;/code&gt;  的概念，讲解了 &lt;code&gt;Streams&lt;/code&gt;  在读入和写出数据时的一些特点。而 &lt;code&gt;Streams&lt;/code&gt;  可以利用 &lt;code&gt;cin&lt;/code&gt;  和 &lt;code&gt;cout&lt;/code&gt;  这两种 &lt;code&gt;iostream&lt;/code&gt;  类的对象，实现从标准输入和控制台进行读取。也可以通过 &lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  两种来实现文件的读取和写入。亦可以通过 &lt;code&gt;istringstrean&lt;/code&gt;  和 &lt;code&gt;ostringstream&lt;/code&gt;  来实现字符串和其他类型之间的连接。但是普通的 &lt;code&gt;cin&lt;/code&gt;  和 &lt;code&gt;cout&lt;/code&gt;  在使用时也可能出现读取的问题，因此我们还可以使用 &lt;code&gt;std::getline()&lt;/code&gt;  来进行一行一次的读取。此外，在使用 &lt;code&gt;Stream&lt;/code&gt;  时，还应该注意判别读取异常和写入异常。&lt;/p&gt;
&lt;h2 id=&#34;streams-overview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#streams-overview&#34;&gt;#&lt;/a&gt; Streams Overview&lt;/h2&gt;
&lt;h3 id=&#34;environment&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#environment&#34;&gt;#&lt;/a&gt; Environment&lt;/h3&gt;
&lt;p&gt;在学习 Stream 之前，我们先要了解 &lt;code&gt;Environment&lt;/code&gt; （环境）的概念。我们家里有温度计，我们通常通过温度计上的水银球去检测环境温度，然后将摄氏度显示在数轴上，人们通过观测数轴上的数字来查看当前温度。在这个例子中，外界就是环境，水银球就是将温度转化为实际示数的媒介，而数轴就是温度的输出，将温度显示出来供人们了解。而在程序编写的过程中，也可能存在一个外部环境，程序需要从这个环境获取信息，然后在利用一些处理逻辑来进行一些计算，最后返回输出或者将输出打印在屏幕上。这个环境可能是用户输入，也可能是外部文件，还有可能是其他程序。&lt;/p&gt;
&lt;h3 id=&#34;stream-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-是什么&#34;&gt;#&lt;/a&gt; Stream 是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Streams is an abstraction for input and output. Streams convert between data and the string representation of data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Stream 是程序与外部环境交流的媒介。Stream 的输入与输出可能来自用户，也可能来自程序，也可能来自其他文件。如果要将一个变量输出到终端，那么变量就会以字符串的形式打入 Stream，然后 Stream 将其输出到终端。如果要从用户输入读取数据，那么也是将用户输入转化为字符串存储在 Stream 中，然后再将其转储到变量中。&lt;/p&gt;
&lt;h3 id=&#34;stream-特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-特点&#34;&gt;#&lt;/a&gt; Stream 特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以对大体积数据进行分片读取，然后存储&lt;/li&gt;
&lt;li&gt;可以读取多个类型的数据&lt;/li&gt;
&lt;li&gt;可以串联多个 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;  读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cin-与-cout来自键盘去往终端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cin-与-cout来自键盘去往终端&#34;&gt;#&lt;/a&gt; cin 与 cout：来自键盘，去往终端&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cout&lt;/code&gt;  为 Stream 对象，它从变量中获取数据，存储到一个 Buffer 中，然后将其&lt;strong&gt;输出到终端上&lt;/strong&gt;。&lt;br&gt;
 &lt;code&gt;cin&lt;/code&gt;  也是 Stream 对象，它从&lt;strong&gt;用户输入&lt;/strong&gt;获取值，存储到一个 Buffer 中，然后将其转储到对应类型的变量中。&lt;br&gt;
在使用这两个输入流前，需要在程序开始处 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ifstream-与-ofstream来自文件去往文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ifstream-与-ofstream来自文件去往文件&#34;&gt;#&lt;/a&gt; ifstream 与 ofstream：来自文件，去往文件&lt;/h2&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;问题思考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  分别是什么？&lt;/li&gt;
&lt;li&gt;还有什么特殊的读写文件类？特殊在哪？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i/ofstream&lt;/code&gt;  和 &lt;code&gt;cin/cout&lt;/code&gt;  在使用上有什么不一样之处？&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  需要包含什么头文件？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;  怎么初始化？初始化后需要做哪些检查？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ofstream&lt;/code&gt;  怎么初始化？初始化后需要做哪些检查？&lt;/li&gt;
&lt;li&gt;如果传入的文件名是 &lt;code&gt;string&lt;/code&gt;  类型，如何处理？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;  时有哪些需要注意的地方？&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ifstream-ofstream-overview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ifstream-ofstream-overview&#34;&gt;#&lt;/a&gt; ifstream &amp;amp; ofstream Overview&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  分别从文件读取和写入文件。此外，还有一个叫做 &lt;code&gt;fstream&lt;/code&gt;  的类型，即可以完成写入，又可以完成读取）。此外， &lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  在使用上与 &lt;code&gt;cin/cout&lt;/code&gt;  不一样之处在于， &lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  是一个类型，而不是一个对象，但是 &lt;code&gt;cin&lt;/code&gt;  及 &lt;code&gt;cout&lt;/code&gt;  分别是 &lt;code&gt;std::istream&lt;/code&gt;  和 &lt;code&gt;std::ostream&lt;/code&gt;  类的对象。在使用对象的方法时 ( &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;  和 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;  已被重载) 可以直接调用，但是在使用一个类的方法时，首先需要初始化这个类的一个对象，然后再对其方法进行调用。&lt;/p&gt;
&lt;h3 id=&#34;ifstream-ofstream-使用说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ifstream-ofstream-使用说明&#34;&gt;#&lt;/a&gt; ifstream &amp;amp; ofstream 使用说明&lt;/h3&gt;
&lt;h4 id=&#34;包含头文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包含头文件&#34;&gt;#&lt;/a&gt; 包含头文件&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;fstream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;ifstream-初始化-使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ifstream-初始化-使用&#34;&gt;#&lt;/a&gt; ifstream 初始化 &amp;amp; 使用&lt;/h4&gt;
&lt;p&gt;可以直接使用构造函数，在参数列表中填入文件名进行初始化：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ifstream &lt;span class=&#34;token function&#34;&gt;myStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;file.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;也可以在使用默认构造函数初始化后，利用类的 &lt;code&gt;open()&lt;/code&gt;  方法打开文件：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ifstream myStream&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;myStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;file.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用 &lt;code&gt;ifstream&lt;/code&gt;  对象的方法与使用 &lt;code&gt;cin&lt;/code&gt;  相似，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;myStream &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; myInteger&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意，在 &lt;code&gt;open()&lt;/code&gt;  方法调用后，推荐使用 &lt;code&gt;myStream.is_open()&lt;/code&gt;  来探测是否真的成功打开了文件。&lt;/p&gt;
&lt;h4 id=&#34;ofstream-初始化-使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ofstream-初始化-使用&#34;&gt;#&lt;/a&gt; ofstream 初始化 &amp;amp; 使用&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ofstream&lt;/code&gt;  初始化过程及使用过程与前文 &lt;code&gt;ifstream&lt;/code&gt;  相似。若文件不存在，调用 &lt;code&gt;open()&lt;/code&gt;  方法会新创建一个文件，否则会覆盖原有的同名文件。（所以尽量做好备份）&lt;/p&gt;
&lt;h4 id=&#34;关闭流close&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关闭流close&#34;&gt;#&lt;/a&gt; 关闭流： &lt;code&gt;close()&lt;/code&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;当流的生命周期结束时，C++ 会为你自动关闭流&lt;/li&gt;
&lt;li&gt;你也可以手动使用 &lt;code&gt;close()&lt;/code&gt;  方法关闭流&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用-string-作为文件名时&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用-string-作为文件名时&#34;&gt;#&lt;/a&gt; 使用 string 作为文件名时…&lt;/h4&gt;
&lt;p&gt;注意， &lt;code&gt;string&lt;/code&gt;  类的开发时间要晚于 &lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt; ，彼时 &lt;code&gt;ifstream&lt;/code&gt;  和 &lt;code&gt;ofstream&lt;/code&gt;  只接受 C 语言的字符串类型。因此，要将一个 &lt;code&gt;string&lt;/code&gt;  类型的文件名传入这两个类的对象，我们必须调用 &lt;code&gt;.c_str()&lt;/code&gt;  来将其转化为 C 语言格式的字符串。&lt;/p&gt;
&lt;h2 id=&#34;stream-manipulators&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-manipulators&#34;&gt;#&lt;/a&gt; Stream manipulators&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stream manipulator&lt;/code&gt;  可以让对变量及输出的处理更加方便，程序员无需手动编程实现一些较为繁琐的功能。几种常用的 &lt;code&gt;stream manipulator&lt;/code&gt;  如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt; : 输出后换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setw&lt;/code&gt; : 设置输出的宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left/right&lt;/code&gt; : 通常与 &lt;code&gt;setw&lt;/code&gt;  连用，表示左补空格 / 右补空格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setfill&lt;/code&gt; : 在宽度一定，文字没有填满处补充特定的占位符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolalpha&lt;/code&gt; : 用 &lt;code&gt;true/false&lt;/code&gt;  表示 &lt;code&gt;1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hex&lt;/code&gt; : 将输入输出理解为 16 进制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dec&lt;/code&gt; : 输入输出为 10 进制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oct&lt;/code&gt; : 输入输出为 8 进制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ws&lt;/code&gt; : 跳过所有的空格&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;stream-异常处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-异常处理&#34;&gt;#&lt;/a&gt; Stream 异常处理&lt;/h2&gt;
&lt;p&gt;在使用 &lt;code&gt;stream&lt;/code&gt;  进行读取时，可能会出现读取异常的情况，比如读进来的值是个字符串，但是程序想把它保存到一个 &lt;code&gt;int&lt;/code&gt;  类中，这样就产生了类型异常。我们需要在读取后使用 &lt;code&gt;cout.fail()&lt;/code&gt;  或 &lt;code&gt;cin.fail()&lt;/code&gt;  来判断读取是否成功，如果有异常，我们需要手动处理异常，然后用 &lt;code&gt;cin.clear()&lt;/code&gt;  表达异常已经处理完毕。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;注意，在使用 &lt;code&gt;while&lt;/code&gt;  循环进行读取时，尽量把异常判断放在 &lt;code&gt;while&lt;/code&gt;  循环内，如果判断到异常则退出，否则就进行下一次读取。不要把 &lt;code&gt;while&lt;/code&gt;  循环放在条件判断中，否则可能会导致读取异常后依然在进行输出，因此尽量使用如下的结构。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为 &lt;code&gt;stream&lt;/code&gt;  在读取到最后或读取错误时会返回 &lt;code&gt;false&lt;/code&gt; ，而其他情况下会返回 &lt;code&gt;stream&lt;/code&gt;  对象本身（也可以判断为 &lt;code&gt;true&lt;/code&gt; ），因此我们可以使用 &lt;code&gt;cin &amp;lt;&amp;lt; intValue &amp;lt;&amp;lt; doubleValue&lt;/code&gt;  之类的语句作为判断的条件，以简化上述的循环，结构如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; intValue &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; doubleVALUE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;stream-的麻烦之处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-的麻烦之处&#34;&gt;#&lt;/a&gt; Stream 的麻烦之处&lt;/h2&gt;
&lt;p&gt;Stream 存在一个问题，如果用户多次连续读取值，而其中某一次读入的值的类型不匹配的话，则会连环影响到后面的读取。这其中的根本原因是， &lt;code&gt;stream&lt;/code&gt;  本身是一个附带了一个读写头的 &lt;code&gt;buffer&lt;/code&gt;  字符数组，而每次读取后，读写后都会向后移动，下一次读取的位置是上一次读取的位置 + 上一次读取的长度。比如说我们需要读取一个 &lt;code&gt;int&lt;/code&gt; ，再读取一个 &lt;code&gt;string&lt;/code&gt; 。上一次用户输入了 &lt;code&gt;8.265&lt;/code&gt; , 那么第一次就只会读入 &lt;code&gt;8&lt;/code&gt; ，下一次读取从 &lt;code&gt;.265&lt;/code&gt;  开始，导致 &lt;code&gt;string&lt;/code&gt;  读取出错。&lt;/p&gt;
&lt;p&gt;此外， &lt;code&gt;cin&lt;/code&gt;  的特点是： &lt;code&gt;cin&lt;/code&gt;  越过一切前导空格和换行符，在读入有效字符后，遇到空格或换行符就停止读取，见如下程序：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	string name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	string city&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; city&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;My name is &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;The city is &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; city &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果输入的第一个 &lt;code&gt;name&lt;/code&gt;  是 &lt;code&gt;First Last&lt;/code&gt; ， &lt;code&gt;city&lt;/code&gt;  输入的是 &lt;code&gt;Wuhan&lt;/code&gt; 。由于 &lt;code&gt;cin&lt;/code&gt;  遇到空格就停止读取，那么 &lt;code&gt;name&lt;/code&gt;  中存储的值就是 &lt;code&gt;First&lt;/code&gt; ， &lt;code&gt;city&lt;/code&gt;  中存储的值就是 &lt;code&gt;Last&lt;/code&gt; ，而 &lt;code&gt;Wuhan&lt;/code&gt;  依然在 &lt;code&gt;buffer&lt;/code&gt;  中无法读取。&lt;/p&gt;
&lt;p&gt;因此，要解决标准的 &lt;code&gt;stream&lt;/code&gt;  带来的麻烦，我们引入一个新的函数： &lt;code&gt;getline()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;用getline函数读取标准输入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用getline函数读取标准输入&#34;&gt;#&lt;/a&gt; 用 &lt;code&gt;getline()&lt;/code&gt;  函数读取标准输入&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt;  可以将输入保存在 &lt;code&gt;string&lt;/code&gt;  中。 &lt;code&gt;getline&lt;/code&gt;  函数的用途在于，如同他的名字，它可以一次读取一行，而 &lt;code&gt;cin&lt;/code&gt;  每次读到空格或换行符就停止。 &lt;code&gt;getline&lt;/code&gt;  不会忽略空格，会将其一并读入，但是 &lt;code&gt;getline&lt;/code&gt;  遇到换行符就停止读取，并且换行符依然留存在 &lt;code&gt;stream buffer&lt;/code&gt;  中。因此 &lt;code&gt;getline&lt;/code&gt;  非常适合那种用户需要在这个字符串中保留空格的情况。&lt;/p&gt;
&lt;p&gt;前文我们说过， &lt;code&gt;cin&lt;/code&gt;  会在开始读取时越过一切前导的空格和换行符，读取有效字符后，遇到空格和换行符就停止读取，并且将其留在 &lt;code&gt;stream buffer&lt;/code&gt;  中，以待下一次的读取。那么如果我们将 &lt;code&gt;cin&lt;/code&gt;  和 &lt;code&gt;getline&lt;/code&gt;  混用时，便会出现一些问题。&lt;/p&gt;
&lt;p&gt;参考如下示例：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; dummyInt&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string dummyString&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; dummyInt&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;dummyString&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;cin&lt;/code&gt;  首先读入了一个数，然后&lt;strong&gt;将换行符留在了 &lt;code&gt;buffer&lt;/code&gt;  中&lt;/strong&gt;，但是下一次调用 &lt;code&gt;getline&lt;/code&gt;  时， &lt;code&gt;getline&lt;/code&gt;  遇到换行符就停止读取。导致读入的 &lt;code&gt;dummyString&lt;/code&gt;  并不是我们下一次输入的字符串，而是一个空串。这都是因为上一个字符串的换行符还没有处理干净。&lt;br&gt;
最好的解决办法是将这种原始的输入输出读取，改为调用封装好的功能完善的库函数。&lt;/p&gt;
&lt;h2 id=&#34;用getline函数读取文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用getline函数读取文件&#34;&gt;#&lt;/a&gt; 用 &lt;code&gt;getline()&lt;/code&gt;  函数读取文件&lt;/h2&gt;
&lt;p&gt;参考之前 &lt;code&gt;cin&lt;/code&gt;  循环从文件读取的形式，我们可以编写一个使用 &lt;code&gt;getline&lt;/code&gt;  循环读取文件的格式:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ifstream &lt;span class=&#34;token function&#34;&gt;capitals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;capitals.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string capital&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;country&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// check if the file is correctly opened&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;capitals&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;capital&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getlien&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;capitals&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;country&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;a-string-bufferstringstream&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-string-bufferstringstream&#34;&gt;#&lt;/a&gt; A string buffer: &lt;code&gt;stringstream&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;有时候，我们想要连接字符串和数字，譬如 &lt;code&gt;&amp;quot;I ate&amp;quot; + 3 &amp;quot;peaches today&amp;quot;&lt;/code&gt; ，可是 C++ 不允许我们拼接不一样类型的值，怎么办呢？&lt;br&gt;
下面我们引入一个新的 &lt;code&gt;stream&lt;/code&gt;  类： &lt;code&gt;stringstream&lt;/code&gt; 。通过  &lt;code&gt;myStringStream &amp;lt;&amp;lt; &amp;quot;I ate&amp;quot; &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; &amp;quot;peaches today&amp;quot;&lt;/code&gt; , 我们可以实现字符串和其他类型值的拼接。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stringstream&lt;/code&gt;  是一个类似于 &lt;code&gt;cin&lt;/code&gt;  和 &lt;code&gt;cout&lt;/code&gt;  的 &lt;code&gt;stream&lt;/code&gt; 。和 &lt;code&gt;ifstream/ofstream&lt;/code&gt;  一样，在使用 &lt;code&gt;stringstream&lt;/code&gt;  前，我们需要先初始化一个 &lt;code&gt;stringstream&lt;/code&gt;  类的对象，然后再对这个对象进行读入和写出。 &lt;code&gt;stringstream&lt;/code&gt;  和标准 &lt;code&gt;iostream&lt;/code&gt;  的差别在于，其写入和写出的值并不保存在程序外，而是作为程序的一个变量，可以通过调用 &lt;code&gt;myStringStream.str()&lt;/code&gt;  随时读取。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;在使用 &lt;code&gt;stringstream&lt;/code&gt;  之前，需要引入头文件 &lt;code&gt;#include &amp;lt;sstream&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;initialization&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#initialization&#34;&gt;#&lt;/a&gt; Initialization&lt;/h1&gt;
&lt;h2 id=&#34;初始化结构体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化结构体&#34;&gt;#&lt;/a&gt; 初始化结构体&lt;/h2&gt;
&lt;h3 id=&#34;方法一用给每个字段赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一用给每个字段赋值&#34;&gt;#&lt;/a&gt; 方法一：用 &lt;code&gt;.&lt;/code&gt;  给每个字段赋值&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Student s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Frankie&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MN&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;方法二用直接赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二用直接赋值&#34;&gt;#&lt;/a&gt; 方法二：用 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  直接赋值&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Student s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Frankie&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MN&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;初始化stdpair&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化stdpair&#34;&gt;#&lt;/a&gt; 初始化 &lt;code&gt;std::pair&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;方法一用给每个字段赋值-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一用给每个字段赋值-2&#34;&gt;#&lt;/a&gt; 方法一：用 &lt;code&gt;.&lt;/code&gt;  给每个字段赋值&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; numSuffix1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;st&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;方法二用直接赋值-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二用直接赋值-2&#34;&gt;#&lt;/a&gt; 方法二：用 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  直接赋值&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; numSuffix2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;numSuffix2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;first &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;numSuffix2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;second &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;nd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;方法三调用stdmake_pairfield1field2方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法三调用stdmake_pairfield1field2方法&#34;&gt;#&lt;/a&gt; 方法三：调用 &lt;code&gt;std::make_pair(field1,field2)&lt;/code&gt;  方法&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; numSuffix2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;make_pair&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;初始化stdvector&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化stdvector&#34;&gt;#&lt;/a&gt; 初始化 &lt;code&gt;std::vector&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;方法一使用直接赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一使用直接赋值&#34;&gt;#&lt;/a&gt; 方法一：使用 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  直接赋值&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// a = &amp;#123;3,5&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;方法二使用vector构造函数赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二使用vector构造函数赋值&#34;&gt;#&lt;/a&gt; 方法二：使用 &lt;code&gt;vector()构造函数&lt;/code&gt; 赋值&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;这种情况下，传入的 3 和 5 是构造函数的参数，3 是元素的个数，5 是重复的元素值， &lt;code&gt;a=&amp;#123;5,5,5&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;大括号初始化通用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大括号初始化通用&#34;&gt;#&lt;/a&gt; 大括号初始化 (通用)&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; vec&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; numSuffix1&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;st&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Student s&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Frankie&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MN&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// less common/nice for primitive types, but possible!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string f&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Frankie&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;structure-bindings&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#structure-bindings&#34;&gt;#&lt;/a&gt; Structure Bindings&lt;/h2&gt;
&lt;p&gt;可以结合 &lt;code&gt;auto&lt;/code&gt;  的自动类型推导来自动绑定值。&lt;br&gt;
使用前：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;make_pair&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;“s”&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;first&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;second&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用后：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;make_pair&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;“s”&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// a is string, b is int&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// auto [a, b] =&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;make_pair&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;references&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt; References&lt;/h1&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;  默认为赋值值，如果要传入引用，必须在声明引用时加上 &lt;code&gt;&amp;amp;&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;修改引用时便修改了值本身，而修改复制品不修改本身；&lt;/li&gt;
&lt;li&gt;引用是变量的引用，修改引用前必须声明一个变量，无法对常量进行引用；&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; ref &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// the reference of value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; copy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// the copy of value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此外，在使用迭代器时，如果要修改被迭代的值本身而不是他的复制品，必须使用引用，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; nums&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; nums&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		num1&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		num2&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这段代码中， &lt;code&gt;auto [num1,num2]&lt;/code&gt;  是 &lt;code&gt;nums&lt;/code&gt;  中每个元素的复制品，而不是本身。如果要对本身进行修改，必须使用：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; nums&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;left-value-right-value&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#left-value-right-value&#34;&gt;#&lt;/a&gt; left-value &amp;amp; right-value&lt;/h1&gt;
&lt;p&gt;左值和右值的区别在于，左值通常来说是变量，而右值是字面量。左值可以出现在 &lt;code&gt;=&lt;/code&gt;  的左边和右边，是在程序生命周期内长期有效。而右值作为字面量，无法在程序中长期存活，自然也不能出现在 &lt;code&gt;=&lt;/code&gt;  的左边。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;在使用引用时，不允许传入右值，即不允许传入字面量。我们无法对一个常量进行引用，只能对左值 (变量) 进行引用。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;const-const-referencecopy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#const-const-referencecopy&#34;&gt;#&lt;/a&gt; const &amp;amp; const reference/copy&lt;/h1&gt;
&lt;p&gt;常量是不允许修改的量，使用 &lt;code&gt;const&lt;/code&gt;  声明常量。常量的引用和复制也必须是常量，引用及复制前加 &lt;code&gt;const&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;containers&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#containers&#34;&gt;#&lt;/a&gt; Containers&lt;/h1&gt;
&lt;h2 id=&#34;stl-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stl-是什么&#34;&gt;#&lt;/a&gt; STL 是什么？&lt;/h2&gt;
&lt;h2 id=&#34;stl-overview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stl-overview&#34;&gt;#&lt;/a&gt; STL Overview&lt;/h2&gt;
&lt;h2 id=&#34;为什么需要-stl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么需要-stl&#34;&gt;#&lt;/a&gt; 为什么需要 STL？&lt;/h2&gt;
&lt;h2 id=&#34;vector&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vector&#34;&gt;#&lt;/a&gt; vector&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;push_back&lt;/code&gt;   &lt;code&gt;insert&lt;/code&gt;   &lt;code&gt;pop_back&lt;/code&gt;   &lt;code&gt;erase&lt;/code&gt;   &lt;code&gt;resize&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;deque&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deque&#34;&gt;#&lt;/a&gt; deque&lt;/h2&gt;
&lt;h1 id=&#34;iterators-and-pointers&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iterators-and-pointers&#34;&gt;#&lt;/a&gt; Iterators and Pointers&lt;/h1&gt;
&lt;h1 id=&#34;classes&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#classes&#34;&gt;#&lt;/a&gt; Classes&lt;/h1&gt;
&lt;h1 id=&#34;template-classes-and-const-correctness&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#template-classes-and-const-correctness&#34;&gt;#&lt;/a&gt; Template Classes and Const Correctness&lt;/h1&gt;
&lt;h1 id=&#34;template-functions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#template-functions&#34;&gt;#&lt;/a&gt; Template Functions&lt;/h1&gt;
&lt;h1 id=&#34;functions-and-lambdas&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#functions-and-lambdas&#34;&gt;#&lt;/a&gt; Functions and Lambdas&lt;/h1&gt;
&lt;h1 id=&#34;midquarter-review&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#midquarter-review&#34;&gt;#&lt;/a&gt; Midquarter Review&lt;/h1&gt;
&lt;h1 id=&#34;operators&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#operators&#34;&gt;#&lt;/a&gt; Operators&lt;/h1&gt;
&lt;h1 id=&#34;special-member-functions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#special-member-functions&#34;&gt;#&lt;/a&gt; Special Member Functions&lt;/h1&gt;
&lt;h1 id=&#34;move-semantics&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#move-semantics&#34;&gt;#&lt;/a&gt; Move Semantics&lt;/h1&gt;
&lt;h1 id=&#34;stdoptional-and-type-safety&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stdoptional-and-type-safety&#34;&gt;#&lt;/a&gt; std::optional and Type Safety&lt;/h1&gt;
&lt;h1 id=&#34;raii-smart-pointers-and-building-c-projects&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#raii-smart-pointers-and-building-c-projects&#34;&gt;#&lt;/a&gt; RAII, Smart Pointers, and Building C++ Projects&lt;/h1&gt;
&lt;h1 id=&#34;c-for-data-science-and-ml&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c-for-data-science-and-ml&#34;&gt;#&lt;/a&gt; C++ for Data Science and ML&lt;/h1&gt;
 ]]></description>
        </item>
    </channel>
</rss>
