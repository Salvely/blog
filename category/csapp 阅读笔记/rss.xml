<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>望春风 • Posts by &#34;csapp 阅读笔记&#34; category</title>
        <link>https://salvely.github.io/blog</link>
        <description>计算机&amp;数理&amp;文学爱好者，喜欢健身、下厨、听音乐和看电影</description>
        <language>zh-CN</language>
        <pubDate>Thu, 29 Feb 2024 11:08:11 +0800</pubDate>
        <lastBuildDate>Thu, 29 Feb 2024 11:08:11 +0800</lastBuildDate>
        <category>C++</category>
        <category>Arch</category>
        <category>Linux</category>
        <category>安装教程</category>
        <category>操作系统</category>
        <category>notes</category>
        <category>配置教程</category>
        <category>Debian</category>
        <category>包管理</category>
        <category>参考资料</category>
        <category>CMake</category>
        <category>Makefile</category>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch3/</guid>
            <title>CSAPP Chapter 3 - 程序的机器级表示</title>
            <link>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch3/</link>
            <pubDate>Thu, 29 Feb 2024 11:08:11 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch2/</guid>
            <title>CSAPP Chapter 2 - 信息的表示和处理</title>
            <link>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch2/</link>
            <pubDate>Thu, 29 Feb 2024 11:08:01 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;信息的表示和处理&#34;&gt;&lt;a href=&#34;#信息的表示和处理&#34; class=&#34;headerlink&#34; title=&#34;信息的表示和处理&#34;&gt;&lt;/a&gt;信息的表示和处理&lt;/h2&gt;&lt;p&gt;信息 &amp;#x3D; 二进制位的组合 + 对位组合的解释：无符号，补码，有符号整数，浮点数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;介绍了一点 C 语言的演变历史：汇编不方便 —&amp;gt; ANSI C -&amp;gt; ISC C90 -&amp;gt; ISO C99 -&amp;gt; ISO C11(可以在编译时通过&lt;code&gt;-std=cxx&lt;/code&gt;指定编译所使用的版本)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1 个字节 &amp;#x3D; 8 位 -&amp;gt; 内存中信息的编码以字节为单位 -&amp;gt; 机器级程序将内存看作一个大的数组（虚拟内存）-&amp;gt; 利用指针来存储地址 -&amp;gt; 指针是机器级代码的概念，其组成包含类型+值，但是类型在内存当中是不可见的，在内存中所有东西都是没有感情的字节数组。-&amp;gt; 指针的大小 &amp;#x3D; 字长（总线一次传输数据的最大字节数）-&amp;gt; 虚拟地址空间以字编码 -&amp;gt; 字长：虚拟地址空间的最大大小 -&amp;gt; 32 位机器：4GB 64 位机器：16EB -&amp;gt; &lt;code&gt;32位程序&lt;/code&gt; &amp;amp; &lt;code&gt;64位程序&lt;/code&gt;指的是：如何编译&lt;/p&gt;
&lt;p&gt;字节的表示方法包括：16 进制，10 进制，2 进制等等。&lt;/p&gt;
&lt;p&gt;字节序：对跨越多个字节的程序对象，我们必须明确：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址在哪里：存储的最低字节处&lt;/li&gt;
&lt;li&gt;如何排列他们：大端法 or 小端法？&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;ASCII 编码与 Unicode 编码。Unicode 和 UTF-8 是什么关系？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;布尔代数与位运算，其有分配律，且&lt;code&gt;(a^b)^a = b&lt;/code&gt;，位向量掩码，经典的&lt;code&gt;inplace_swap&lt;/code&gt;利用异或进行值交换&lt;/p&gt;
&lt;p&gt;逻辑运算，short circuits&lt;/p&gt;
&lt;p&gt;移位运算：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑右移&lt;/li&gt;
&lt;li&gt;算术右移（有符号数算术右移，无符号数逻辑右移，Java 使用&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;来进行逻辑右移）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;移动 k 位（k 很大时），移动 k % w 位&lt;/li&gt;
&lt;li&gt;加法和减法的优先级 &amp;gt; 移位运算优先级，如 &lt;code&gt;1&amp;lt;&amp;lt;2+3&amp;lt;&amp;lt;4&lt;/code&gt;，因此移位时记得加括号&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;整数的表示和运算&#34;&gt;&lt;a href=&#34;#整数的表示和运算&#34; class=&#34;headerlink&#34; title=&#34;整数的表示和运算&#34;&gt;&lt;/a&gt;整数的表示和运算&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch2/numbers.png&#34; alt=&#34;numbers.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;浮点数的表示&#34;&gt;&lt;a href=&#34;#浮点数的表示&#34; class=&#34;headerlink&#34; title=&#34;浮点数的表示&#34;&gt;&lt;/a&gt;浮点数的表示&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;单精度浮点数(&lt;code&gt;float&lt;/code&gt;)：1 位符号位 + 8 位阶码 + 23 位位数&lt;/li&gt;
&lt;li&gt;双精度浮点数(&lt;code&gt;double&lt;/code&gt;)：1 位符号位 + 11 位阶码 + 52 位尾数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;规格化数：&lt;/p&gt;
&lt;h2 id=&#34;重点习题&#34;&gt;&lt;a href=&#34;#重点习题&#34; class=&#34;headerlink&#34; title=&#34;重点习题&#34;&gt;&lt;/a&gt;重点习题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2 进制，16 进制，10 进制之间的转化&lt;/li&gt;
&lt;li&gt;大端法和小端法对同一个数值的不同存储方式&lt;/li&gt;
&lt;li&gt;整数和浮点数表示的重合部分&lt;/li&gt;
&lt;li&gt;布尔代数和位运算&lt;/li&gt;
&lt;li&gt;位向量掩码&lt;/li&gt;
&lt;li&gt;布尔运算之间的组合（or,and,xor,not）&lt;/li&gt;
&lt;li&gt;逻辑运算&lt;/li&gt;
&lt;li&gt;使用位级运算和逻辑运算实现&lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移位运算的计算&lt;/li&gt;
&lt;li&gt;同样位表示的无符号和补码值&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch1/</guid>
            <title>CSAPP Chapter 1 - 计算机系统漫游</title>
            <link>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch1/</link>
            <pubDate>Thu, 29 Feb 2024 11:06:06 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;code&gt;CSAPP&lt;/code&gt;的全称是&lt;code&gt;Computer Systems: A Programmer&amp;#39;s Perspective&lt;/code&gt;，中文翻译为&lt;code&gt;《深入理解计算机系统》&lt;/code&gt;。这本书以&lt;code&gt;hello world&lt;/code&gt;程序的运行贯穿始终，可以作为应用级别程序员一窥底层概貌的显微镜，也可以作为系统方向研究者的研究的方向概览。下面我们从第一章出发，进入计算机系统的世界。&lt;/p&gt;
&lt;h2 id=&#34;信息-位-上下文&#34;&gt;&lt;a href=&#34;#信息-位-上下文&#34; class=&#34;headerlink&#34; title=&#34;信息 &amp;#x3D; 位 + 上下文&#34;&gt;&lt;/a&gt;信息 &amp;#x3D; 位 + 上下文&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;计算机系统 &amp;#x3D; 硬件 + 系统软件&lt;/li&gt;
&lt;li&gt;hello 从源程序开始 -&amp;gt; 所有信息都用位表示 -&amp;gt; 8 个位一组 -&amp;gt; 字节 —&amp;gt; ASCII 标准编码字节 —&amp;gt; 文本字符 -&amp;gt; 文本文件&lt;/li&gt;
&lt;li&gt;其他 -&amp;gt; 二进制文件&lt;/li&gt;
&lt;li&gt;数据都是比特位，区别在于上下文如何解释他们&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;C 语言的起源：作为用于 Unix 操作系统的语言被开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;程序与编译系统&#34;&gt;&lt;a href=&#34;#程序与编译系统&#34; class=&#34;headerlink&#34; title=&#34;程序与编译系统&#34;&gt;&lt;/a&gt;程序与编译系统&lt;/h2&gt;&lt;p&gt;编译过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;预处理器(cpp)&lt;/code&gt;修改原始 &lt;code&gt;hello.c&lt;/code&gt;程序，生成&lt;code&gt;hello.i&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;编译器(ccl)&lt;/code&gt;将其翻译为机器语言指令，生成&lt;code&gt;hello.s&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;汇编器(as)&lt;/code&gt;将其翻译为二进制目标文件(可重定位目标程序)，生成&lt;code&gt;hello.o&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;链接器(ld)&lt;/code&gt;将其与其他预编译好的二进制目标文件链接起来，生成二进制可执行文件，生成&lt;code&gt;hello&lt;/code&gt;文件&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是可重定位目标程序？&lt;/p&gt;
&lt;p&gt;GNU 项目 &amp;amp; 自由软件概念 &amp;amp; 开源运动（环境为 GNU 环境，内核为 Linux 内核）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;了解编译器工作过程的好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优化程序性能&lt;/li&gt;
&lt;li&gt;理解链接时出现的错误&lt;/li&gt;
&lt;li&gt;避免安全漏洞&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;处理器-内存中机器指令&#34;&gt;&lt;a href=&#34;#处理器-内存中机器指令&#34; class=&#34;headerlink&#34; title=&#34;处理器 &amp;amp; 内存中机器指令&#34;&gt;&lt;/a&gt;处理器 &amp;amp; 内存中机器指令&lt;/h2&gt;&lt;p&gt;此时&lt;code&gt;hello&lt;/code&gt;已经被编译成可执行文件并存储在磁盘上。&lt;/p&gt;
&lt;h3 id=&#34;硬件组成&#34;&gt;&lt;a href=&#34;#硬件组成&#34; class=&#34;headerlink&#34; title=&#34;硬件组成&#34;&gt;&lt;/a&gt;硬件组成&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;总线：传输定长字节块，称为字（各系统不一样大）&lt;/li&gt;
&lt;li&gt;I&amp;#x2F;O 设备：键盘、鼠标、显示器、磁盘驱动器等。每个 I&amp;#x2F;O 设备通过一个控制器或适配器与 I&amp;#x2F;O 总线相连。其区别主要在于其封装方式。&lt;/li&gt;
&lt;li&gt;主存：临时存储设备，在处理器执行程序时，用来存放程序和程序处理的数据，由一组动态随机存储器（DRAM）芯片构成。从逻辑上来说，存储器是一个线性的字节数组，每个字节都有唯一的地址（数组索引）。&lt;/li&gt;
&lt;li&gt;处理器：是解释或执行存储在主存中引擎的指令。下一条要执行的指令的地址存储在 PC 中。CPU 中还包含一组寄存器。CPU 的设计根据指令集架构而不同。微体系结构描述的就是这个处理器是如何实现的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;hello-程序运行&#34;&gt;&lt;a href=&#34;#hello-程序运行&#34; class=&#34;headerlink&#34; title=&#34;hello 程序运行&#34;&gt;&lt;/a&gt;hello 程序运行&lt;/h3&gt;&lt;p&gt;假设我们在&lt;code&gt;shell&lt;/code&gt;中输入以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;./hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其运行的过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;shell 程序将输入字符串&lt;code&gt;./hello&lt;/code&gt;逐一读入寄存器（通过 I&amp;#x2F;O 桥和总线接口）&lt;/li&gt;
&lt;li&gt;将其转储到内存中（通过总线接口和 I&amp;#x2F;O 桥）&lt;/li&gt;
&lt;li&gt;shell 程序从磁盘中加载可执行的&lt;code&gt;hello&lt;/code&gt;可执行文件，将其从磁盘通过 I&amp;#x2F;O 桥复制到主存（DMA 技术，如果没有 DMA 技术，还需要通过处理器才能到达主存）&lt;/li&gt;
&lt;li&gt;处理器执行&lt;code&gt;hello&lt;/code&gt;程序中的指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hello world&lt;/code&gt;字符串：主存 —&amp;gt; I&amp;#x2F;O 桥 -&amp;gt; 总线接口 —&amp;gt; 寄存器文件 -&amp;gt; 总线接口 -&amp;gt; I&amp;#x2F;O 桥 -&amp;gt; 图形适配器 —&amp;gt; 显示器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;高速缓存-存储设备层次结构&#34;&gt;&lt;a href=&#34;#高速缓存-存储设备层次结构&#34; class=&#34;headerlink&#34; title=&#34;高速缓存 &amp;amp; 存储设备层次结构&#34;&gt;&lt;/a&gt;高速缓存 &amp;amp; 存储设备层次结构&lt;/h2&gt;&lt;p&gt;高速缓存：较大的存储设备运行慢，造价低。而近年来处理器和主存之间的速度差距还在增大。因此，高速缓冲存储器(cache)的目的是尽量减少处理器和主存之间差异带来的速度差距。其采用更小更快的存储设备，作为暂时的存储区域。其使用静态随机访问存储器（SRAM）技术实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;核心：高速缓存的局部性原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;存储设备层次结构：在处理器和较大较慢的设备之间插入一个更小更快的存储设备，上一层次设备作为第一层存储器的高速缓存。&lt;/p&gt;
&lt;h2 id=&#34;操作系统资源管理-抽象&#34;&gt;&lt;a href=&#34;#操作系统资源管理-抽象&#34; class=&#34;headerlink&#34; title=&#34;操作系统资源管理 &amp;amp; 抽象&#34;&gt;&lt;/a&gt;操作系统资源管理 &amp;amp; 抽象&lt;/h2&gt;&lt;p&gt;操作系统：应用程序和硬件之间插入的一层软件。&lt;/p&gt;
&lt;p&gt;其几个基本功能包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止硬件被失控的应用程序滥用&lt;/li&gt;
&lt;li&gt;向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备（利用抽象）&lt;ol&gt;
&lt;li&gt;文件: I&amp;#x2F;O 设备抽象&lt;/li&gt;
&lt;li&gt;虚拟内存：主存 + 磁盘 I&amp;#x2F;O 设备抽象&lt;/li&gt;
&lt;li&gt;进程：对处理器、主存和 I&amp;#x2F;O 设备抽象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Unix、POSIX 和标准 Unix 规范：&lt;/p&gt;
&lt;p&gt;时期 1：OS&amp;#x2F;360 + Multics&lt;br&gt;时期 2：Unix（包含层次文件系统、作为用户级进程的 shell 概念）&lt;br&gt;时期 3：Unix 4.xBSD(增加了虚拟内存和 Internet 协议) + System V Unix + Solaris&lt;br&gt;时期 4：IEEE 标准化 Unix 开发，将该标准命名为 POSIX 标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;进程-线程&#34;&gt;&lt;a href=&#34;#进程-线程&#34; class=&#34;headerlink&#34; title=&#34;进程 &amp;amp; 线程&#34;&gt;&lt;/a&gt;进程 &amp;amp; 线程&lt;/h3&gt;&lt;h4 id=&#34;进程&#34;&gt;&lt;a href=&#34;#进程&#34; class=&#34;headerlink&#34; title=&#34;进程&#34;&gt;&lt;/a&gt;进程&lt;/h4&gt;&lt;p&gt;进程是操作系统对一个正在运行的程序的一种抽象，在这个系统中上可同时运行多个进程，而每个进程都好像在独自的使用硬件。并发运行时，是一个进程的指令与另一个进程的指令时间交错执行的。这是通过处理器在进程间切换实现的，该机制由操作系统实现，称之为上下文切换。上下文是指进程运行所需的所有状态信息，包括 PC、寄存器文件当前值、主存的内容。一般单处理器一次只能执行一个进程的代码，当它需要交错执行多个指令时，需要执行上下文切换，其步骤包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存当前进程的上下文&lt;/li&gt;
&lt;li&gt;恢复新进程的上下文&lt;/li&gt;
&lt;li&gt;将控制权转移到新进程（系统调用）&lt;/li&gt;
&lt;li&gt;新进程终止后，操作系统恢复旧进程上下文&lt;/li&gt;
&lt;li&gt;控制权转移回旧进程（系统调用）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;控制权的转移通过系统调用实现，它使得 CPU 的状态从用户态变为内核态。操作系统内核是系统管理全部进程所用代码和数据结构的集合。&lt;/p&gt;
&lt;p&gt;在单核处理器中，一个 CPU 可以并发的执行多个进程。而在多核 CPU 中，多个处理器可以同时执行多个进程。&lt;/p&gt;
&lt;h4 id=&#34;线程&#34;&gt;&lt;a href=&#34;#线程&#34; class=&#34;headerlink&#34; title=&#34;线程&#34;&gt;&lt;/a&gt;线程&lt;/h4&gt;&lt;p&gt;一个进程可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和数据区域，但是不一样的是他们拥有各自独立的栈空间。&lt;/p&gt;
&lt;h3 id=&#34;虚拟内存&#34;&gt;&lt;a href=&#34;#虚拟内存&#34; class=&#34;headerlink&#34; title=&#34;虚拟内存&#34;&gt;&lt;/a&gt;虚拟内存&lt;/h3&gt;&lt;p&gt;虚拟内存为每个进程提供了一种假象，就是她们都单独的占有主存，每个进程看到的内存都是一致的，我们将其称之为虚拟地址空间。虚拟地址空间从低字节到高字节可划分为以下几个段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只读的程序代码和数据&lt;/li&gt;
&lt;li&gt;可读写的程序数据&lt;/li&gt;
&lt;li&gt;堆（malloc）分配&lt;/li&gt;
&lt;li&gt;共享库内存映射区域&lt;/li&gt;
&lt;li&gt;用户栈&lt;/li&gt;
&lt;li&gt;内核虚拟内存（用户代码不可见）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文件&#34;&gt;&lt;a href=&#34;#文件&#34; class=&#34;headerlink&#34; title=&#34;文件&#34;&gt;&lt;/a&gt;文件&lt;/h3&gt;&lt;p&gt;文件可以作为 I&amp;#x2F;O 设备的抽象，I&amp;#x2F;O 设备具有各种不同的特性，但是通过将其抽象为文件，我们可以通过一组统一的接口来访问他们。&lt;/p&gt;
&lt;h2 id=&#34;网络通信&#34;&gt;&lt;a href=&#34;#网络通信&#34; class=&#34;headerlink&#34; title=&#34;网络通信&#34;&gt;&lt;/a&gt;网络通信&lt;/h2&gt;&lt;p&gt;网络也可以视为一个 I&amp;#x2F;O 设备，我们从文件中读写数据的方法很多都可以应用在网络设备的读写上。&lt;/p&gt;
&lt;h2 id=&#34;重要主题&#34;&gt;&lt;a href=&#34;#重要主题&#34; class=&#34;headerlink&#34; title=&#34;重要主题&#34;&gt;&lt;/a&gt;重要主题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;系统是软硬件的有机结合体！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Amdahl-定律&#34;&gt;&lt;a href=&#34;#Amdahl-定律&#34; class=&#34;headerlink&#34; title=&#34;Amdahl 定律&#34;&gt;&lt;/a&gt;Amdahl 定律&lt;/h3&gt;&lt;p&gt;当我们对系统的某个部分进行加速时，其对系统整体的性能的影响取决于该部分的重要性和加速程度。假设系统执行某应用程序所需时间为$T_{old}$，某部分执行时间与该时间的比例为$\alpha$，而该部分性能提升比例为$k$。即该部分初始所需时间为$\alpha&lt;em&gt;T_{old}$,现在为$\frac{\alpha&lt;/em&gt;T_{old}}{k}$，那么总的执行时间应该为：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;    T_{new} &amp;#x3D; (1-\alpha)T_{old}+\frac{\alpha*T_{old}}{k}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;加速比 S 为&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;    S &amp;#x3D; \frac{T_{old}}{T_{new}} &amp;#x3D; \frac{1}{(1-\alpha)+\frac{\alpha}{k}}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;其结论为：要想显著加速整个系统，必须提升全系统中相当大的部分的速度。此外，当 k 趋近于$\infin$时，最后的加速比等于$\frac{1}{1-\alpha}$&lt;/p&gt;
&lt;h3 id=&#34;并发和并行&#34;&gt;&lt;a href=&#34;#并发和并行&#34; class=&#34;headerlink&#34; title=&#34;并发和并行&#34;&gt;&lt;/a&gt;并发和并行&lt;/h3&gt;&lt;p&gt;我们的优化体现在，希望：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机做的更多&lt;/li&gt;
&lt;li&gt;计算机运行更快&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;线程级并发&#34;&gt;&lt;a href=&#34;#线程级并发&#34; class=&#34;headerlink&#34; title=&#34;线程级并发&#34;&gt;&lt;/a&gt;线程级并发&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用进程：有多个程序执行&lt;/li&gt;
&lt;li&gt;使用线程：一个进程中执行多个控制流&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;指令级并行&#34;&gt;&lt;a href=&#34;#指令级并行&#34; class=&#34;headerlink&#34; title=&#34;指令级并行&#34;&gt;&lt;/a&gt;指令级并行&lt;/h4&gt;&lt;p&gt;处理器同时执行多条指令。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;流水线：可以用来处理一条指令的不同部分，以此达到同时执行多条指令的目的&lt;/li&gt;
&lt;li&gt;达到比一个周期一条指令更快的执行速率，称之为超标量&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;单指令、多数据并行&#34;&gt;&lt;a href=&#34;#单指令、多数据并行&#34; class=&#34;headerlink&#34; title=&#34;单指令、多数据并行&#34;&gt;&lt;/a&gt;单指令、多数据并行&lt;/h4&gt;&lt;p&gt;许多处理器拥有特殊硬件，允许一条指令产生多个可以并行执行的操作，这种方式称为单指令、多数据，即&lt;code&gt;SIMD并行&lt;/code&gt;。例如浮点数加法指令。编译器有时会试图抓取 SIMD 并行性特征，也可以使用特殊向量数据类型编写程序。&lt;/p&gt;
&lt;h3 id=&#34;重点习题&#34;&gt;&lt;a href=&#34;#重点习题&#34; class=&#34;headerlink&#34; title=&#34;重点习题&#34;&gt;&lt;/a&gt;重点习题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Amdahl 定律计算&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
