{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"csapp 阅读笔记\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch3/",
            "url": "https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch3/",
            "title": "CSAPP Chapter 3 - 程序的机器级表示",
            "date_published": "2024-02-29T03:08:11.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch2/",
            "url": "https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch2/",
            "title": "CSAPP Chapter 2 - 信息的表示和处理",
            "date_published": "2024-02-29T03:08:01.000Z",
            "content_html": "<h2 id=\"信息的表示和处理\"><a href=\"#信息的表示和处理\" class=\"headerlink\" title=\"信息的表示和处理\"></a>信息的表示和处理</h2><p>信息 &#x3D; 二进制位的组合 + 对位组合的解释：无符号，补码，有符号整数，浮点数。</p>\n<blockquote>\n<p>介绍了一点 C 语言的演变历史：汇编不方便 —&gt; ANSI C -&gt; ISC C90 -&gt; ISO C99 -&gt; ISO C11(可以在编译时通过<code>-std=cxx</code>指定编译所使用的版本)</p>\n</blockquote>\n<p>1 个字节 &#x3D; 8 位 -&gt; 内存中信息的编码以字节为单位 -&gt; 机器级程序将内存看作一个大的数组（虚拟内存）-&gt; 利用指针来存储地址 -&gt; 指针是机器级代码的概念，其组成包含类型+值，但是类型在内存当中是不可见的，在内存中所有东西都是没有感情的字节数组。-&gt; 指针的大小 &#x3D; 字长（总线一次传输数据的最大字节数）-&gt; 虚拟地址空间以字编码 -&gt; 字长：虚拟地址空间的最大大小 -&gt; 32 位机器：4GB 64 位机器：16EB -&gt; <code>32位程序</code> &amp; <code>64位程序</code>指的是：如何编译</p>\n<p>字节的表示方法包括：16 进制，10 进制，2 进制等等。</p>\n<p>字节序：对跨越多个字节的程序对象，我们必须明确：</p>\n<ol>\n<li>地址在哪里：存储的最低字节处</li>\n<li>如何排列他们：大端法 or 小端法？</li>\n</ol>\n<blockquote>\n<p>ASCII 编码与 Unicode 编码。Unicode 和 UTF-8 是什么关系？</p>\n</blockquote>\n<p>布尔代数与位运算，其有分配律，且<code>(a^b)^a = b</code>，位向量掩码，经典的<code>inplace_swap</code>利用异或进行值交换</p>\n<p>逻辑运算，short circuits</p>\n<p>移位运算：</p>\n<ol>\n<li>逻辑右移</li>\n<li>算术右移（有符号数算术右移，无符号数逻辑右移，Java 使用<code>&gt;&gt;&gt;</code>来进行逻辑右移）</li>\n</ol>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>移动 k 位（k 很大时），移动 k % w 位</li>\n<li>加法和减法的优先级 &gt; 移位运算优先级，如 <code>1&lt;&lt;2+3&lt;&lt;4</code>，因此移位时记得加括号</li>\n</ol>\n</blockquote>\n<h2 id=\"整数的表示和运算\"><a href=\"#整数的表示和运算\" class=\"headerlink\" title=\"整数的表示和运算\"></a>整数的表示和运算</h2><p><img data-src=\"/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch2/numbers.png\" alt=\"numbers.png\"></p>\n<h2 id=\"浮点数的表示\"><a href=\"#浮点数的表示\" class=\"headerlink\" title=\"浮点数的表示\"></a>浮点数的表示</h2><ol>\n<li>单精度浮点数(<code>float</code>)：1 位符号位 + 8 位阶码 + 23 位位数</li>\n<li>双精度浮点数(<code>double</code>)：1 位符号位 + 11 位阶码 + 52 位尾数</li>\n</ol>\n<p>规格化数：</p>\n<h2 id=\"重点习题\"><a href=\"#重点习题\" class=\"headerlink\" title=\"重点习题\"></a>重点习题</h2><ul>\n<li>2 进制，16 进制，10 进制之间的转化</li>\n<li>大端法和小端法对同一个数值的不同存储方式</li>\n<li>整数和浮点数表示的重合部分</li>\n<li>布尔代数和位运算</li>\n<li>位向量掩码</li>\n<li>布尔运算之间的组合（or,and,xor,not）</li>\n<li>逻辑运算</li>\n<li>使用位级运算和逻辑运算实现<code>^</code></li>\n<li>移位运算的计算</li>\n<li>同样位表示的无符号和补码值</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch1/",
            "url": "https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/CSAPP%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Ch1/",
            "title": "CSAPP Chapter 1 - 计算机系统漫游",
            "date_published": "2024-02-29T03:06:06.000Z",
            "content_html": "<p><code>CSAPP</code>的全称是<code>Computer Systems: A Programmer&#39;s Perspective</code>，中文翻译为<code>《深入理解计算机系统》</code>。这本书以<code>hello world</code>程序的运行贯穿始终，可以作为应用级别程序员一窥底层概貌的显微镜，也可以作为系统方向研究者的研究的方向概览。下面我们从第一章出发，进入计算机系统的世界。</p>\n<h2 id=\"信息-位-上下文\"><a href=\"#信息-位-上下文\" class=\"headerlink\" title=\"信息 &#x3D; 位 + 上下文\"></a>信息 &#x3D; 位 + 上下文</h2><ol>\n<li>计算机系统 &#x3D; 硬件 + 系统软件</li>\n<li>hello 从源程序开始 -&gt; 所有信息都用位表示 -&gt; 8 个位一组 -&gt; 字节 —&gt; ASCII 标准编码字节 —&gt; 文本字符 -&gt; 文本文件</li>\n<li>其他 -&gt; 二进制文件</li>\n<li>数据都是比特位，区别在于上下文如何解释他们</li>\n</ol>\n<blockquote>\n<p>C 语言的起源：作为用于 Unix 操作系统的语言被开发</p>\n</blockquote>\n<h2 id=\"程序与编译系统\"><a href=\"#程序与编译系统\" class=\"headerlink\" title=\"程序与编译系统\"></a>程序与编译系统</h2><p>编译过程：</p>\n<ol>\n<li><code>预处理器(cpp)</code>修改原始 <code>hello.c</code>程序，生成<code>hello.i</code>文件</li>\n<li><code>编译器(ccl)</code>将其翻译为机器语言指令，生成<code>hello.s</code>文件</li>\n<li><code>汇编器(as)</code>将其翻译为二进制目标文件(可重定位目标程序)，生成<code>hello.o</code>文件</li>\n<li><code>链接器(ld)</code>将其与其他预编译好的二进制目标文件链接起来，生成二进制可执行文件，生成<code>hello</code>文件</li>\n</ol>\n<blockquote>\n<p>什么是可重定位目标程序？</p>\n<p>GNU 项目 &amp; 自由软件概念 &amp; 开源运动（环境为 GNU 环境，内核为 Linux 内核）</p>\n</blockquote>\n<p>了解编译器工作过程的好处：</p>\n<ol>\n<li>优化程序性能</li>\n<li>理解链接时出现的错误</li>\n<li>避免安全漏洞</li>\n</ol>\n<h2 id=\"处理器-内存中机器指令\"><a href=\"#处理器-内存中机器指令\" class=\"headerlink\" title=\"处理器 &amp; 内存中机器指令\"></a>处理器 &amp; 内存中机器指令</h2><p>此时<code>hello</code>已经被编译成可执行文件并存储在磁盘上。</p>\n<h3 id=\"硬件组成\"><a href=\"#硬件组成\" class=\"headerlink\" title=\"硬件组成\"></a>硬件组成</h3><ol>\n<li>总线：传输定长字节块，称为字（各系统不一样大）</li>\n<li>I&#x2F;O 设备：键盘、鼠标、显示器、磁盘驱动器等。每个 I&#x2F;O 设备通过一个控制器或适配器与 I&#x2F;O 总线相连。其区别主要在于其封装方式。</li>\n<li>主存：临时存储设备，在处理器执行程序时，用来存放程序和程序处理的数据，由一组动态随机存储器（DRAM）芯片构成。从逻辑上来说，存储器是一个线性的字节数组，每个字节都有唯一的地址（数组索引）。</li>\n<li>处理器：是解释或执行存储在主存中引擎的指令。下一条要执行的指令的地址存储在 PC 中。CPU 中还包含一组寄存器。CPU 的设计根据指令集架构而不同。微体系结构描述的就是这个处理器是如何实现的。</li>\n</ol>\n<h3 id=\"hello-程序运行\"><a href=\"#hello-程序运行\" class=\"headerlink\" title=\"hello 程序运行\"></a>hello 程序运行</h3><p>假设我们在<code>shell</code>中输入以下内容：</p>\n<pre><code class=\"bash\">./hello\n</code></pre>\n<p>其运行的过程如下：</p>\n<ol>\n<li>shell 程序将输入字符串<code>./hello</code>逐一读入寄存器（通过 I&#x2F;O 桥和总线接口）</li>\n<li>将其转储到内存中（通过总线接口和 I&#x2F;O 桥）</li>\n<li>shell 程序从磁盘中加载可执行的<code>hello</code>可执行文件，将其从磁盘通过 I&#x2F;O 桥复制到主存（DMA 技术，如果没有 DMA 技术，还需要通过处理器才能到达主存）</li>\n<li>处理器执行<code>hello</code>程序中的指令</li>\n<li><code>hello world</code>字符串：主存 —&gt; I&#x2F;O 桥 -&gt; 总线接口 —&gt; 寄存器文件 -&gt; 总线接口 -&gt; I&#x2F;O 桥 -&gt; 图形适配器 —&gt; 显示器</li>\n</ol>\n<h2 id=\"高速缓存-存储设备层次结构\"><a href=\"#高速缓存-存储设备层次结构\" class=\"headerlink\" title=\"高速缓存 &amp; 存储设备层次结构\"></a>高速缓存 &amp; 存储设备层次结构</h2><p>高速缓存：较大的存储设备运行慢，造价低。而近年来处理器和主存之间的速度差距还在增大。因此，高速缓冲存储器(cache)的目的是尽量减少处理器和主存之间差异带来的速度差距。其采用更小更快的存储设备，作为暂时的存储区域。其使用静态随机访问存储器（SRAM）技术实现。</p>\n<blockquote>\n<p>核心：高速缓存的局部性原理</p>\n</blockquote>\n<p>存储设备层次结构：在处理器和较大较慢的设备之间插入一个更小更快的存储设备，上一层次设备作为第一层存储器的高速缓存。</p>\n<h2 id=\"操作系统资源管理-抽象\"><a href=\"#操作系统资源管理-抽象\" class=\"headerlink\" title=\"操作系统资源管理 &amp; 抽象\"></a>操作系统资源管理 &amp; 抽象</h2><p>操作系统：应用程序和硬件之间插入的一层软件。</p>\n<p>其几个基本功能包括：</p>\n<ol>\n<li>防止硬件被失控的应用程序滥用</li>\n<li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备（利用抽象）<ol>\n<li>文件: I&#x2F;O 设备抽象</li>\n<li>虚拟内存：主存 + 磁盘 I&#x2F;O 设备抽象</li>\n<li>进程：对处理器、主存和 I&#x2F;O 设备抽象</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>Unix、POSIX 和标准 Unix 规范：</p>\n<p>时期 1：OS&#x2F;360 + Multics<br>时期 2：Unix（包含层次文件系统、作为用户级进程的 shell 概念）<br>时期 3：Unix 4.xBSD(增加了虚拟内存和 Internet 协议) + System V Unix + Solaris<br>时期 4：IEEE 标准化 Unix 开发，将该标准命名为 POSIX 标准</p>\n</blockquote>\n<h3 id=\"进程-线程\"><a href=\"#进程-线程\" class=\"headerlink\" title=\"进程 &amp; 线程\"></a>进程 &amp; 线程</h3><h4 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h4><p>进程是操作系统对一个正在运行的程序的一种抽象，在这个系统中上可同时运行多个进程，而每个进程都好像在独自的使用硬件。并发运行时，是一个进程的指令与另一个进程的指令时间交错执行的。这是通过处理器在进程间切换实现的，该机制由操作系统实现，称之为上下文切换。上下文是指进程运行所需的所有状态信息，包括 PC、寄存器文件当前值、主存的内容。一般单处理器一次只能执行一个进程的代码，当它需要交错执行多个指令时，需要执行上下文切换，其步骤包括：</p>\n<ol>\n<li>保存当前进程的上下文</li>\n<li>恢复新进程的上下文</li>\n<li>将控制权转移到新进程（系统调用）</li>\n<li>新进程终止后，操作系统恢复旧进程上下文</li>\n<li>控制权转移回旧进程（系统调用）</li>\n</ol>\n<p>控制权的转移通过系统调用实现，它使得 CPU 的状态从用户态变为内核态。操作系统内核是系统管理全部进程所用代码和数据结构的集合。</p>\n<p>在单核处理器中，一个 CPU 可以并发的执行多个进程。而在多核 CPU 中，多个处理器可以同时执行多个进程。</p>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><p>一个进程可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和数据区域，但是不一样的是他们拥有各自独立的栈空间。</p>\n<h3 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h3><p>虚拟内存为每个进程提供了一种假象，就是她们都单独的占有主存，每个进程看到的内存都是一致的，我们将其称之为虚拟地址空间。虚拟地址空间从低字节到高字节可划分为以下几个段：</p>\n<ol>\n<li>只读的程序代码和数据</li>\n<li>可读写的程序数据</li>\n<li>堆（malloc）分配</li>\n<li>共享库内存映射区域</li>\n<li>用户栈</li>\n<li>内核虚拟内存（用户代码不可见）</li>\n</ol>\n<h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>文件可以作为 I&#x2F;O 设备的抽象，I&#x2F;O 设备具有各种不同的特性，但是通过将其抽象为文件，我们可以通过一组统一的接口来访问他们。</p>\n<h2 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h2><p>网络也可以视为一个 I&#x2F;O 设备，我们从文件中读写数据的方法很多都可以应用在网络设备的读写上。</p>\n<h2 id=\"重要主题\"><a href=\"#重要主题\" class=\"headerlink\" title=\"重要主题\"></a>重要主题</h2><blockquote>\n<p>系统是软硬件的有机结合体！</p>\n</blockquote>\n<h3 id=\"Amdahl-定律\"><a href=\"#Amdahl-定律\" class=\"headerlink\" title=\"Amdahl 定律\"></a>Amdahl 定律</h3><p>当我们对系统的某个部分进行加速时，其对系统整体的性能的影响取决于该部分的重要性和加速程度。假设系统执行某应用程序所需时间为$T_{old}$，某部分执行时间与该时间的比例为$\\alpha$，而该部分性能提升比例为$k$。即该部分初始所需时间为$\\alpha<em>T_{old}$,现在为$\\frac{\\alpha</em>T_{old}}{k}$，那么总的执行时间应该为：</p>\n<p>$$<br>    T_{new} &#x3D; (1-\\alpha)T_{old}+\\frac{\\alpha*T_{old}}{k}<br>$$</p>\n<p>加速比 S 为</p>\n<p>$$<br>    S &#x3D; \\frac{T_{old}}{T_{new}} &#x3D; \\frac{1}{(1-\\alpha)+\\frac{\\alpha}{k}}<br>$$</p>\n<p>其结论为：要想显著加速整个系统，必须提升全系统中相当大的部分的速度。此外，当 k 趋近于$\\infin$时，最后的加速比等于$\\frac{1}{1-\\alpha}$</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p>我们的优化体现在，希望：</p>\n<ol>\n<li>计算机做的更多</li>\n<li>计算机运行更快</li>\n</ol>\n<h4 id=\"线程级并发\"><a href=\"#线程级并发\" class=\"headerlink\" title=\"线程级并发\"></a>线程级并发</h4><ol>\n<li>使用进程：有多个程序执行</li>\n<li>使用线程：一个进程中执行多个控制流</li>\n</ol>\n<h4 id=\"指令级并行\"><a href=\"#指令级并行\" class=\"headerlink\" title=\"指令级并行\"></a>指令级并行</h4><p>处理器同时执行多条指令。</p>\n<ol>\n<li>流水线：可以用来处理一条指令的不同部分，以此达到同时执行多条指令的目的</li>\n<li>达到比一个周期一条指令更快的执行速率，称之为超标量</li>\n</ol>\n<h4 id=\"单指令、多数据并行\"><a href=\"#单指令、多数据并行\" class=\"headerlink\" title=\"单指令、多数据并行\"></a>单指令、多数据并行</h4><p>许多处理器拥有特殊硬件，允许一条指令产生多个可以并行执行的操作，这种方式称为单指令、多数据，即<code>SIMD并行</code>。例如浮点数加法指令。编译器有时会试图抓取 SIMD 并行性特征，也可以使用特殊向量数据类型编写程序。</p>\n<h3 id=\"重点习题\"><a href=\"#重点习题\" class=\"headerlink\" title=\"重点习题\"></a>重点习题</h3><ul>\n<li>Amdahl 定律计算</li>\n</ul>\n",
            "tags": []
        }
    ]
}