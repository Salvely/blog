{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"计算机科学\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950_Project/",
            "url": "https://salvely.github.io/blog/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950_Project/",
            "title": "Final Project: 多线程HTTP服务器 实现记录",
            "date_published": "2024-01-08T02:32:56.000Z",
            "content_html": "<h1 id=\"overview\"><a class=\"markdownIt-Anchor\" href=\"#overview\">#</a> Overview</h1>\n<p>多线程网络服务器大致功能：简单的搜索和文件浏览</p>\n<ul>\n<li>Part A: 实现服务器读取文件，统计文件中的单词个数</li>\n<li>Part B: 实现网络连接和 HTTP 请求响应</li>\n<li>Part C: 将 A 和 B 两部分结合起来</li>\n</ul>\n<h2 id=\"part-a\"><a class=\"markdownIt-Anchor\" href=\"#part-a\">#</a> Part A</h2>\n<h3 id=\"filereadercc\"><a class=\"markdownIt-Anchor\" href=\"#filereadercc\">#</a>  <code>FileReader.cc</code></h3>\n<ul>\n<li>简单的文件阅读器</li>\n<li>在构建时读入文件名， <code>read_file</code>  将整个文件读入一个 <code>string</code></li>\n<li>可以使用 <code>POSIX</code> , C 接口或者 C++ 文件流实现</li>\n</ul>\n<h3 id=\"wordindexh-wordindexcc\"><a class=\"markdownIt-Anchor\" href=\"#wordindexh-wordindexcc\">#</a>  <code>WordIndex.h &amp; WordIndex.cc</code></h3>\n<p>实现一个数据结构，用于存储各个文件中的单词及其出现次数</p>\n<h3 id=\"crawlfiletreecc\"><a class=\"markdownIt-Anchor\" href=\"#crawlfiletreecc\">#</a>  <code>CrawlFileTree.cc</code></h3>\n<p>实现 <code>HandleFile</code>  函数，其获取一个文件名和一个 <code>WordIndex</code> ，这个函数读取对应文件，并且将每个单词及其对应的个数存储在 <code>WordIndex</code>  中</p>\n<h2 id=\"part-b\"><a class=\"markdownIt-Anchor\" href=\"#part-b\">#</a> Part B</h2>\n<h3 id=\"serversocketcc\"><a class=\"markdownIt-Anchor\" href=\"#serversocketcc\">#</a>  <code>ServerSocket.cc</code></h3>\n<p>实现一个类，这个类包含：</p>\n<ul>\n<li>创建一个服务器端的监听 socket</li>\n<li>从客户端接受新的连接请求</li>\n<li><code>ServerSocket.h</code>  中提供了头文件，需要在 <code>ServerSocket.cc</code>  中实现</li>\n</ul>\n<h3 id=\"httpconnectioncc\"><a class=\"markdownIt-Anchor\" href=\"#httpconnectioncc\">#</a>  <code>HttpConnection.cc</code></h3>\n<ul>\n<li><code>HttpConnection</code>  处理 <code>HTTP</code>  连接请求，将该请求转化为一个对象，并且负责将响应写回去</li>\n<li>该函数中主要实现 <code>HTTP</code>  请求的读取和解析 (string 操作)</li>\n</ul>\n<h3 id=\"httputilscc\"><a class=\"markdownIt-Anchor\" href=\"#httputilscc\">#</a>  <code>HttpUtils.cc</code></h3>\n<p>主要负责一些其他功能，尤其是安全方面：</p>\n<ul>\n<li><code>escape_html</code>\n<ul>\n<li>用于防止 <code>cross-site scripting</code> ，参考<span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3NjcmlwdGluZw==\"> Cross-site scripting</span></li>\n</ul>\n</li>\n<li><code>in_path_safe</code>\n<ul>\n<li>保证使用该服务器的人只能获取到对应目录下的文件，其他目录下对他不开放权限</li>\n<li>否则可能会有攻击者使用 <code>directory traverse attack</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"part-c\"><a class=\"markdownIt-Anchor\" href=\"#part-c\">#</a> Part C</h2>\n<ul>\n<li><code>HttpServer_ThrFn</code>  函数实现\n<ul>\n<li>每个线程可以获取到一个连接</li>\n</ul>\n</li>\n<li>两个 <code>helper_function</code>\n<ul>\n<li>分别处理两种类型的请求\n<ul>\n<li>对查看文件的请求 ( <code>ProcessFileRequest</code> )</li>\n<li>执行查询的请求 ( <code>ProcessQueryRequest</code> )</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用 <code>htttp</code>  测试 <code>Http Server</code> 。输入命令 <code>./httpd 3000 ./test_tree/</code> ，在显示 <code>accepting connections...</code>  后，点击下方的 <code>Open Server on port 3000</code></li>\n</ul>\n<h2 id=\"实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#实现步骤\">#</a> 实现步骤</h2>\n<ol>\n<li><code>FileReader::read_file</code></li>\n<li><code>WordIndex.cc &amp; WordIndex.h</code></li>\n<li><code>CrawlFileTree.cc handle_file函数</code></li>\n<li><code>ServerSocket.cc</code></li>\n<li><code>get_request &amp; parse_request from HttpConnection.cc</code></li>\n<li><code>write_response in HttpConnection.cc</code></li>\n<li><code>HttpUtils.cc</code>  两个函数实现</li>\n<li>test_suite 通过</li>\n<li>valgrind 通过</li>\n<li><code>HttpServer.cc</code>  实现并测试</li>\n</ol>\n<h2 id=\"实现提示\"><a class=\"markdownIt-Anchor\" href=\"#实现提示\">#</a> 实现提示</h2>\n<ul>\n<li><code>boost</code>  库中的 <code>split()/trim()/replace_all()</code>  函数可以使用，使用 <code>split()</code>  时可以使用 <code>is_any_of()/isalpha()/</code></li>\n<li>实现 <code>ServerSocket.cc</code>  时，留意 <code>server_accept_rw_close</code></li>\n<li>有个小函数可以让 <code>is_path_safe</code>  的实现更简单 (留意 <code>HttpUtils.cc</code>  中的注释，自己上网学习它的用法)</li>\n<li><code>FileReader</code>  需要处理只含有 0 个字节的 <code>binary_files</code> ，这里可以使用传入 2 个参数的 <code>string</code>  构造函数</li>\n</ul>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./test_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>valgrind ./test_suite</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950_HW4/",
            "url": "https://salvely.github.io/blog/2024/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950_HW4/",
            "title": "HW4: Shell & Pipe 实现记录",
            "date_published": "2024-01-06T06:49:15.000Z",
            "content_html": "<h1 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\">#</a> 要求</h1>\n<p>实现一个只含有基本命令和 Pipe (不含重定向符及其他符号) 的 Shell。</p>\n<h1 id=\"指南\"><a class=\"markdownIt-Anchor\" href=\"#指南\">#</a> 指南</h1>\n<h2 id=\"相关文件\"><a class=\"markdownIt-Anchor\" href=\"#相关文件\">#</a> 相关文件</h2>\n<ul>\n<li><code>pipe_shell.cc</code> : 在其中实现 shell 程序</li>\n<li><code>sh.cc</code> : 传入一个附带参数的程序， <code>fork()</code>  子程序然后 <code>execvp()</code>  去执行它</li>\n<li><code>stdin_echo.cc</code> : 从 <code>stdin</code>  中读取，输出读取的内容，直到获取 <code>EOF</code> ，然后停止</li>\n<li><code>example_tests/</code> : 其中含有示例输入和对应输出</li>\n<li><code>solution_binaries/</code> : 官方答案执行码</li>\n</ul>\n<h2 id=\"具体要求\"><a class=\"markdownIt-Anchor\" href=\"#具体要求\">#</a> 具体要求</h2>\n<ul>\n<li>程序一次从标准输入读取一行命令</li>\n<li>一行命令包括命令本身和连接他们的 Pipe</li>\n<li>不停读入直到读入 <code>EOF</code>  / 用户输入 <code>exit</code></li>\n<li>在当前命令完成之后才能运行下一条命令</li>\n<li>命令可以是绝对路径或者是程序名（用 <code>execvp</code>  执行）</li>\n</ul>\n<h2 id=\"建议方法\"><a class=\"markdownIt-Anchor\" href=\"#建议方法\">#</a> 建议方法</h2>\n<ul>\n<li>通读该指南和提供的源代码，搞清楚作业是在做什么</li>\n<li>执行一下 <code>./solution_binaries/pipe_shell</code> ，看看结果长什么样</li>\n<li>开始实现 <code>pipe_shell.cc</code> ，从循环提示用户输入开始，并且打印 <code>$</code>  提示符，直到无输入或者遇到 <code>EOF</code>  / 输入 <code>exit</code></li>\n<li>实现 <code>fork()</code> ， <code>pipe</code>  连接和命令的执行 ( <code>execvp</code>  或者直接运行命令路径)</li>\n</ul>\n<h2 id=\"实现提示\"><a class=\"markdownIt-Anchor\" href=\"#实现提示\">#</a> 实现提示</h2>\n<ul>\n<li>可以使用 <code>boost</code>  库中的 <code>split()</code>  和 <code>trim()</code>  方法，</li>\n<li>使用 <code>execvp(), fork(), pipe(), waitpid()</code>  等函数</li>\n<li>注意不同情形：无管道，一个管道，多于一个管道</li>\n<li>两种方法\n<ul>\n<li>使用一个 pipe 数组</li>\n<li>每次 <code>fork()</code>  之前创建一个 <code>pipe</code></li>\n</ul>\n</li>\n<li>每个子进程只需要两个端口，从上一个进程送来的读端口，和给下一个子进程的写端口</li>\n<li>子进程用完端口之后关闭端口，否则程序无法正常退出</li>\n</ul>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h2>\n<ul>\n<li>普通测试:  <code>make &amp;&amp; ./pipe_shell</code></li>\n<li>内存泄漏测试:  <code>valgrind --leak-check=full ./pipe_shell</code></li>\n<li>比较自己的程序和 <code>solution_binaries/pipe_shell</code>  的结果：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ./tests/simple_input.txt <span class=\"token operator\">|</span> ./pipe_shell <span class=\"token operator\">&amp;></span> my_output.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">diff</span> my_output.txt ./tests/simple_output.txt</pre></td></tr></table></figure><h2 id=\"pipe_shellcc\"><a class=\"markdownIt-Anchor\" href=\"#pipe_shellcc\">#</a>  <code>pipe_shell.cc</code></h2>\n<blockquote>\n<p>实现核心： <code>pipe</code>  的内存在操作系统内核中。在每次循环前创建一个 <code>pipe</code> ，然后 <code>fork()</code>  一个子进程读取上一个 <code>pipe</code>  的内容，写入当前这个 <code>pipe</code> 。使用完毕后关闭这个 <code>pipe</code>  的写端，保留这个 <code>pipe</code>  的读端口。进而让下一次 <code>dup2</code>  导入时使用，使用完后可关闭该 <code>pipe</code>  的读端口。 <code>pipe</code>  不会像本地变量那样随着循环的进行而消失，只要保存一下读 / 写端口，在下一轮循环中就可以正常的进行读写。<br>\n此外，我们使用 <code>dup2</code>  来进行端口的重定向。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span>    <span class=\"token comment\">// for fork()</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span> <span class=\"token comment\">// for pid_t</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span>  <span class=\"token comment\">// for wait(), waitpid(), etc.</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span> <span class=\"token comment\">// for exit(), EXIT_SUCCESS, and EXIT_FAILURE</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/algorithm/string.hpp></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUF_SIZ</span> <span class=\"token expression\"><span class=\"token number\">1000</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"$ \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> in_fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// input fd</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// split the command into multiple parts</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>algorithm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">is_any_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>token_compress_on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> command_num <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>command <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// initialize a pipe</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipe creation failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// prepare to run the current command</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// get the current command</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>algorithm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// split the command into an array of args</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>algorithm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">is_any_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>token_compress_on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">int</span> argc <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"We need a command!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// run the current command</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            pid_t child <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token comment\">// setup the file name and input arguments</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>argc <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    string args_str <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args_str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                argv<span class=\"token punctuation\">[</span>argc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>in_fd <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token comment\">// write the pipe value into stdin</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>in_fd<span class=\"token punctuation\">,</span> STDIN_FILENO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>in_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> command_num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token comment\">// write stdout to the pipe</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> STDOUT_FILENO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token comment\">// use execvp() to run the commmand</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token function\">execvp</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// exec didn't work, so an error must have been occurred</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> argv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">// wait for the child process to complete</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// close the current pipe write fd</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            in_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">// // read out the pipe</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// char buffer[BUF_SIZ];</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">// int count = read(in_fd, buffer, BUF_SIZ);</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// buffer[count] = '\\0';</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">// if (count > 0)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">//     fprintf(stdout, \"%s\", buffer);</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>in_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"$ \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950_HW3/",
            "url": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950_HW3/",
            "title": "HW3: LRU SimpleVM 实现记录",
            "date_published": "2024-01-04T05:27:01.000Z",
            "content_html": "<h1 id=\"overview\"><a class=\"markdownIt-Anchor\" href=\"#overview\">#</a> Overview</h1>\n<p>本作业要求实现:</p>\n<ul>\n<li>Page 对象：\n<ul>\n<li>若 Page 不在 memory 中，那么它的数据被存储在磁盘上的 <code>swap file</code>  部分。在 <code>swap file</code>  中，每一页都有对应的顺序存储的数据。</li>\n<li>可以使用 C++  <code>fstream</code>  类进行 I/O 读写。尤其是 <code>read()</code>  和 <code>write()</code>  方法。</li>\n</ul>\n</li>\n<li>PageTable 对象\n<ul>\n<li>包含多个 page 以及 <code>swap file</code></li>\n<li>这里主要要求实现 LRU 算法</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"相关文件\"><a class=\"markdownIt-Anchor\" href=\"#相关文件\">#</a> 相关文件</h1>\n<h2 id=\"page\"><a class=\"markdownIt-Anchor\" href=\"#page\">#</a> Page</h2>\n<ul>\n<li><code>Page.h</code></li>\n<li><code>Page.cc</code></li>\n<li><code>PageTemplates.cc</code></li>\n</ul>\n<h2 id=\"pagetable\"><a class=\"markdownIt-Anchor\" href=\"#pagetable\">#</a> PageTable</h2>\n<ul>\n<li><code>PageTable.h</code></li>\n<li><code>PageTable.cc</code></li>\n</ul>\n<h2 id=\"testing\"><a class=\"markdownIt-Anchor\" href=\"#testing\">#</a> Testing</h2>\n<ul>\n<li><code>test_page.cc</code></li>\n<li><code>test_pagetable.cc</code></li>\n</ul>\n<h1 id=\"实现提示\"><a class=\"markdownIt-Anchor\" href=\"#实现提示\">#</a> 实现提示</h1>\n<ul>\n<li>map, unordered_map, list, vector 结构都很有用</li>\n<li><code>fstream</code>  中的 <code>read()</code>  和 <code>write()</code>  很有用</li>\n<li>需要将 <code>uint8_t</code>  切换到 <code>char</code>  类型来使用 <code>fstream</code></li>\n<li>利用初始化列表来初始化引用类型</li>\n</ul>\n<h1 id=\"page实现\"><a class=\"markdownIt-Anchor\" href=\"#page实现\">#</a> Page 实现</h1>\n<h2 id=\"page-源码分析\"><a class=\"markdownIt-Anchor\" href=\"#page-源码分析\">#</a> Page 源码分析</h2>\n<p><code>simplevm namespace</code>  中存在一个类 <code>Page</code> ，此外还有一个 <code>uint32_t</code>  类型 ( <code>pno_t</code>  类型) 的变量，用来表示页号。 <code>Page</code>  页的解释如下:</p>\n<ul>\n<li>页对象存在 -&gt; 页被导入到 physical memory-&gt; 创建一个 <code>page</code> ，并且从 <code>swap_file</code>  中读 <code>page</code>  数据。页的数据从 <code>virtual_pno * Page::PAGE_SIZE</code>  开始</li>\n<li>页对象不存在 -&gt; 数据存储在 <code>swap_file</code>  中</li>\n<li>用户可以\n<ul>\n<li>获取数据</li>\n<li>存储数据</li>\n<li>将数据刷新到 <code>swap file</code>  中（多余的无法放入 physical memory 的虚拟内存所存储的地方）</li>\n</ul>\n</li>\n</ul>\n<p><code>Page</code>  类中包含如下 <code>public</code>  方法:</p>\n<ul>\n<li><code>Page(fstream&amp; swap_file, pno_t virtual_pno);</code>\n<ul>\n<li>构造函数，传入该 <code>page</code>  对应的 <code>swap_file</code>  和页号</li>\n<li>我们从 <code>swap_file</code>  读入页数据，刷新时将页数据写入 <code>swap_file</code></li>\n<li>页号规定了我们在 <code>swap_file</code>  的哪里写入数据</li>\n</ul>\n</li>\n<li><code>Page(const Page&amp; other);</code>\n<ul>\n<li>利用一个页来复制构造另一个页，两个页具有相同的页号和 <code>swap_file</code>  地址，但是数据是复制了的（不是引用）</li>\n</ul>\n</li>\n<li><code>~Page()</code>\n<ul>\n<li>清理声明的变量</li>\n<li>如果当前数据为 dirty 状态，那么将其刷新到对应的 <code>swap_file</code></li>\n</ul>\n</li>\n<li><code>Page&amp; operator=(const Page&amp; rhs)</code>\n<ul>\n<li>赋值函数，同复制构造函数，两个 <code>Page</code>  具有相同的 <code>swap_file</code>  和页号，但是 <code>data</code>  是被复制了的</li>\n</ul>\n</li>\n<li><code>template &lt;typename T&gt; T access(uint32_t virtual_address);</code>\n<ul>\n<li>获取该页面的值（需要考虑错误情况）</li>\n</ul>\n</li>\n<li><code>T store(uint32_t virtual address, const T&amp; to_write)</code>\n<ul>\n<li>存储值到该页面中去</li>\n</ul>\n</li>\n<li><code>bool operator&lt;(const Page&amp; rhs);</code>\n<ul>\n<li>比较两个页面顺序</li>\n</ul>\n</li>\n<li><code>pno_t pno();</code>\n<ul>\n<li>获取该页面的页号</li>\n</ul>\n</li>\n<li><code>bool dirty();</code>\n<ul>\n<li>该 page 是否为 dirty 状态 (如果有人在 flush 之后，向该 page 写过值就是 dirty)</li>\n</ul>\n</li>\n<li><code>void flush();</code>\n<ul>\n<li>如果该 page 是 dirty 状态，就把内容刷新到 <code>swap_file</code></li>\n</ul>\n</li>\n<li>变量： <code>static constexpr size_t PAGE_SIZE = 4096U;</code>\n<ul>\n<li>该 page 的大小</li>\n</ul>\n</li>\n</ul>\n<p>Page 中还包括如下 <code>private</code>  变量:</p>\n<ul>\n<li><code>fstream&amp; swap_file_;</code>\n<ul>\n<li>注意这里是个引用，一个 page 没有对 <code>swap_file</code>  的所有权，只能 access 到它，所以这里 <code>swap_file</code>  是个引用</li>\n</ul>\n</li>\n<li><code>pno_t virtual_pno_;</code>\n<ul>\n<li>该 page 的页号</li>\n</ul>\n</li>\n<li><code>uint8_t *bytes_;</code>\n<ul>\n<li>该 page 的字节内容</li>\n</ul>\n</li>\n<li><code>bool dirty_;</code>\n<ul>\n<li>该 page 是否在 flush 后被写入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"page-设计\"><a class=\"markdownIt-Anchor\" href=\"#page-设计\">#</a> Page 设计</h2>\n<h2 id=\"pagetemplatescc实现\"><a class=\"markdownIt-Anchor\" href=\"#pagetemplatescc实现\">#</a>  <code>PageTemplates.cc</code>  实现</h2>\n<p><code>PageTemplates.cc</code>  在 <code>simplevm namespace</code>  中。源码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// TODO: implement all template member functions for Page</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// This function allows users to read various data types</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// from the page. Trying to read a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// anything being read fits in on the page we are reading</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">//   - the data of type T that was read from the page</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  T <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>virtual_address <span class=\"token operator\">/</span> PAGE_SIZE <span class=\"token operator\">!=</span> virtual_pno_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    virtual_address <span class=\"token operator\">=</span> virtual_address <span class=\"token operator\">%</span> PAGE_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    T<span class=\"token operator\">*</span> address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bytes_ <span class=\"token operator\">+</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// This function allows users to write various data types</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// to the page. Trying to write a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// anything being written fits on the current page</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//   - to_write: the data of type T to write to the page</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// Returns: nothing</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> to_write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>virtual_address <span class=\"token operator\">/</span> PAGE_SIZE <span class=\"token operator\">!=</span> virtual_pno_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    virtual_address <span class=\"token operator\">=</span> virtual_address <span class=\"token operator\">%</span> PAGE_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    T<span class=\"token operator\">*</span> address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bytes_ <span class=\"token operator\">+</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token operator\">*</span>address <span class=\"token operator\">=</span> to_write<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pageh定义\"><a class=\"markdownIt-Anchor\" href=\"#pageh定义\">#</a>  <code>Page.h</code>  定义</h2>\n<p><code>Page.h</code>  在 <code>simplevm namespace</code>  中。源码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">PAGE_H_</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PAGE_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>fstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// defines the type pno_t, which is the type</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// that represents a page number</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">uint32_t</span> pno_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// A Page is a class that represents a page of memory</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// in our simple virtual memory model.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// If a page object exists, then we say that the page is loaded</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// into physical memory. When the page object doesn't exist, then its</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// data is stored in the swap_file. When we load in a page to</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// \"physical memory\", we are creating the page and we read the page's data</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// from the swap file. A page's data in the swap file starts at</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// virtual_pno * Page::PAGE_SIZE</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// This Class manages a page's worth of data</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// Users can access or store data, sa well as flush the data in the</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// page to the specified swap file. A swap file is where exceess virtual</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// memory is stored when it can't fit in physical memory.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// Constructs a new Page object associated</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// with a swap_file and a virtual page number.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// The swap file is where we will load in the page</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// contents and flush the page contents. The virtual</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// page number decides where in that file we read</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// and write this page.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// Passing in an invalid page number is undefined behaviour</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// Note that a Page does not have ownership</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">// of the swap_file_, just access to it.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//  - swap_file the swap_file associated with the page</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//  - the virtual page number of our new page</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>fstream<span class=\"token operator\">&amp;</span> swap_file<span class=\"token punctuation\">,</span> pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// Constructs a new Page object that is a copy of</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// data. This cctor should only really be used</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">//   - other: the page we are copying</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">// Destructor for the page object</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">// Cleans up any dynamically allocated data or</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// otherwise allocated resources AND should flush</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">// its contents if the page is dirty at time of</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">// destruction.</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// Set the current Page object so that is a copy of</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">// data. This op= should only really be used</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">// You can assume each page has the same swap_file.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the page we are copying</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">// This function is not required, but you may add it</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token comment\">// if it is needed for some of the STL containers</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token comment\">// you use in PageTable</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token comment\">// Determines if this page should go before another page if they</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token comment\">// were in sorted order.</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the Page we are comparing this to</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">// Returns: true iff this page would show up before the other</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">// page in sorted order. False otherwise.</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token comment\">// This function allows users to read various data types</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// from the page. Trying to read a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// anything being read fits in on the page we are reading</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">//   - the data of type T that was read from the page</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  T <span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\">// This function allows users to write various data types</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">// to the page. Trying to write a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">// anything being written fits on the current page</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token comment\">//   - to_write: the data of type T to write to the page</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token comment\">// Returns: nothing</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> to_write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">// Returns the virtual page number of this page</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token comment\">// Returns: this page's virtual page number</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  pno_t <span class=\"token function\">pno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token comment\">// Returns whether or not a page is dirty</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token comment\">// A page is \"dirty\" if someone has written to the data managed</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token comment\">// by the page since the last time the page was flush()'d.</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  <span class=\"token comment\">// Returns: Whether this page is dirty or not</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token comment\">// Flushes the page to the swap file if it is dirty.</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token comment\">// Flushing a page to the swap file involves writing</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token comment\">// the page at the the spot correspoding to its page number</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  <span class=\"token comment\">// in the swap_file. For a description of what it means</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token comment\">// for a page to be dirty, see the dirty() member function.</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token comment\">// The page should not be written if it is not dirty.</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token comment\">// The amount of memory a page represents</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> size_t PAGE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">4096U</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token comment\">// The file we will be reading/writing to</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  <span class=\"token comment\">// Note how this is a reference</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  <span class=\"token comment\">// also note that a Page does not have ownership</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token comment\">// of the swap_file_, just access to it.</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  fstream<span class=\"token operator\">&amp;</span> swap_file_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token comment\">// the virtual page number</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  pno_t virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  <span class=\"token comment\">// The bytes of the page. One byte is 8 bits</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  <span class=\"token comment\">// so we use 8-bit unsigned integers.</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  <span class=\"token comment\">// You can also assume that a 'char' is one byte big</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>bytes_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token comment\">// Whether the page is dirty or not</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token keyword\">bool</span> dirty_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token comment\">// since we have template code</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./PageTemplates.cc\"</span></span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  <span class=\"token comment\">// PAGE_H_</span></span></pre></td></tr></table></figure><h2 id=\"pagecc实现\"><a class=\"markdownIt-Anchor\" href=\"#pagecc实现\">#</a>  <code>Page.cc</code>  实现</h2>\n<p><code>Page.cc</code>  在 <code>simplevm namespace</code>  中。源码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./Page.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// TODO: implement all non template member functions for Page</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Constructs a new Page object associated</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// with a swap_file and a virtual page number.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// The swap file is where we will load in the page</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// contents and flush the page contents. The virtual</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// page number decides where in that file we read</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// and write this page.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// Passing in an invalid page number is undefined behaviour</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// Note that a Page does not have ownership</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// of the swap_file_, just access to it.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//  - swap_file the swap_file associated with the page</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">//  - the virtual page number of our new page</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>fstream<span class=\"token operator\">&amp;</span> swap_file<span class=\"token punctuation\">,</span> pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">swap_file_</span><span class=\"token punctuation\">(</span>swap_file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_ <span class=\"token operator\">=</span> virtual_pno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bytes_ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">[</span>PAGE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// seek the correct position</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span>virtual_pno_ <span class=\"token operator\">*</span> PAGE_SIZE<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// read from the swap file</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>bytes_<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swap_file_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap file read failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// Constructs a new Page object that is a copy of</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">// data. This cctor should only really be used</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">//   - other: the page we are copying</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">swap_file_</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>swap_file_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_ <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bytes_ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">[</span>PAGE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bytes_<span class=\"token punctuation\">,</span>other<span class=\"token punctuation\">.</span>bytes_<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>dirty_ <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>dirty_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// Destructor for the page object</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// Cleans up any dynamically allocated data or</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// otherwise allocated resources AND should flush</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">// its contents if the page is dirty at time of</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">// destruction.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dirty_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// Set the current Page object so that is a copy of</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">// data. This op= should only really be used</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">// You can assume each page has the same swap_file.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the page we are copying</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> Page<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">!=</span><span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// This function is not required, but you may add it</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">// if it is needed for some of the STL containers</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">// you use in PageTable</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">// Determines if this page should go before another page if they</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// were in sorted order.</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the Page we are comparing this to</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// Returns: true iff this page would show up before the other</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// page in sorted order. False otherwise.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token keyword\">bool</span> Page<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_ <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// Returns the virtual page number of this page</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">// Returns: this page's virtual page number</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  pno_t <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">// Returns whether or not a page is dirty</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// A page is \"dirty\" if someone has written to the data managed</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">// by the page since the last time the page was flush()'d.</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">// Returns: Whether this page is dirty or not</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>dirty_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token comment\">// Flushes the page to the swap file if it is dirty.</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token comment\">// Flushing a page to the swap file involves writing</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token comment\">// the page at the the spot correspoding to its page number</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token comment\">// in the swap_file. For a description of what it means</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token comment\">// for a page to be dirty, see the dirty() member function.</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\">// The page should not be written if it is not dirty.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">// seek the correct position</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span>virtual_pno_ <span class=\"token operator\">*</span> PAGE_SIZE<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token comment\">// write to the swap file</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>bytes_<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swap_file_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap file write failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pagetable实现\"><a class=\"markdownIt-Anchor\" href=\"#pagetable实现\">#</a> PageTable 实现</h1>\n<h2 id=\"pagetable-源码分析\"><a class=\"markdownIt-Anchor\" href=\"#pagetable-源码分析\">#</a> PageTable 源码分析</h2>\n<p>PageTable 的作用如下：</p>\n<ul>\n<li>管理一个进程的地址空间</li>\n<li>包括 <code>swap_file</code></li>\n<li>从 physical memory 中读取页</li>\n<li>选择页淘汰，进行页替换</li>\n</ul>\n<p><code>PageTable.cc</code>  中有如下一些方法：</p>\n<ul>\n<li><code>PageTable(std::string swap_file_name, size_t page_capacity);</code>\n<ul>\n<li>初始化页表，制定 <code>swap_file</code>  名称和页容量</li>\n<li>存储的页不可超过页容量</li>\n</ul>\n</li>\n<li><code>~PageTable();</code>\n<ul>\n<li>清理所有变量</li>\n<li>flush dirty pages</li>\n</ul>\n</li>\n<li><code>Page&amp; get_page(uint32_t virtual_address);</code>\n<ul>\n<li>返回一个虚拟地址对应的 page</li>\n<li>将该页导入 physical memory</li>\n<li>返回它</li>\n<li>有几种可能情况\n<ul>\n<li>该页在 Physical memory 中，返回对应的页的引用，并且将该页标记为最新（挪到 vector 最前）</li>\n<li>该页不在 physical memory 中，并且 physical memory 还没满。那么将其导入 physical memory，并且标记为最新（挪到 vector 最前），返回该页引用</li>\n<li>该页不在 Physical memory 中，并且 physical memory 已经满了，那么先执行淘汰算法，淘汰最老的页，将其写入 <code>swap_file</code> 。然后将该页从 <code>swap_file</code>  中导入进来，放在 vector 最前</li>\n</ul>\n</li>\n<li>注意：\n<ul>\n<li>virtual address != 页号，可能有多个 virtual address 对应同一个页号 (一页有 4096 个字节嘛)</li>\n<li>页的最新和最老完全取决于 <code>get_page</code>  函数的调用情况</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>size_t capacity();</code>\n<ul>\n<li>返回页容量</li>\n</ul>\n</li>\n<li><code>size_t loaded_pages();</code>\n<ul>\n<li>返回导入 physical memory 的页数目</li>\n</ul>\n</li>\n<li><code>bool page_available(pno_t virtual_pno);</code>\n<ul>\n<li>返回对应页是否存在 physical memory 中</li>\n</ul>\n</li>\n<li><code>void flush_all_pages();</code>\n<ul>\n<li>将所有页都刷新到 <code>swap_file</code>  中</li>\n</ul>\n</li>\n<li><code>void flush_page(pno_t virtual_pno);</code>\n<ul>\n<li>将对应的页刷新到 <code>swap_file</code>  中</li>\n</ul>\n</li>\n<li><code>void discard_page(pno_t virtual_pno);</code>\n<ul>\n<li>从页表中丢弃对应的页。如果该页不存在，则返回。否则，若该页为 dirty，则将该页数据写入 <code>swap_file</code> ，然后丢弃它</li>\n</ul>\n</li>\n<li><code>void evict_page();</code>\n<ul>\n<li>若没有 page 在页表中，则什么也不做。否则丢弃最老的一页（丢弃前记得将其写入 <code>swap_file</code> ）</li>\n</ul>\n</li>\n</ul>\n<p><code>PageTable.cc</code>  有两个 <code>private</code>  变量：</p>\n<ul>\n<li><code>fstream swap_file_</code> : 交换文件</li>\n<li><code>size_t capacity</code> : 页容量</li>\n<li><code>size_t page_num</code> : 当前已经导入 physical memory 的页数目</li>\n<li><code>std::vector&lt;Page*&gt; page_list</code> : 记录所有在 physical memory 中的页</li>\n<li><code>std::unordered_map&lt;pno_t,Page*&gt; mp</code> :</li>\n</ul>\n<h2 id=\"pagetableh设计\"><a class=\"markdownIt-Anchor\" href=\"#pagetableh设计\">#</a>  <code>PageTable.h</code>  设计</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">PAGE_TABLE_H_</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PAGE_TABLE_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// #include &lt;vector></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./Page.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>fstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// A PageTable manages a processes memeory for our simplified</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// virtual memory model. This involves managing a swap_file</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// which is where pages of data are stored when they aren't loaded</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// into physical memory. For our software model, we will say a page</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// is in \"physical memory\" if it is loaded into our memory space</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// (e.g. it is on the heap). Pages that aren't loaded in will have</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// their contents stored in the swap_file and will not have an</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// associated Page object (see Page.h). Our page table can only have</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// so many pages stored in memory at one time, which is specified</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// on PageTable Creation. We implement an LRU page replacement</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// policy to decide which pages to evict if we need to load a new page</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// and we already have reached our capacity on the numberof pages we can</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// hold.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// Users can get a page from the cache, flush pages to the swap_file,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// request any page is evicted, and specifically ask for a page to be evicted.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PageTable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// Constructs a new page table with the specified</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// swap file and the specified page capacity, which is</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// the number of pages that can be held in memory</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// at one time. There cannot be more than page_capacity</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">// number of pages loaded in at a time.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//   - swap_file_name: the name of the swap_file</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//   - page_capacity: the maximum number of pages that can be held</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">//     in memory at one time.</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string swap_file_name<span class=\"token punctuation\">,</span> size_t page_capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// Destructs the page table, freeing any allocated resources</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// and flushing any pages currently loaded into memory that</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// are dirty</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\">// Given a virtual address, gets the associated</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// page for that virtual address. This page will</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// be \"loaded\" into physical memory by the time it</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// is returned.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// There are three possiblities when a page is requested:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// 1. The page is currently in the \"loaded\" and in the cache.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">//    In this case, a reference to the page is returned and</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">//    and the page is marked as most recently used in the cache</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">// 2. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">//    has not reached its page capacity:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">//    In this case, the page is loaded from the swap file and added</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">//    to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 3. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">//    is at page capacity:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">//    The least recently used page in the cache is evicted from the</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\">//    cache. Afterwards the requested page is loaded from the swap file</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token comment\">//    and added to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// NOTE: What decides how recntly used a page was used is entirely</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// decided by how recntly it was returned by a call to get_page.</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: A virtual address that is associated</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">//     with a requested page. The virutal address is represented</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">//     as a unsigned 32 bit integer. NOTE: a virtual address</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">//     is NOT the same as a page number. Multiple virtual addresses</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">//     could be associated with the same page number.</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">//   - the requested page, which is loaded into the cache and</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">//     marked as the most recently used page</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> <span class=\"token function\">get_page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">// Returns the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token comment\">// Returns: the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  size_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token comment\">// Returns the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// Returns: the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  size_t <span class=\"token function\">loaded_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">// Checks to see if the specified page is loaded into memory</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// Arguments: The virtual page number of the page to check for</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// Returns: True iff the page is loaded into memory, false otherwise</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// Makes sure that all currently loaded pages are flushed</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// meaning tha the page contents are updated on the swap file.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">flush_all_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">// Flushes the specified page to the swap file.</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to flush</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">flush_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// Discards the specified page from the PageTable.</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// If the page is dirty, then it is flushed before it is discarded.</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">// If the page is not in the table, then nothing happens.</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to discard.</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">discard_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token comment\">// Evicts a page from the PageTable. The page evicted</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token comment\">// should be the least recntly used page in the cache.</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token comment\">// If the evicted page is dirty, then it is flushed before it is evicted.</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\">// If there are no pages in the cache, then do nothing.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">evict_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token comment\">// The swap file where pages are stored</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  fstream swap_file_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token comment\">// The number of pages that can be stored</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token comment\">// in the PageTable at one time.</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  size_t capacity_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token comment\">// TODO: add fields</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  size_t page_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token comment\">// a vector to store pages in physical memory</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>pno_t<span class=\"token punctuation\">,</span>Page<span class=\"token operator\">*</span><span class=\"token operator\">>></span> page_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token comment\">// use an unordered_map to quickly determined the corresponding page</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>pno_t<span class=\"token punctuation\">,</span>Page<span class=\"token operator\">*</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  <span class=\"token comment\">// PAGE_TABLE_H_</span></span></pre></td></tr></table></figure><h2 id=\"pagetablecc实现\"><a class=\"markdownIt-Anchor\" href=\"#pagetablecc实现\">#</a>  <code>PageTable.cc</code>  实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./PageTable.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./Page.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// TODO: implment PageTable member functions</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// Constructs a new page table with the specified</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// swap file and the specified page capacity, which is</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// the number of pages that can be held in memory</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// at one time. There cannot be more than page_capacity</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// number of pages loaded in at a time.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//   - swap_file_name: the name of the swap_file</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//   - page_capacity: the maximum number of pages that can be held</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//     in memory at one time.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string swap_file_name<span class=\"token punctuation\">,</span> size_t page_capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>swap_file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>capacity_ <span class=\"token operator\">=</span> page_capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>page_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// Destructs the page table, freeing any allocated resources</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// and flushing any pages currently loaded into memory that</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// are dirty</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>page_num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Page<span class=\"token operator\">*</span> deleted_page <span class=\"token operator\">=</span> page_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        deleted_page<span class=\"token operator\">-></span><span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        page_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    mp<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    page_list<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// Given a virtual address, gets the associated</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// page for that virtual address. This page will</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// be \"loaded\" into physical memory by the time it</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// is returned.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// There are three possiblities when a page is requested:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 1. The page is currently in the \"loaded\" and in the cache.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//    In this case, a reference to the page is returned and</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//    and the page is marked as most recently used in the cache</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// 2. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">//    has not reached its page capacity:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">//    In this case, the page is loaded from the swap file and added</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">//    to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// 3. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">//    is at page capacity:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\">//    The least recently used page in the cache is evicted from the</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">//    cache. Afterwards the requested page is loaded from the swap file</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\">//    and added to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// NOTE: What decides how recntly used a page was used is entirely</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// decided by how recntly it was returned by a call to get_page.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: A virtual address that is associated</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">//     with a requested page. The virutal address is represented</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">//     as a unsigned 32 bit integer. NOTE: a virtual address</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">//     is NOT the same as a page number. Multiple virtual addresses</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">//     could be associated with the same page number.</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">//   - the requested page, which is loaded into the cache and</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">//     marked as the most recently used page</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// obtain the virtual_pno according to the virtual address</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    pno_t pno <span class=\"token operator\">=</span> virtual_address <span class=\"token operator\">/</span> Page<span class=\"token double-colon punctuation\">::</span>PAGE_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>pno<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        Page<span class=\"token operator\">*</span> pg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>swap_file_<span class=\"token punctuation\">,</span>pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>page_num <span class=\"token operator\">&lt;</span> capacity_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            page_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>pg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token function\">flush_page</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            page_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// LRU Algorithms</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// evict the oldest page, and flush it</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token function\">evict_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// add the new page to the front of the list</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            page_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>pg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            page_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        mp<span class=\"token punctuation\">[</span>pno<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">[</span>pno<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// Returns the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">// Returns: the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  size_t <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">return</span> capacity_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">// Returns the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// Returns: the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  size_t <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">loaded_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">return</span> page_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\">// Checks to see if the specified page is loaded into memory</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">// Arguments: The virtual page number of the page to check for</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token comment\">// Returns: True iff the page is loaded into memory, false otherwise</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">return</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">// Makes sure that all currently loaded pages are flushed</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">// meaning tha the page contents are updated on the swap file.</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flush_all_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p<span class=\"token operator\">:</span>page_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        p<span class=\"token punctuation\">.</span>second<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\">// Flushes the specified page to the swap file.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to flush</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flush_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        p<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  <span class=\"token comment\">// Discards the specified page from the PageTable.</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token comment\">// If the page is dirty, then it is flushed before it is discarded.</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  <span class=\"token comment\">// If the page is not in the table, then nothing happens.</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to discard.</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">discard_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        p<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        mp<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        page_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  <span class=\"token comment\">// Evicts a page from the PageTable. The page evicted</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  <span class=\"token comment\">// should be the least recntly used page in the cache.</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token comment\">// If the evicted page is dirty, then it is flushed before it is evicted.</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  <span class=\"token comment\">// If there are no pages in the cache, then do nothing.</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">evict_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    pno_t current_pno <span class=\"token operator\">=</span> page_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> page_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">// find the value in unordered_map</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>first <span class=\"token operator\">==</span> current_pno <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            mp<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    page_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    page_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/",
            "url": "https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/",
            "title": "C++编译与工程构建",
            "date_published": "2023-10-27T09:45:08.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>我们在课程中写的都是代码量不大的小文件，但是在实际工程开发中，情况可就不一样了。但是那么多的代码，我们不可能将它们放在同一个文件中，肯定要分成不同的源文件。但是如何分解程序？如何实现程序之间的交流，就成了一个问题。本节中我们将探讨如何将一个大的工程分成不同的源程序，并且实现这些源程序之间的交流。我们首先介绍 C++ 的编译模型，也就是 C++ 源程序是如何编译成为机器可理解的二进制代码的。然后，我们讨论如何将一个大的工程分解为多个小的源程序，并且实现他们之间的交流。最后，我们探讨 C++ 的预处理器的工作模式。</p>\n<h1 id=\"c-编译模型\"><a class=\"markdownIt-Anchor\" href=\"#c-编译模型\">#</a> C++ 编译模型</h1>\n<p>C++ 是一种编译型的语言，即通过编译器将源代码转化为机器可以理解的二进制代码。其编译过程分为 3 个阶段：</p>\n<ul>\n<li>预处理阶段：扩展头文件，进行宏替换等</li>\n<li>编译阶段：将预处理后的高级语言代码转化为机器可以理解的二进制代码，即目标文件。在这个阶段，编译器会检查一些语法错误，如漏掉了 <code>;</code>  等</li>\n<li>链接阶段：将生成的多个目标文件合并成一个最终的可执行文件</li>\n</ul>\n<p>语法错误主要集中在编译阶段进行检查，而程序的一些其他问题则多半是出现在链接阶段。例如，程序可能定义了一个函数的原型，并且对他进行了调用，但是却没有实现这个函数。又或者，定义的函数原型和实现不一样，按照函数原型进行调用以后，程序找不到函数的实现。有的人会奇怪为什么这种错误会出现在链接阶段，是因为链接器没有在这个文件中找到函数原型时，他会本能的想到是不是在需要链接的其他文件中。如果在其他文件中也没有找到的话，链接器才会告诉你出现了链接错误。</p>\n<h1 id=\"模块化与分解\"><a class=\"markdownIt-Anchor\" href=\"#模块化与分解\">#</a> 模块化与分解</h1>\n<p>通常来说，对于一个大的工程问题，我们无法一口气思考到所有的细节。而在这种情况下，我们倾向于将问题分解成不同的模块，然后通过不同模块间的合作和交流来解决。但是，如何确定模块划分的粒度呢？毕竟越往下分，细节就越多。而在这个时候，我们会选择使用一些抽象的接口。举个例子，我们无需设计 C++ STL，只需要调用其提供给我们的接口，便可以实现多种功能。而这就是模块划分的尽头。<br>\n对于模块化，通常来说遵循 3 个原则：</p>\n<ul>\n<li>简单化：提供一个较为简单的接口</li>\n<li>可扩展：在需要的时候，我们可以在不改变接口的条件下改变其实现方式。</li>\n<li>可复用：接口足够泛用（使用泛型，模板之类），可以保证函数可以被用在多个不同的项目中</li>\n</ul>\n<h1 id=\"c-预处理器\"><a class=\"markdownIt-Anchor\" href=\"#c-预处理器\">#</a> C++ 预处理器</h1>\n<h2 id=\"前言-2\"><a class=\"markdownIt-Anchor\" href=\"#前言-2\">#</a> 前言</h2>\n<p>在编写 C++ 程序时，我们通常把一个程序分为 <code>file.h</code>  和 <code>file.cpp</code>  两个部分。 <code>file.h</code>  中描述的是程序提供的类及函数接口（定义），而 <code>.cpp</code>  文件中描述的是其实现。此外，通常在 <code>.h</code>  文件的前后，会加上如下内容：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">StrUtils_Included</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">StrUtils_Included</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>string <span class=\"token function\">ConvertToUpperCase</span><span class=\"token punctuation\">(</span>string input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string <span class=\"token function\">ConvertToLowerCase</span><span class=\"token punctuation\">(</span>string input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>string <span class=\"token function\">IntegerToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>string <span class=\"token function\">DoubleToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h2 id=\"include头文件\"><a class=\"markdownIt-Anchor\" href=\"#include头文件\">#</a>  <code>include</code>  头文件</h2>\n<p>其作用在于将头文件的内容复制到 <code>#include</code>  处。头文件分为两种，一种用 <code>&lt;&gt;</code>  包起，是 C++ 标准库中的文件；而另外一种用 <code>&quot;&quot;</code>  包起，是用户自定义的头文件，编译器会在当前工程文件夹下找。</p>\n<h2 id=\"define定义与替换\"><a class=\"markdownIt-Anchor\" href=\"#define定义与替换\">#</a>  <code>define</code>  定义与替换</h2>\n<p>宏定义的基本格式是 <code>define val replacement</code> 。在进行宏替换时，做的不是值替换，而是普通的字符串的替换。即将程序中所有的 <code>val</code>  都替换成 <code>replacement</code> 。在进行宏替换时编译器并不理解这到底是什么东西，就是简单的左无脑替换。因此在替换时必须要注意，譬如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">a</span> <span class=\"token expression\"><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在进行宏替换后，效果如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>而不是:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为它做的仅仅是简单的字符串替换。这种错误经常发生，而要避免这类错误的方法是：</p>\n<ol>\n<li>在 <code>define</code>  时使用 <code>()</code>  圆括号</li>\n<li>使用 <code>const</code>  语句</li>\n</ol>\n<h2 id=\"include-guard\"><a class=\"markdownIt-Anchor\" href=\"#include-guard\">#</a>  <code>include guard</code></h2>\n<p>预处理语句可以通过条件判断来决定是否要定义某些文件，一个简单的格式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifndef<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>define<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>endif</pre></td></tr></table></figure><p>这套语句的基本意思是：如果已经 <code>#include</code>  过上述文件，就不需要再定义一次了。C++ 工程文件之间相互 <code>#include</code>  是家常便饭，这样做是为了防止由于多次互相 <code>#include</code>  带来的重定义问题。上述语句只是一个较为简化的版本，更为完整的定义是：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">statement</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">another<span class=\"token operator\">-</span>statement</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">yet<span class=\"token operator\">-</span>another<span class=\"token operator\">-</span>statement</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>这其中的 <code>statement</code>  可以是条件判断语句，也可以是 <code>define()</code>  语句。做条件判断时，使用的必须是已经定义过的变量，如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">MY_CONSTANT <span class=\"token operator\">></span> <span class=\"token number\">137</span> </span><span class=\"token comment\">// Legal</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">MY_CONSTANT <span class=\"token operator\">*</span> <span class=\"token number\">42</span> <span class=\"token operator\">==</span> MY_CONSTANT </span><span class=\"token comment\">// Legal</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>MY_CONSTANT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> </span><span class=\"token comment\">// Illegal, cannot call function sqrt</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">MY_CONSTANT <span class=\"token operator\">==</span> <span class=\"token number\">3.14</span> </span><span class=\"token comment\">// Illegal, can only use integral values</span></span></pre></td></tr></table></figure><p>而使用 <code>define</code>  语句时，如果变量已经定义，则 <code>define()</code>  返回 <code>true</code> ，否则返回 <code>false</code> 。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>MY_CONSTANT<span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// Evaluates to true.</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>OTHER_CONSTANT<span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// Evaluates to false.</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>MY_CONSTANT<span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// Evaluates to false.</span></span></pre></td></tr></table></figure><p>其判断结果被应用在 <code>if</code>  语句中。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A is defined.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B is defined.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C is defined.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"None of A, B, or C is defined.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>这套语句的效果相当于将所有 <code>include</code>  的内容复制粘贴到源程序中，但是注释掉重复定义的部分。它和注释不一样之处在于，这套语句可以嵌套，而注释不能。</p>\n<h2 id=\"宏\"><a class=\"markdownIt-Anchor\" href=\"#宏\">#</a> 宏</h2>\n<h2 id=\"内联函数\"><a class=\"markdownIt-Anchor\" href=\"#内联函数\">#</a> 内联函数</h2>\n",
            "tags": [
                "C++",
                "CMake",
                "Makefile"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%9D%82%E8%B0%88/C++%E7%9A%84%E8%AF%9E%E7%94%9F%E4%B8%8E%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/",
            "url": "https://salvely.github.io/blog/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%9D%82%E8%B0%88/C++%E7%9A%84%E8%AF%9E%E7%94%9F%E4%B8%8E%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/",
            "title": "C++的诞生与一些思考",
            "date_published": "2023-10-25T06:00:48.000Z",
            "content_html": "<p>最近在学习斯坦福的 CS106L，学习标准 C++。在阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm\"> Course Reader</span> 的 Introduction 部分时，作者介绍了 C++ 的诞生故事，对我颇有启发。</p>\n<p>C++ 的创始人在剑桥大学读 PhD 时，主要研究的是分布式系统。在当时，他使用了一种叫 Simula 的面向对象语言。他在 Simula 中初始化电脑对象和网络对象，来模拟系统之间通过网络的交互。但是在开发的过程中，他发现，虽然使用 Simula 来对整个过程进行模拟，非常的快速，但是 Simula 的执行速度非常慢。而后，他又尝试通过一种名为 BCPL 的语言进行开发。但是新的问题又出现了，这种语言是一种较底层的系统语言，并不具备面向对象等特性。虽然执行速度快，但是搭建系统的过程非常的痛苦和繁琐。</p>\n<p>在博士毕业后，他来到了贝尔实验室工作。在这里他接触了一门高效的高级语言，C 语言。此后，他在 C 语言的基础上，拓展了类，而后又增加了一些新的特性。他把这种语言称之为 C++。</p>\n<p>从他的故事来看，再结合之前 OpenAI 创始人的书《伟大不能被计划》，我们可以看到，有的时候我们在探索目标的过程中，可能会遇到一些新的尚未发现过的东西，探索这项新知，可能会让我们更慢达到目标，但是可以让我们在沿途看到更多的风景。 C++ 创始人在研究分布式系统的过程中，意外创造了 C++ 语言。有的人可能会因为创造一门语言所需要的工作量而被劝退，殊不知这正是伟大的开端。有时候我们在是做事情时，可以多想一点点，多做一点点，多探索，多思考，多创造，而不是重复原有的工作，那正是创造力和新世界的大门。</p>\n",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/",
            "url": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/",
            "title": "C++参考资料",
            "date_published": "2023-10-22T08:47:56.000Z",
            "content_html": "<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc29jcHAuZ2l0aHViLmlvL0NwcENvcmVHdWlkZWxpbmVzL0NwcENvcmVHdWlkZWxpbmVz\">C++ Core Guidelines</span></li>\n<li></li>\n</ul>\n",
            "tags": [
                "C++",
                "参考资料"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/",
            "url": "https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/",
            "title": "Stanford CS106L:Standard C++ Programming",
            "date_published": "2023-10-22T03:36:26.000Z",
            "content_html": "<h1 id=\"课程资料\"><a class=\"markdownIt-Anchor\" href=\"#课程资料\">#</a> 课程资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUs4NDExYjdBVS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT04NWFjZjBhNTlkZWQwMmU0Yzc1YWUxMTU4YmFjYTIwNw==\">Video</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjI0Lw==\">Slides/Code</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm\">Course Reader</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9hc3NpZ25tZW50LXNldHVw\">Assignment</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29yZ3MvY291cnNld29ya3MvcmVwb3NpdG9yaWVzP3E9QVAxNDAxLTImYW1wO3R5cGU9YWxsJmFtcDtsYW5ndWFnZT0mYW1wO3NvcnQ9\">AP1401-2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjEyLw==\">Spring 2021 资料</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9sZWN0dXJlcy8=\">综合资料</span></li>\n</ul>\n<h1 id=\"学习流程\"><a class=\"markdownIt-Anchor\" href=\"#学习流程\">#</a> 学习流程</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token number\">1.</span> 阅读 Course Reader对应章节</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token number\">2.</span> 观看video</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">3.</span> 阅读Slides</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token number\">4.</span> 整理Code</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上流程完成后：</p>\n<ol>\n<li>完成 CS106L 所有 Assignment</li>\n<li>完成 AP1401-2 所有作业</li>\n</ol>\n<h1 id=\"welcome\"><a class=\"markdownIt-Anchor\" href=\"#welcome\">#</a> Welcome</h1>\n<p>本节课主要讲述了 C++ 的应用前景，历史发展和设计哲学。</p>\n<h2 id=\"c应用前景\"><a class=\"markdownIt-Anchor\" href=\"#c应用前景\">#</a> C++ 应用前景</h2>\n<p><img data-src=\"future.png\" alt=\"C++应用前景\"></p>\n<h2 id=\"c的历史\"><a class=\"markdownIt-Anchor\" href=\"#c的历史\">#</a> C++ 的历史</h2>\n<h3 id=\"汇编语言\"><a class=\"markdownIt-Anchor\" href=\"#汇编语言\">#</a> 汇编语言</h3>\n<p>在早期阶段，尚没有高级语言这一说。程序员大多使用汇编语言编写程序，汇编语言的好处在于：</p>\n<ul>\n<li>使用较为简单的指令进行编程</li>\n<li>汇编语言执行速度较快</li>\n<li>程序员可以直接操作计算机底层寄存器等</li>\n</ul>\n<p>但是，汇编语言编程也有它的缺陷，缺陷就在于：</p>\n<ul>\n<li>程序涉及到对计算机底层硬件的基础操作，而不只是处理逻辑，因此对其他程序员来说，阅读起来较为困难</li>\n<li>因为汇编语言涉及到指令集架构，而指令集架构和计算机底层硬件和操作系统紧密相关，因此在一台机器上运行的程序可能无法迁移到另一台程序，简单来说就是可移植性较差</li>\n<li>汇编语言编写的程序因为使用的是一些基本的操作，因此程序较长</li>\n</ul>\n<p>因此， <code>Ken Thompson</code>  和 <code>Dennis Ritchie</code>  于 1972 年发明了 C 语言。</p>\n<h3 id=\"c-语言\"><a class=\"markdownIt-Anchor\" href=\"#c-语言\">#</a> C 语言</h3>\n<p>C 语言是一门高级语言，相较汇编，它的优势在于：</p>\n<ul>\n<li>面向过程编程，较为简单。程序员在编写程序时，无需考虑计算机底层架构，而只需要考虑处理逻辑，因此编程较为简单</li>\n<li>C 语言可以由编译器编译为汇编指令，在不同的机器上，可以编译出不同的汇编指令，而后汇编器又可以将汇编指令转化为针对该计算机指令集架构的机器指令，实现 C 语言的可迁移性</li>\n<li>C 语言程序执行速度非常快</li>\n</ul>\n<p>然而，在面对更复杂的编程问题时，C 语言也表现出了它的不足：</p>\n<ul>\n<li>C 语言是面向过程的语言，它无法面向对象。当我们需要更复杂的结构和它的一系列方法时，C 语言只为我们提供了一些有限的结构，无法满足我们对高级结构的需求</li>\n<li>C 语言无法对不同类型提供一个泛化的模板，对于不同类型的传入参数，我们可能需要重复写多个几乎一致的处理函数</li>\n<li>写大型项目时，很多时候很难将一个问题拆解为一个面向过程的模型，不是所有问题都可以使用模块化的过程方法解决</li>\n<li>写出来的程序较长</li>\n</ul>\n<h3 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\">#</a> C++</h3>\n<p>针对 C 语言的问题， <code>Bjarne Stroustrup</code>  于 1983 年开发了 C++ 语言，他希望能够在 C 语言基础上实现一个具有多种不同特性的高级语言。 C++ 语言一开始只是 <code>C with classes</code> ，实现了 C 语言面向对象的延伸。而后逐步发展，直到今天的 <code>C++23</code> 。</p>\n<p><img data-src=\"evolution.png\" alt=\"C++的演化\"></p>\n<h2 id=\"c的几大特性\"><a class=\"markdownIt-Anchor\" href=\"#c的几大特性\">#</a> C++ 的几大特性</h2>\n<ul>\n<li>通用语言<br>\n有的语言可以在应用到多个场景中，但是在解决特定场景问题时会显得复杂，比如 C++ 在做矩阵乘除法时，需要程序员手动编写程序，效率较低。但是 C++ 的用途很广。而有的语言，可以解决特定问题，但是并不泛用。比如 Matlab 在做科学计算时非常的常用，但是在解决其他问题时并没有 C++ 高效。</li>\n<li>编译型语言<br>\n高级语言需要转换成机器可以阅读的二进制码才能被计算机执行。而高级语言分为编译型和解释型。其区别在于，解释型语言使用解释器 (Interpreters) 进行翻译，一边翻译一边执行。解释器在执行一条语句的同时，获取下一条语句。而编译型语言使用编译器进行编译。将整个源代码编译完成后，直接执行生成的二进制码。</li>\n<li>静态类型语言<br>\n静态类型语言是指语句中的每个变量在声明后都有固定的类型，一旦确定，不能随意更改。而动态类型（如 Python、Javascript）会在执行的过程中动态的判断变量的类型。静态类型语言会在编译阶段检查语句是否合法，否则产生编译错误。而动态类型通常无法在编译阶段确定该语句是否有编译错误，错误均在程序运行时产生，也称为运行时错误。编译阶段排错让运行时错误出现的概率大大降低。这样无需运行即可排除程序错误。</li>\n<li>多范式语言<br>\n部分语言只有单一范式，如 C 语言，无法编写面向对象程序。而 C++ 可以同时实现面向对象特性，泛型特性，和面向过程的特性。非常灵活。</li>\n<li>中间语言<br>\n部分底层语言（如汇编）直接和计算机内存打交道，但是利用其写出的程序逻辑不清晰，难以理解。而部分语言无法直接对计算机底层进行操纵（如 Python、Java) 等，程序员在编写程序时就像是被禁锢，无法探索底层的奥秘。C++ 可以像 C 语言那样接触底层硬件（利用指针），也可以利用其面向对象特性构造大型程序，同时实现封装和抽象。触及底层系统和实现抽象的目的同时达到，非常便于程序员大展身手。</li>\n</ul>\n<h2 id=\"c的设计哲学\"><a class=\"markdownIt-Anchor\" href=\"#c的设计哲学\">#</a> C++ 的设计哲学</h2>\n<ul>\n<li>只有在需要解决特定问题时引入新的特性</li>\n<li>程序员可以自由选择编程风格</li>\n<li>隐藏实现细节，抽象出编程接口</li>\n<li>让程序员能够完全以自己想要的方式编写程序</li>\n<li>让编写的程序尽可能高效</li>\n<li>编译时进行类型检查</li>\n<li>可以兼容早期版本程序，也兼容 C 语言程序</li>\n</ul>\n<h2 id=\"c的应用\"><a class=\"markdownIt-Anchor\" href=\"#c的应用\">#</a> C++ 的应用</h2>\n<ul>\n<li>浏览器</li>\n<li>JVM</li>\n<li>火星探索车</li>\n<li>等等</li>\n</ul>\n<h1 id=\"type-and-structs\"><a class=\"markdownIt-Anchor\" href=\"#type-and-structs\">#</a> Type and Structs</h1>\n<p>关于类型和结构体没什么好说的，主要的用法和 C 语言中差不多。但是 <code>string</code>  类在使用之前需要在程序最开始处 <code>#include&lt;string&gt;</code> ，并且最好是不要使用 <code>using namespace std</code> ，而是使用 <code>std::string</code> ，对于 <code>std::cout</code>  和 <code>std::cin</code>  也是一样。这样做是为了保证程序员在自主开发时，不和 <code>std</code>  域内的的东西重名导致出错。</p>\n<h2 id=\"stdpair\"><a class=\"markdownIt-Anchor\" href=\"#stdpair\">#</a>  <code>std::pair</code></h2>\n<p>一种 <code>STL</code>  内置结构，其中包括两个域。 <code>std::pair</code>  相当于是个模板，其中域的类型随意。声明时使用如下格式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"st\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外，还可以在程序中使用如下方法构建 <code>std::pair</code> ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> p <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在使用 <code>pair</code>  时，分别用 <code>p.first</code>  和 <code>p.second</code>  来引用两个域。</p>\n<h2 id=\"auto类型推导\"><a class=\"markdownIt-Anchor\" href=\"#auto类型推导\">#</a>  <code>auto</code>  类型推导</h2>\n<p>使用 <code>auto</code>  变量表示允许编译器自行推导值的类型。</p>\n<div class=\"note info\">\n<p>什么时候使用 <code>auto</code> ？</p>\n<ul>\n<li>使用迭代器时，我不关心值的类型</li>\n<li>使用模板时，值的类型已经可以根据上下文推断出来</li>\n<li>使用 <code>lambda</code>  时，咱不知道值是啥类型</li>\n<li>没那个必要时，尽量不要将 <code>auto</code>  作为返回值类型</li>\n</ul>\n</div>\n<h1 id=\"streams\"><a class=\"markdownIt-Anchor\" href=\"#streams\">#</a> Streams</h1>\n<blockquote>\n<p>How can we convert between string-represented data and the real thing? Streams!</p>\n</blockquote>\n<p>本节首先介绍了什么是环境，而后引入 <code>Stream</code>  的概念，讲解了 <code>Streams</code>  在读入和写出数据时的一些特点。而 <code>Streams</code>  可以利用 <code>cin</code>  和 <code>cout</code>  这两种 <code>iostream</code>  类的对象，实现从标准输入和控制台进行读取。也可以通过 <code>ifstream</code>  和 <code>ofstream</code>  两种来实现文件的读取和写入。亦可以通过 <code>istringstrean</code>  和 <code>ostringstream</code>  来实现字符串和其他类型之间的连接。但是普通的 <code>cin</code>  和 <code>cout</code>  在使用时也可能出现读取的问题，因此我们还可以使用 <code>std::getline()</code>  来进行一行一次的读取。此外，在使用 <code>Stream</code>  时，还应该注意判别读取异常和写入异常。</p>\n<h2 id=\"streams-overview\"><a class=\"markdownIt-Anchor\" href=\"#streams-overview\">#</a> Streams Overview</h2>\n<h3 id=\"environment\"><a class=\"markdownIt-Anchor\" href=\"#environment\">#</a> Environment</h3>\n<p>在学习 Stream 之前，我们先要了解 <code>Environment</code> （环境）的概念。我们家里有温度计，我们通常通过温度计上的水银球去检测环境温度，然后将摄氏度显示在数轴上，人们通过观测数轴上的数字来查看当前温度。在这个例子中，外界就是环境，水银球就是将温度转化为实际示数的媒介，而数轴就是温度的输出，将温度显示出来供人们了解。而在程序编写的过程中，也可能存在一个外部环境，程序需要从这个环境获取信息，然后在利用一些处理逻辑来进行一些计算，最后返回输出或者将输出打印在屏幕上。这个环境可能是用户输入，也可能是外部文件，还有可能是其他程序。</p>\n<h3 id=\"stream-是什么\"><a class=\"markdownIt-Anchor\" href=\"#stream-是什么\">#</a> Stream 是什么</h3>\n<blockquote>\n<p>Streams is an abstraction for input and output. Streams convert between data and the string representation of data.</p>\n</blockquote>\n<p>Stream 是程序与外部环境交流的媒介。Stream 的输入与输出可能来自用户，也可能来自程序，也可能来自其他文件。如果要将一个变量输出到终端，那么变量就会以字符串的形式打入 Stream，然后 Stream 将其输出到终端。如果要从用户输入读取数据，那么也是将用户输入转化为字符串存储在 Stream 中，然后再将其转储到变量中。</p>\n<h3 id=\"stream-特点\"><a class=\"markdownIt-Anchor\" href=\"#stream-特点\">#</a> Stream 特点</h3>\n<ul>\n<li>可以对大体积数据进行分片读取，然后存储</li>\n<li>可以读取多个类型的数据</li>\n<li>可以串联多个 <code>&lt;&lt;</code>  读取</li>\n</ul>\n<h2 id=\"cin-与-cout来自键盘去往终端\"><a class=\"markdownIt-Anchor\" href=\"#cin-与-cout来自键盘去往终端\">#</a> cin 与 cout：来自键盘，去往终端</h2>\n<p><code>cout</code>  为 Stream 对象，它从变量中获取数据，存储到一个 Buffer 中，然后将其<strong>输出到终端上</strong>。<br>\n <code>cin</code>  也是 Stream 对象，它从<strong>用户输入</strong>获取值，存储到一个 Buffer 中，然后将其转储到对应类型的变量中。<br>\n在使用这两个输入流前，需要在程序开始处 <code>#include &lt;iostream&gt;</code></p>\n<h2 id=\"ifstream-与-ofstream来自文件去往文件\"><a class=\"markdownIt-Anchor\" href=\"#ifstream-与-ofstream来自文件去往文件\">#</a> ifstream 与 ofstream：来自文件，去往文件</h2>\n<div class=\"note info\">\n<p>问题思考：</p>\n<ol>\n<li><code>ifstream</code>  和 <code>ofstream</code>  分别是什么？</li>\n<li>还有什么特殊的读写文件类？特殊在哪？</li>\n<li><code>i/ofstream</code>  和 <code>cin/cout</code>  在使用上有什么不一样之处？</li>\n<li>使用 <code>ifstream</code>  和 <code>ofstream</code>  需要包含什么头文件？</li>\n<li><code>ifstream</code>  怎么初始化？初始化后需要做哪些检查？</li>\n<li><code>ofstream</code>  怎么初始化？初始化后需要做哪些检查？</li>\n<li>如果传入的文件名是 <code>string</code>  类型，如何处理？</li>\n<li><code>close()</code>  时有哪些需要注意的地方？</li>\n</ol>\n</div>\n<h3 id=\"ifstream-ofstream-overview\"><a class=\"markdownIt-Anchor\" href=\"#ifstream-ofstream-overview\">#</a> ifstream &amp; ofstream Overview</h3>\n<p><code>ifstream</code>  和 <code>ofstream</code>  分别从文件读取和写入文件。此外，还有一个叫做 <code>fstream</code>  的类型，即可以完成写入，又可以完成读取）。此外， <code>ifstream</code>  和 <code>ofstream</code>  在使用上与 <code>cin/cout</code>  不一样之处在于， <code>ifstream</code>  和 <code>ofstream</code>  是一个类型，而不是一个对象，但是 <code>cin</code>  及 <code>cout</code>  分别是 <code>std::istream</code>  和 <code>std::ostream</code>  类的对象。在使用对象的方法时 ( <code>&lt;&lt;</code>  和 <code>&gt;&gt;</code>  已被重载) 可以直接调用，但是在使用一个类的方法时，首先需要初始化这个类的一个对象，然后再对其方法进行调用。</p>\n<h3 id=\"ifstream-ofstream-使用说明\"><a class=\"markdownIt-Anchor\" href=\"#ifstream-ofstream-使用说明\">#</a> ifstream &amp; ofstream 使用说明</h3>\n<h4 id=\"包含头文件\"><a class=\"markdownIt-Anchor\" href=\"#包含头文件\">#</a> 包含头文件</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr></table></figure><h4 id=\"ifstream-初始化-使用\"><a class=\"markdownIt-Anchor\" href=\"#ifstream-初始化-使用\">#</a> ifstream 初始化 &amp; 使用</h4>\n<p>可以直接使用构造函数，在参数列表中填入文件名进行初始化：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream <span class=\"token function\">myStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也可以在使用默认构造函数初始化后，利用类的 <code>open()</code>  方法打开文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream myStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myStream<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 <code>ifstream</code>  对象的方法与使用 <code>cin</code>  相似，如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myStream <span class=\"token operator\">>></span> myInteger</pre></td></tr></table></figure><p>注意，在 <code>open()</code>  方法调用后，推荐使用 <code>myStream.is_open()</code>  来探测是否真的成功打开了文件。</p>\n<h4 id=\"ofstream-初始化-使用\"><a class=\"markdownIt-Anchor\" href=\"#ofstream-初始化-使用\">#</a> ofstream 初始化 &amp; 使用</h4>\n<p><code>ofstream</code>  初始化过程及使用过程与前文 <code>ifstream</code>  相似。若文件不存在，调用 <code>open()</code>  方法会新创建一个文件，否则会覆盖原有的同名文件。（所以尽量做好备份）</p>\n<h4 id=\"关闭流close\"><a class=\"markdownIt-Anchor\" href=\"#关闭流close\">#</a> 关闭流： <code>close()</code></h4>\n<ol>\n<li>当流的生命周期结束时，C++ 会为你自动关闭流</li>\n<li>你也可以手动使用 <code>close()</code>  方法关闭流</li>\n</ol>\n<h4 id=\"使用-string-作为文件名时\"><a class=\"markdownIt-Anchor\" href=\"#使用-string-作为文件名时\">#</a> 使用 string 作为文件名时…</h4>\n<p>注意， <code>string</code>  类的开发时间要晚于 <code>ifstream</code>  和 <code>ofstream</code> ，彼时 <code>ifstream</code>  和 <code>ofstream</code>  只接受 C 语言的字符串类型。因此，要将一个 <code>string</code>  类型的文件名传入这两个类的对象，我们必须调用 <code>.c_str()</code>  来将其转化为 C 语言格式的字符串。</p>\n<h2 id=\"stream-manipulators\"><a class=\"markdownIt-Anchor\" href=\"#stream-manipulators\">#</a> Stream manipulators</h2>\n<p><code>stream manipulator</code>  可以让对变量及输出的处理更加方便，程序员无需手动编程实现一些较为繁琐的功能。几种常用的 <code>stream manipulator</code>  如下：</p>\n<ol>\n<li><code>endl</code> : 输出后换行</li>\n<li><code>setw</code> : 设置输出的宽度</li>\n<li><code>left/right</code> : 通常与 <code>setw</code>  连用，表示左补空格 / 右补空格</li>\n<li><code>setfill</code> : 在宽度一定，文字没有填满处补充特定的占位符</li>\n<li><code>boolalpha</code> : 用 <code>true/false</code>  表示 <code>1/0</code></li>\n<li><code>hex</code> : 将输入输出理解为 16 进制</li>\n<li><code>dec</code> : 输入输出为 10 进制</li>\n<li><code>oct</code> : 输入输出为 8 进制</li>\n<li><code>ws</code> : 跳过所有的空格</li>\n</ol>\n<h2 id=\"stream-异常处理\"><a class=\"markdownIt-Anchor\" href=\"#stream-异常处理\">#</a> Stream 异常处理</h2>\n<p>在使用 <code>stream</code>  进行读取时，可能会出现读取异常的情况，比如读进来的值是个字符串，但是程序想把它保存到一个 <code>int</code>  类中，这样就产生了类型异常。我们需要在读取后使用 <code>cout.fail()</code>  或 <code>cin.fail()</code>  来判断读取是否成功，如果有异常，我们需要手动处理异常，然后用 <code>cin.clear()</code>  表达异常已经处理完毕。</p>\n<div class=\"note info\">\n<p>注意，在使用 <code>while</code>  循环进行读取时，尽量把异常判断放在 <code>while</code>  循环内，如果判断到异常则退出，否则就进行下一次读取。不要把 <code>while</code>  循环放在条件判断中，否则可能会导致读取异常后依然在进行输出，因此尽量使用如下的结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为 <code>stream</code>  在读取到最后或读取错误时会返回 <code>false</code> ，而其他情况下会返回 <code>stream</code>  对象本身（也可以判断为 <code>true</code> ），因此我们可以使用 <code>cin &lt;&lt; intValue &lt;&lt; doubleValue</code>  之类的语句作为判断的条件，以简化上述的循环，结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">&lt;&lt;</span> intValue <span class=\"token operator\">&lt;&lt;</span> doubleVALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<h2 id=\"stream-的麻烦之处\"><a class=\"markdownIt-Anchor\" href=\"#stream-的麻烦之处\">#</a> Stream 的麻烦之处</h2>\n<p>Stream 存在一个问题，如果用户多次连续读取值，而其中某一次读入的值的类型不匹配的话，则会连环影响到后面的读取。这其中的根本原因是， <code>stream</code>  本身是一个附带了一个读写头的 <code>buffer</code>  字符数组，而每次读取后，读写后都会向后移动，下一次读取的位置是上一次读取的位置 + 上一次读取的长度。比如说我们需要读取一个 <code>int</code> ，再读取一个 <code>string</code> 。上一次用户输入了 <code>8.265</code> , 那么第一次就只会读入 <code>8</code> ，下一次读取从 <code>.265</code>  开始，导致 <code>string</code>  读取出错。</p>\n<p>此外， <code>cin</code>  的特点是： <code>cin</code>  越过一切前导空格和换行符，在读入有效字符后，遇到空格或换行符就停止读取，见如下程序：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstring name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstring city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcin <span class=\"token operator\">>></span> name <span class=\"token operator\">>></span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"My name is \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The city is \"</span> <span class=\"token operator\">&lt;&lt;</span> city <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果输入的第一个 <code>name</code>  是 <code>First Last</code> ， <code>city</code>  输入的是 <code>Wuhan</code> 。由于 <code>cin</code>  遇到空格就停止读取，那么 <code>name</code>  中存储的值就是 <code>First</code> ， <code>city</code>  中存储的值就是 <code>Last</code> ，而 <code>Wuhan</code>  依然在 <code>buffer</code>  中无法读取。</p>\n<p>因此，要解决标准的 <code>stream</code>  带来的麻烦，我们引入一个新的函数： <code>getline()</code></p>\n<h2 id=\"用getline函数读取标准输入\"><a class=\"markdownIt-Anchor\" href=\"#用getline函数读取标准输入\">#</a> 用 <code>getline()</code>  函数读取标准输入</h2>\n<p><code>getline()</code>  可以将输入保存在 <code>string</code>  中。 <code>getline</code>  函数的用途在于，如同他的名字，它可以一次读取一行，而 <code>cin</code>  每次读到空格或换行符就停止。 <code>getline</code>  不会忽略空格，会将其一并读入，但是 <code>getline</code>  遇到换行符就停止读取，并且换行符依然留存在 <code>stream buffer</code>  中。因此 <code>getline</code>  非常适合那种用户需要在这个字符串中保留空格的情况。</p>\n<p>前文我们说过， <code>cin</code>  会在开始读取时越过一切前导的空格和换行符，读取有效字符后，遇到空格和换行符就停止读取，并且将其留在 <code>stream buffer</code>  中，以待下一次的读取。那么如果我们将 <code>cin</code>  和 <code>getline</code>  混用时，便会出现一些问题。</p>\n<p>参考如下示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> dummyInt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string dummyString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> dummyInt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>dummyString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>cin</code>  首先读入了一个数，然后<strong>将换行符留在了 <code>buffer</code>  中</strong>，但是下一次调用 <code>getline</code>  时， <code>getline</code>  遇到换行符就停止读取。导致读入的 <code>dummyString</code>  并不是我们下一次输入的字符串，而是一个空串。这都是因为上一个字符串的换行符还没有处理干净。<br>\n最好的解决办法是将这种原始的输入输出读取，改为调用封装好的功能完善的库函数。</p>\n<h2 id=\"用getline函数读取文件\"><a class=\"markdownIt-Anchor\" href=\"#用getline函数读取文件\">#</a> 用 <code>getline()</code>  函数读取文件</h2>\n<p>参考之前 <code>cin</code>  循环从文件读取的形式，我们可以编写一个使用 <code>getline</code>  循环读取文件的格式:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream <span class=\"token function\">capitals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"capitals.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string capital<span class=\"token punctuation\">,</span>country<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// check if the file is correctly opened</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>capitals<span class=\"token punctuation\">,</span>capital<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getlien</span><span class=\"token punctuation\">(</span>capitals<span class=\"token punctuation\">,</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"a-string-bufferstringstream\"><a class=\"markdownIt-Anchor\" href=\"#a-string-bufferstringstream\">#</a> A string buffer: <code>stringstream</code></h2>\n<div class=\"note info\">\n<p>有时候，我们想要连接字符串和数字，譬如 <code>&quot;I ate&quot; + 3 &quot;peaches today&quot;</code> ，可是 C++ 不允许我们拼接不一样类型的值，怎么办呢？<br>\n下面我们引入一个新的 <code>stream</code>  类： <code>stringstream</code> 。通过  <code>myStringStream &lt;&lt; &quot;I ate&quot; &lt;&lt; 3 &lt;&lt; &quot;peaches today&quot;</code> , 我们可以实现字符串和其他类型值的拼接。</p>\n</div>\n<p><code>stringstream</code>  是一个类似于 <code>cin</code>  和 <code>cout</code>  的 <code>stream</code> 。和 <code>ifstream/ofstream</code>  一样，在使用 <code>stringstream</code>  前，我们需要先初始化一个 <code>stringstream</code>  类的对象，然后再对这个对象进行读入和写出。 <code>stringstream</code>  和标准 <code>iostream</code>  的差别在于，其写入和写出的值并不保存在程序外，而是作为程序的一个变量，可以通过调用 <code>myStringStream.str()</code>  随时读取。</p>\n<div class=\"note info\">\n<p>在使用 <code>stringstream</code>  之前，需要引入头文件 <code>#include &lt;sstream&gt;</code></p>\n</div>\n<h1 id=\"initialization\"><a class=\"markdownIt-Anchor\" href=\"#initialization\">#</a> Initialization</h1>\n<h2 id=\"初始化结构体\"><a class=\"markdownIt-Anchor\" href=\"#初始化结构体\">#</a> 初始化结构体</h2>\n<h3 id=\"方法一用给每个字段赋值\"><a class=\"markdownIt-Anchor\" href=\"#方法一用给每个字段赋值\">#</a> 方法一：用 <code>.</code>  给每个字段赋值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Student s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> s<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Frankie\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> s<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"MN\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> s<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法二用直接赋值\"><a class=\"markdownIt-Anchor\" href=\"#方法二用直接赋值\">#</a> 方法二：用 <code>&#123;&#125;</code>  直接赋值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Student s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Frankie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MN\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"初始化stdpair\"><a class=\"markdownIt-Anchor\" href=\"#初始化stdpair\">#</a> 初始化 <code>std::pair</code></h2>\n<h3 id=\"方法一用给每个字段赋值-2\"><a class=\"markdownIt-Anchor\" href=\"#方法一用给每个字段赋值-2\">#</a> 方法一：用 <code>.</code>  给每个字段赋值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> numSuffix1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"st\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法二用直接赋值-2\"><a class=\"markdownIt-Anchor\" href=\"#方法二用直接赋值-2\">#</a> 方法二：用 <code>&#123;&#125;</code>  直接赋值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> numSuffix2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>numSuffix2<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>numSuffix2<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> <span class=\"token string\">\"nd\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法三调用stdmake_pairfield1field2方法\"><a class=\"markdownIt-Anchor\" href=\"#方法三调用stdmake_pairfield1field2方法\">#</a> 方法三：调用 <code>std::make_pair(field1,field2)</code>  方法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> numSuffix2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"初始化stdvector\"><a class=\"markdownIt-Anchor\" href=\"#初始化stdvector\">#</a> 初始化 <code>std::vector</code></h2>\n<h3 id=\"方法一使用直接赋值\"><a class=\"markdownIt-Anchor\" href=\"#方法一使用直接赋值\">#</a> 方法一：使用 <code>&#123;&#125;</code>  直接赋值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// a = &#123;3,5&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"方法二使用vector构造函数赋值\"><a class=\"markdownIt-Anchor\" href=\"#方法二使用vector构造函数赋值\">#</a> 方法二：使用 <code>vector()构造函数</code> 赋值</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>这种情况下，传入的 3 和 5 是构造函数的参数，3 是元素的个数，5 是重复的元素值， <code>a=&#123;5,5,5&#125;</code></p>\n</div>\n<h2 id=\"大括号初始化通用\"><a class=\"markdownIt-Anchor\" href=\"#大括号初始化通用\">#</a> 大括号初始化 (通用)</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> numSuffix1<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"st\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Student s<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Frankie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MN\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// less common/nice for primitive types, but possible!</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>string f<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Frankie\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"structure-bindings\"><a class=\"markdownIt-Anchor\" href=\"#structure-bindings\">#</a> Structure Bindings</h2>\n<p>可以结合 <code>auto</code>  的自动类型推导来自动绑定值。<br>\n使用前：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>“s”<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string a <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用后：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>“s”<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// a is string, b is int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// auto [a, b] =</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References</h1>\n<div class=\"note info\">\n<ol>\n<li><code>=</code>  默认为赋值值，如果要传入引用，必须在声明引用时加上 <code>&amp;</code> ;</li>\n<li>修改引用时便修改了值本身，而修改复制品不修改本身；</li>\n<li>引用是变量的引用，修改引用前必须声明一个变量，无法对常量进行引用；</li>\n</ol>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// the reference of value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> copy <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// the copy of value</span></pre></td></tr></table></figure><p>此外，在使用迭代器时，如果要修改被迭代的值本身而不是他的复制品，必须使用引用，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tnum1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tnum2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码中， <code>auto [num1,num2]</code>  是 <code>nums</code>  中每个元素的复制品，而不是本身。如果要对本身进行修改，必须使用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">[</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"left-value-right-value\"><a class=\"markdownIt-Anchor\" href=\"#left-value-right-value\">#</a> left-value &amp; right-value</h1>\n<p>左值和右值的区别在于，左值通常来说是变量，而右值是字面量。左值可以出现在 <code>=</code>  的左边和右边，是在程序生命周期内长期有效。而右值作为字面量，无法在程序中长期存活，自然也不能出现在 <code>=</code>  的左边。</p>\n<div class=\"note info\">\n<p>在使用引用时，不允许传入右值，即不允许传入字面量。我们无法对一个常量进行引用，只能对左值 (变量) 进行引用。</p>\n</div>\n<h1 id=\"const-const-referencecopy\"><a class=\"markdownIt-Anchor\" href=\"#const-const-referencecopy\">#</a> const &amp; const reference/copy</h1>\n<p>常量是不允许修改的量，使用 <code>const</code>  声明常量。常量的引用和复制也必须是常量，引用及复制前加 <code>const</code> 。</p>\n<h1 id=\"containers\"><a class=\"markdownIt-Anchor\" href=\"#containers\">#</a> Containers</h1>\n<h2 id=\"stl-是什么\"><a class=\"markdownIt-Anchor\" href=\"#stl-是什么\">#</a> STL 是什么？</h2>\n<h2 id=\"stl-overview\"><a class=\"markdownIt-Anchor\" href=\"#stl-overview\">#</a> STL Overview</h2>\n<h2 id=\"为什么需要-stl\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要-stl\">#</a> 为什么需要 STL？</h2>\n<h2 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"#vector\">#</a> vector</h2>\n<p><code>push_back</code>   <code>insert</code>   <code>pop_back</code>   <code>erase</code>   <code>resize</code></p>\n<h2 id=\"deque\"><a class=\"markdownIt-Anchor\" href=\"#deque\">#</a> deque</h2>\n<h1 id=\"iterators-and-pointers\"><a class=\"markdownIt-Anchor\" href=\"#iterators-and-pointers\">#</a> Iterators and Pointers</h1>\n<h1 id=\"classes\"><a class=\"markdownIt-Anchor\" href=\"#classes\">#</a> Classes</h1>\n<h1 id=\"template-classes-and-const-correctness\"><a class=\"markdownIt-Anchor\" href=\"#template-classes-and-const-correctness\">#</a> Template Classes and Const Correctness</h1>\n<h1 id=\"template-functions\"><a class=\"markdownIt-Anchor\" href=\"#template-functions\">#</a> Template Functions</h1>\n<h1 id=\"functions-and-lambdas\"><a class=\"markdownIt-Anchor\" href=\"#functions-and-lambdas\">#</a> Functions and Lambdas</h1>\n<h1 id=\"midquarter-review\"><a class=\"markdownIt-Anchor\" href=\"#midquarter-review\">#</a> Midquarter Review</h1>\n<h1 id=\"operators\"><a class=\"markdownIt-Anchor\" href=\"#operators\">#</a> Operators</h1>\n<h1 id=\"special-member-functions\"><a class=\"markdownIt-Anchor\" href=\"#special-member-functions\">#</a> Special Member Functions</h1>\n<h1 id=\"move-semantics\"><a class=\"markdownIt-Anchor\" href=\"#move-semantics\">#</a> Move Semantics</h1>\n<h1 id=\"stdoptional-and-type-safety\"><a class=\"markdownIt-Anchor\" href=\"#stdoptional-and-type-safety\">#</a> std::optional and Type Safety</h1>\n<h1 id=\"raii-smart-pointers-and-building-c-projects\"><a class=\"markdownIt-Anchor\" href=\"#raii-smart-pointers-and-building-c-projects\">#</a> RAII, Smart Pointers, and Building C++ Projects</h1>\n<h1 id=\"c-for-data-science-and-ml\"><a class=\"markdownIt-Anchor\" href=\"#c-for-data-science-and-ml\">#</a> C++ for Data Science and ML</h1>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/",
            "url": "https://salvely.github.io/blog/2023/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/",
            "title": "Arch Linux系统配置教程",
            "date_published": "2023-10-15T01:38:16.000Z",
            "content_html": "<h1 id=\"初始化用户和组\"><a class=\"markdownIt-Anchor\" href=\"#初始化用户和组\">#</a> 初始化用户和组</h1>\n<h1 id=\"权限授予\"><a class=\"markdownIt-Anchor\" href=\"#权限授予\">#</a> 权限授予</h1>\n<h1 id=\"安全性配置\"><a class=\"markdownIt-Anchor\" href=\"#安全性配置\">#</a> 安全性配置</h1>\n<h1 id=\"安装基本组件\"><a class=\"markdownIt-Anchor\" href=\"#安装基本组件\">#</a> 安装基本组件</h1>\n<h1 id=\"让系统更易用\"><a class=\"markdownIt-Anchor\" href=\"#让系统更易用\">#</a> 让系统更易用</h1>\n",
            "tags": [
                "Linux",
                "操作系统",
                "notes",
                "Arch",
                "配置教程"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "url": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "title": "Debian包管理初探",
            "date_published": "2023-10-14T06:23:52.000Z",
            "content_html": "<h1 id=\"linux-发行版\"><a class=\"markdownIt-Anchor\" href=\"#linux-发行版\">#</a> Linux 发行版</h1>\n<p>Linux 操作系统 = Linux 内核 + 不同功能<br>\n但是因为内核和功能包有多种不同配置，因此 Linux 有多种发行版。<br>\n几种主要的发行版及其衍生是：</p>\n<ul>\n<li>Arch -&gt; Manjaro</li>\n<li>Debian -&gt; Ubuntu</li>\n<li>RHEL -&gt; Scientific Linux</li>\n</ul>\n<h1 id=\"安装软件的困惑\"><a class=\"markdownIt-Anchor\" href=\"#安装软件的困惑\">#</a> 安装软件的困惑？</h1>\n<div class=\"note default\">\n<p>我们要在 Linux 操作系统上安装一个软件，思考如下问题：</p>\n</div>\n<ul>\n<li>你需要哪些文件？如何获取他们？</li>\n<li>用户需要做多少工作？</li>\n<li>开发者需要做多少工作？</li>\n<li>在发行软件的过程中还有其他人参与工作吗？</li>\n<li>如何更新软件包？</li>\n<li>如何保证软件包来源的安全性？</li>\n</ul>\n<div class=\"note default\">\n<p>一个简陋的安装方案是：直接下载一堆文件。这其中包含的内容有：</p>\n</div>\n<ul>\n<li>编译好的二进制可执行文件</li>\n<li>配置信息</li>\n<li>说明文档</li>\n<li>许可证 (License)</li>\n<li>其他</li>\n</ul>\n<div class=\"note default\">\n<p>那么问题来了：</p>\n</div>\n<ul>\n<li>我们需要哪些文件？</li>\n<li>这些文件放在哪里？</li>\n<li>如何进行环境配置？</li>\n<li>这个安装包和我的系统兼容吗？</li>\n<li>我怎么更新呢？</li>\n</ul>\n<div class=\"note default\">\n<p>一个进阶的安装方案是：下载一个压缩包。但是我们也面临一些问题：</p>\n</div>\n<ul>\n<li>这里面的文件是编译好的还是未编译的？</li>\n<li>软件包之间存在依赖关系怎么办？</li>\n<li>这个软件如何应对不同 Linux 发行版的需求？</li>\n<li>如何更新？如何保证更新后的版本可靠？</li>\n</ul>\n<h1 id=\"解决方案打包\"><a class=\"markdownIt-Anchor\" href=\"#解决方案打包\">#</a> 解决方案：打包！</h1>\n<h2 id=\"什么是包\"><a class=\"markdownIt-Anchor\" href=\"#什么是包\">#</a> 什么是包？</h2>\n<p>包是 Linux 操作系统上软件的组织方式。</p>\n<h2 id=\"什么是仓库repository\"><a class=\"markdownIt-Anchor\" href=\"#什么是仓库repository\">#</a> 什么是仓库（ <code>repository</code> ）？</h2>\n<p>仓库是一系列软件包的合集列表。 <code>Debian</code>  上常见的仓库包括：</p>\n<ul>\n<li>Debian stable (all the packages available to install on a default Debian stable install)</li>\n<li>Debian security updates</li>\n<li>Debian backports</li>\n<li>Docker’s custom repositories</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>每个 Linux 发行版都维护仓库，里面列举了该仓库中可安装的所有软件包</li>\n<li>包维护者负责对开发者的软件进行打包</li>\n<li>对于不同的 Linux 发行版，打包的方式不同</li>\n</ul>\n<div class=\"note info\">\n<p>包和仓库区别的详细解释参考这里:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMDkwNzU4L3doYXQtYXJlLXBhY2thZ2VzLWFuZC1yZXBvc2l0b3JpZXM=\">what are packages and repositories</span></li>\n<li><a href=\"https://linux.cn/article-14994-1.html\"> <code>apt-update</code>  和 <code>apt-upgrade</code>  的区别</a></li>\n</ul>\n</div>\n<h1 id=\"包的安装过程\"><a class=\"markdownIt-Anchor\" href=\"#包的安装过程\">#</a> 包的安装过程</h1>\n<ol>\n<li>从包列表中读取该包</li>\n<li>查看该包的所有依赖项</li>\n<li>看看依赖项中哪些包已经安装了</li>\n<li>安装未安装的依赖</li>\n<li>解压缩文件等</li>\n<li>完成一些安装后需要做的工作，如将其作为 <code>service</code>  启动</li>\n</ol>\n<!-- # 仓库 vs App Store\n仓库和App Store均是集中管理包的地方，但是他们略有不同。\n## 软件包更新方式\n仓库：\n- 维护者负责发布更新\n- 部分不稳定的更新会延迟\n- 用户可自己选择使用测试版\nApp Store：\n- 开发者直接向用户推送更新\n- 可能随机挑选用户测试更新\n## 安全方面和依赖管理方面\n仓库：\n- 用户可信赖开发者\nApp Store:\n- 具有隔离性，一切依赖开发者决定 -->\n<h1 id=\"包更新方式\"><a class=\"markdownIt-Anchor\" href=\"#包更新方式\">#</a> 包更新方式</h1>\n<ul>\n<li>部分 Linux 发行版采用 <code>periodic release</code>  方式，例如 <code>Debian</code> ，2 年一发行</li>\n<li>部分采用 <code>rolling release</code>  方式，例如 <code>Arch</code> ，发行版更新更快，但是是以稳定性为代价<br>\n更多内容参考这里：<span class=\"exturl\" data-url=\"aHR0cHM6Ly91dGNjLnV0b3JvbnRvLmNhL35ja3Mvc3BhY2UvYmxvZy9saW51eC9Sb2xsaW5nVnNSZWxlYXNlc05vV2lubmVy\">Rolling distribution releases versus periodic releases are a tradeoff</span></li>\n</ul>\n<h1 id=\"自动化包管理工具\"><a class=\"markdownIt-Anchor\" href=\"#自动化包管理工具\">#</a> 自动化包管理工具</h1>\n<h2 id=\"apt\"><a class=\"markdownIt-Anchor\" href=\"#apt\">#</a>  <code>apt</code></h2>\n<ol>\n<li><code>apt update</code> ：生成列表，显示仓库中包含哪些包</li>\n<li><code>apt upgrade</code> / <code>apt dist-upgrade</code> ：把列表中的包升级到最新版本</li>\n<li><code>apt policy &lt;packagename&gt;</code> ：列举可安装的包版本</li>\n<li><code>apt -t [targetrelease] install [package]</code> ：安装特定版本包</li>\n<li><code>apt install &lt;packagename&gt;</code> ：安装包</li>\n<li><code>apt remove &lt;packagename&gt;</code> ：卸载包</li>\n<li><code>apt search &lt;packagename&gt;</code> ：搜索包</li>\n<li><code>apt install ./&lt;packagename&gt;.deb</code> ：安装本地的 <code>deb</code>  包</li>\n<li><code>apt download &lt;packagename&gt;.deb</code> ：下载包<div class=\"note info\">\n<p>几种不同命令的区别参考这里：</p>\n</div>\n</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xOTQ2NTEvd2h5LXVzZS1hcHQtZ2V0LXVwZ3JhZGUtaW5zdGVhZC1vZi1hcHQtZ2V0LWRpc3QtdXBncmFkZQ==\">Why use apt-get upgrade instead of apt-get dist-upgrade?</span><br>\n:::</li>\n</ul>\n<h2 id=\"dpkg多用于安装本地包\"><a class=\"markdownIt-Anchor\" href=\"#dpkg多用于安装本地包\">#</a>  <code>dpkg</code> : 多用于安装本地包</h2>\n<ol>\n<li><code>dpkg -i [packagefilename]</code> ：安装本地包</li>\n<li><code>dpkg --remove [packagename]</code> ：卸载本地包</li>\n<li><code>dpkg -I [packagename]</code> ：查看本地包的更多信息</li>\n<li><code>dpkg --configure -a</code> ：查看所有解压了但是还没安装的包</li>\n</ol>\n<h2 id=\"使用什么包\"><a class=\"markdownIt-Anchor\" href=\"#使用什么包\">#</a> 使用什么包？</h2>\n<p>在 <code>/etc/apt/sources.list</code>  和 <code>/etc/apt/sources.list.d</code>  文件中维护镜像源：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deb http://mirrors/debian/ stretch-backports main contrib non-free</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>deb http://mirrors/debian-security/ stretch/updates main contrib non-free</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deb-src http://mirrors/debian-security/ stretch/updates main contrib non-free</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deb http://mirrors/debian/ stretch-updates main contrib non-free</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>deb-src http://mirrors/debian/ stretch-updates main contrib non-free</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>deb http://mirrors/debian/ stretch main contrib non-free</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>deb-src http://mirrors/debian/ stretch main contrib non-free</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># OCF</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>deb http://apt/ stretch-backports main</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>deb-src http://apt/ stretch-backports main</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>deb http://apt/ stretch main</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>deb-src http://apt/ stretch main</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>deb http://mirrors/puppetlabs/apt/ stretch puppet</pre></td></tr></table></figure><div class=\"note info\">\n<p>我个人的理解是， <code>repository</code>  是指仓库名，仓库中列举了该仓库有哪些软件包。而 <code>mirror list</code>  指明了从哪里下载这个仓库中的软件包（网络地址）？在清华的镜像中有这个仓库，而在中科大的镜像中也有这个仓库。镜像中仓库的内容随着官方仓库内容的更新而更新？<br>\n关于什么是镜像，请看这里:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy85MTMxODAvd2hhdC1hcmUtbWlycm9ycw==\">What are mirrors？</span></li>\n</ul>\n</div>\n<p>不同的仓库中的软件版本可能不同，需要通过 <code>apt policy</code>  来看软件包所属的仓库。</p>\n<h2 id=\"每行内容如何解读\"><a class=\"markdownIt-Anchor\" href=\"#每行内容如何解读\">#</a> 每行内容如何解读？</h2>\n<div class=\"note info\">\n<p>以下内容摘自 UC Berkeley System Admin Decal 原文</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deb http://mirrors/debian/ stretch-backports main contrib non-free</pre></td></tr></table></figure><blockquote>\n<p><code>deb</code>  is binary package source.  <code>deb-src</code>  indicates src packages.<br>\n <code>http://…</code>  describes the location<br>\n <code>stretch-backports</code>  means that this is for  <code>Jessie stretch</code>  and from a  <code>backport</code>  repository<br>\n <code>main</code>  means that the repo has packages licensed under  <code>Debian Free Software Guidelines (DFSG)</code> <br>\n <code>contrib</code>  repos have packages licensed under  <code>DSFG</code>  but require  <code>non-free dependencies</code> <br>\n <code>non-free</code>  repos have packages that do not comply with  <code>DSFG</code></p>\n</blockquote>\n<h1 id=\"手动安装包\"><a class=\"markdownIt-Anchor\" href=\"#手动安装包\">#</a> 手动安装包</h1>\n<p>包中通常含有 <code>Makefile</code>  文件，我们可以手动的进行安装。<br>\n步骤：</p>\n<ol>\n<li>安装所需的相关包，例如 <code>gcc</code>  等</li>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>make install</code></li>\n</ol>\n<p>不便之处：卸载麻烦。</p>\n<h1 id=\"包结构\"><a class=\"markdownIt-Anchor\" href=\"#包结构\">#</a> 包结构</h1>\n<p>Debian 包通常具有如下几个目录和文件：</p>\n<ul>\n<li><code>control</code> ：涵盖包的元信息，例如包的大小、版本、依赖</li>\n<li><code>debian-binary</code></li>\n<li><code>etc</code> ：配置文件</li>\n<li><code>md5sums</code> ：文件有效性检验</li>\n<li><code>usr</code>\n<ul>\n<li><code>bin</code> ：可执行文件，要加到 <code>$PATH</code>  环境变量中</li>\n<li><code>share</code> ：文档，man page，本地化设置\n<ul>\n<li><code>doc</code> ：文档</li>\n<li><code>info</code> : info page</li>\n<li><code>locale</code> ：本地化设置</li>\n<li><code>man</code> ：man page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自己组包\"><a class=\"markdownIt-Anchor\" href=\"#自己组包\">#</a> 自己组包</h1>\n<h2 id=\"usr-目录下几个重要的目录\"><a class=\"markdownIt-Anchor\" href=\"#usr-目录下几个重要的目录\">#</a> /usr 目录下几个重要的目录</h2>\n<ul>\n<li><code>/usr/bin</code>  二进制可执行文件</li>\n<li><code>/usr/lib</code>  相关的库</li>\n<li><code>/usr/include</code>  头文件</li>\n<li><code>/usr/share</code>  文档等等</li>\n</ul>\n<h2 id=\"打包过程将hellopenguinc程序打包\"><a class=\"markdownIt-Anchor\" href=\"#打包过程将hellopenguinc程序打包\">#</a> 打包过程：将 <code>hellopenguin.c</code>  程序打包</h2>\n<h3 id=\"初始准备\"><a class=\"markdownIt-Anchor\" href=\"#初始准备\">#</a> 初始准备</h3>\n<ol>\n<li>编写 <code>hellopenguin.c</code>  程序</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Penguin!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>编译 <code>hellopenguin.c</code>  程序，生成可执行文件 <code>hellopenguin</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc hellopenguin.c <span class=\"token parameter variable\">-o</span> hellopenguin</pre></td></tr></table></figure><h3 id=\"打包环境准备\"><a class=\"markdownIt-Anchor\" href=\"#打包环境准备\">#</a> 打包环境准备</h3>\n<ol>\n<li>使用 <code>fpm</code>  工具 ( <code>Ruby Gem</code> )</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> ruby-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">sudo</span> gem <span class=\"token function\">install</span> fpm</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ fpm <span class=\"token parameter variable\">-s</span> <span class=\"token function\">dir</span> <span class=\"token parameter variable\">-t</span> deb <span class=\"token parameter variable\">-n</span> <span class=\"token punctuation\">[</span>name here<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-v</span> <span class=\"token punctuation\">[</span>version <span class=\"token comment\">#] -C [the directory with the /usr folder]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>如果 <code>gem</code>  安装 <code>fpm</code>  过慢的话，需要给 ruby 环境换源，命令如下（这里使用清华源）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加镜像源并移除默认源</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gem sources <span class=\"token parameter variable\">--add</span> https://mirrors.tuna.tsinghua.edu.cn/rubygems/ <span class=\"token parameter variable\">--remove</span> https://rubygems.org/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 列出已有源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gem sources <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 应该只有镜像源一个</span></pre></td></tr></table></figure><p>或者在 <code>~/.gemrc</code>  中将 <code>https://mirrors.tuna.tsinghua.edu.cn/rubygems/</code>  加到 <code>sources</code>  字段。</p>\n</div>\n<ol start=\"3\">\n<li>查看 <code>fpm</code>  是否安装，输入 <code>fpm</code></li>\n</ol>\n<h3 id=\"创建包文件夹\"><a class=\"markdownIt-Anchor\" href=\"#创建包文件夹\">#</a> 创建包文件夹</h3>\n<ol>\n<li>创建目录 <code>packpenguin/usr/bin</code> ，将 <code>hellopenguin</code>  放进去</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> packpenguin/usr/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> hellopenguin packpenguin/usr/bin</pre></td></tr></table></figure><ol start=\"2\">\n<li>在 <code>packpenguin</code>  的父目录中，使用 <code>fpm</code>  进行打包，命令如下：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fpm <span class=\"token parameter variable\">-s</span> <span class=\"token function\">dir</span> <span class=\"token parameter variable\">-t</span> deb <span class=\"token parameter variable\">-n</span> hellopenguin <span class=\"token parameter variable\">-v</span> <span class=\"token number\">1.0</span>~ocf1 <span class=\"token parameter variable\">-C</span> packpenguin</pre></td></tr></table></figure><p>其中几个字段解释如下：</p>\n<ul>\n<li><code>-s</code> ：使用一个目录构建</li>\n<li><code>-t</code> ：生成 <code>deb</code>  包</li>\n<li><code>-n</code> ：输出包的名字叫 <code>hellopenguin</code></li>\n<li><code>-v</code> ：版本号为 <code>1.0~ocf1</code></li>\n<li><code>-C</code> : 由 <code>packpenguin</code>  目录生成</li>\n</ul>\n<ol start=\"3\">\n<li>安装我们组建的包: <code>sudo dpkg -i ./hellopenguin_1.0~ocf1_amd64.deb</code></li>\n<li>输入 <code>hellopenguin</code> ，运行 <code>hellopenguin</code> ，可以看到输出了 <code>Hello Penguin!</code></li>\n</ol>\n<div class=\"note info\">\n<p>要卸载我们安装的包，可以使用 <code>dpkg --remove hellopenguin</code>  命令。</p>\n</div>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVJNTlBSSE5vaDRhNUtXd1hZOGZCV0o0OW5CYWZ4Ym80Zy1PdlNaWjg1VjgvZWRpdCNzbGlkZT1pZC5nNTM2NGNlYzI4Y18wXzEx\">Packaging</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTIvI2dyYWRpbmctbm90ZQ==\">Advanced Lab 2 - Packages and Packaging and Troubleshooting</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVVKSE83Zlhvay02Uk43REFKNVNQVHFjQ1hpUlNSOGhwR1p4OU9RTW5NT1UvZWRpdCNzbGlkZT1pZC5w\">Distros, Packaging, and Compiling</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYjQvI3doYXQtaXMtYS1kaXN0cmlidXRpb24=\">Beginner Lab 4 - Debian, packages, compiling software</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0vd2lraQ==\">FPM 文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90bGRyLnNoLw==\">TLDR 页面</span></li>\n</ul>\n",
            "tags": [
                "Debian",
                "Linux",
                "操作系统",
                "包管理",
                "notes"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "url": "https://salvely.github.io/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "title": "Arch Linux安装实录&知识讲解&踩坑分析（超详细！）",
            "date_published": "2023-10-12T05:50:44.000Z",
            "content_html": "<div class=\"note danger\">\n<p>此坑还没填完，暂时只添加了安装部分（装完发现 Arch wiki 实在是已经写得很详细了），还有很多的知识还没有完全弄清楚和补充。<br>\n等我学习完 <code>计算机组成原理</code> ， <code>操作系统</code> 和 <code>计算机网络</code> 后会再来填坑。</p>\n</div>\n<div class=\"note info\">\n<p>本文安装过程基本按照 Arch Linux 安装文档，附带了额外的相关知识。其中可能伴有踩坑，但是也是一种经验啦！😄<br>\n如发现本文某些地方有误，请在评论区评论，我看到的话会改过来哒！</p>\n</div>\n<h1 id=\"写作起因\"><a class=\"markdownIt-Anchor\" href=\"#写作起因\">#</a> 写作起因</h1>\n<p>Arch Linux 的安装过程涉及较多的操作系统知识，而不仅仅是像 Ubuntu/Debian 那样提供 GUI 中的几个选项供你选择。此外，Arch Linux 的文档较为详细（Arch wiki 简直是棒极了！）。<br>\n因此，本教程不只是演示本人的安装 &amp; 踩坑过程，还附带许多的相关文档带读、踩坑原因分析等。</p>\n<h1 id=\"本文适合哪些人\"><a class=\"markdownIt-Anchor\" href=\"#本文适合哪些人\">#</a> 本文适合哪些人</h1>\n<ol>\n<li>热爱倒腾的</li>\n<li>不怕踩坑的</li>\n<li>想要通过 Arch Linux 安装过程递归学习其他知识的</li>\n</ol>\n<h1 id=\"对于其他同学\"><a class=\"markdownIt-Anchor\" href=\"#对于其他同学\">#</a> 对于其他同学</h1>\n<p>若您仅需要高效的安装 Arch Linux，而不希望看相关知识及其他无关的踩坑过程的，可以：</p>\n<ol>\n<li>参考其他博主的奶妈式教程</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81OTYyMjc1MjQ=\">Arch Linux 详细安装教程，萌新再也不怕了！「2023.09」</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoLmljZWt5bGluLm9ubGluZS8=\">archlinux 简明指南 包含安装、配置、维护等，帮助新手快速上手</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMv\">Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ttaW5kaS9qaWZmeWJveC1hcmNobGludXgtdHV0b3JpYWw=\">Github 教程 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RzMTk5OTE5OTkvQXJjaExpbnV4LUluc3RhbGwtVHV0b3JpYWw=\">Github 教程 2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NzgwNzU1Mzg=\">2022 年 12 月最新安装 Archlinux 一次过的教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTM4NTkyMzY=\">2022.5 archlinux 详细安装过程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWl2bS5jbi9hcmNobGludXgtaW5zdGFsbGF0aW9uLWd1aWRlLXNpbXBsZQ==\">ArchLinux 安装指南（新手向）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MzM5MjAwNzk=\">Archlinux 安装教程超详细（2021.11.15</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YyMDc1MzA1Mi8=\">Arch Linux 完全安装教程 2023.10</span></li>\n</ul>\n<ol start=\"2\">\n<li>archinstall 工具</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTE0NDQ0LTEuaHRtbA==\">用 archinstall 自动化脚本安装 Arch Linux</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyY2hsaW51eC9hcmNoaW5zdGFsbA==\">archinstall github 链接</span></li>\n</ul>\n<ol start=\"3\">\n<li>一些图形化界面安装工具</li>\n</ol>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Nwb29reWtpZG1tL3plbl9pbnN0YWxsZXI=\">Zen installer</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyY2gtbGludXgtZ3VpL2FsZy1yZWxlYXNlcw==\">archlinuxgui</span></li>\n</ul>\n<ol start=\"4\">\n<li>Netboot 网络安装</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Rlbmd0ZW5nc25ha2UvQXJjaC1saW51eC1pbnN0YWxsLXR1dG9yaWFs\">Github 上提供的脚本（按照里面的命令一个个输入）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQ2F0ZWdvcnk6SW5zdGFsbGF0aW9uX3Byb2Nlc3M=\">其他安装方式</span></li>\n<li>要在一个 Ubuntu 虚拟机上安装 Arch 虚拟机（嵌套虚拟机），请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTMv\">这里</span></li>\n</ol>\n<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在使用 Arch 前看了 UCB System Admin Decal 的 Linux Pre-install and Install 一节，其中的实验是在 Ubuntu 虚拟机上安装 Arch。Arch 的安装涉及到自己进行分区，对系统进行加密和解密等，我觉得非常有趣，对于操作系统本身也是一个探索的过程。因此决定挑战自己跟着官方文档进行安装。<br>\n以前每次安装 Linux 虚拟机，包括 Ubuntu 和 Debian，都是跟着一些博主自己写的奶妈式手把手安装教程一步步的装。每次都能安装成功，但是总是感觉少了一些 <code>【探索的乐趣】</code> 😆。<br>\n今天我就要跟着 Arch Linux 的官方文档一步步装，感受一把极致的安装酸爽体验！</p>\n<details><summary>如果你也想体验自己安装 Arch，或者是想成为 Arch 开发者，下面内容可能对你有帮助：</summary><div>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSW5zdGFsbGF0aW9uX2d1aWRlI0FjcXVpcmVfYW5faW5zdGFsbGF0aW9uX2ltYWdl\">Arch Linux 官方安装文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaGlzby8tL2lzc3Vlcw==\">Issue tracker</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXN0cy5hcmNobGludXgub3JnL21haWxtYW4zL2xpc3RzL2FyY2gtcmVsZW5nLmxpc3RzLmFyY2hsaW51eC5vcmcv\">Mailing List</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCOCVCOCVFOCVBNyU4MSVFOSU5NyVBRSVFOSVBMiU5OA==\">常见问题及解答</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL0hlbHA6JUU5JTk4JTg1JUU4JUFGJUJC\">帮助</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL1Byb2plY3Q6JUU1JTg1JUIzJUU0JUJBJThF\">贡献项目</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL01hbl9wYWdl\">帮助手册</span></li>\n</ol>\n</div></details>\n<h1 id=\"过程简介\"><a class=\"markdownIt-Anchor\" href=\"#过程简介\">#</a> 过程简介</h1>\n<p>安装过程涉及到的步骤包含：</p>\n<ol>\n<li>UEFI 模式启动（或 BIOS，但是分区会不一样，需要注意）</li>\n<li>设置键盘模式</li>\n<li>检查网络连接</li>\n<li>更新系统时钟</li>\n<li>创建磁盘分区</li>\n<li>初始化分区中的文件系统（ <code>/</code>  文件系统可选是否加密）</li>\n<li>挂载文件系统</li>\n<li>利用 <code>pacstrap</code>  安装必要的包：linux 内核， <code>initrd</code> 、 <code>init system</code> 、 <code>pacman</code> \\、 <code>base</code>  等等</li>\n<li>利用 <code>genfstab</code>  生成 <code>/etc/fstab</code> （文件系统表）</li>\n<li><code>arch-chroot</code>  进入 <code>/mnt</code>  目录</li>\n<li>通过修改 <code>/etc/hostname</code>  修改主机名<details><summary>boot 启动原理</summary><div>\n<blockquote>\n<p>图源自 UCB System Admin Decal (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMW9MdHNqc0VJc3ZDaE9JMzFfNVlZRmhJTGZ6R2x5eDdIazlEc0wxTnYtbWMvZWRpdD9wbGk9MSNzbGlkZT1pZC5nOWI0MTRkZGEwNF8wXzE1OA==\">https://docs.google.com/presentation/d/1oLtsjsEIsvChOI31_5YYFhILfzGlyx7Hk9DsL1Nv-mc/edit?pli=1#slide=id.g9b414dda04_0_158</span>)</p>\n</blockquote>\n</div></details>\n</li>\n</ol>\n<p><img data-src=\"boot.png\" alt=\"boot启动原理\"><br>\n +++</p>\n<h1 id=\"获取安装镜像后缀为iso\"><a class=\"markdownIt-Anchor\" href=\"#获取安装镜像后缀为iso\">#</a> 获取安装镜像（后缀为.iso）</h1>\n<p>看了一下下载界面，最顶部写了当前发行版的信息，下面是对于几种不同用户的安装方式以及校验和，最后是所有的 Arch 镜像源集合。</p>\n<h2 id=\"发行版信息\"><a class=\"markdownIt-Anchor\" href=\"#发行版信息\">#</a> 发行版信息</h2>\n<p>当前发布版本: 2023.09.01<br>\n 内核版本: 6.4.12<br>\nISO 镜像文件大小: 804.3 MB</p>\n<h2 id=\"几种下载方式\"><a class=\"markdownIt-Anchor\" href=\"#几种下载方式\">#</a> 几种下载方式</h2>\n<h3 id=\"对于已经是-arch-用户的人\"><a class=\"markdownIt-Anchor\" href=\"#对于已经是-arch-用户的人\">#</a> 对于已经是 Arch 用户的人</h3>\n<ol>\n<li>通过命令 <code>pacman -Syu</code>  更新</li>\n<li>通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL21pcnJvcmxpc3Qv\">这里</span>更新镜像源</li>\n</ol>\n<h3 id=\"种子链接下载官方推荐\"><a class=\"markdownIt-Anchor\" href=\"#种子链接下载官方推荐\">#</a> 种子链接下载（官方推荐）</h3>\n<p>对于这种资源，可以使用 <code>百度网盘</code> 或者 <code>迅雷</code> 下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘 / 迅雷，然后将其中的 iso 镜像文件下载到本地目录中。</p>\n<h3 id=\"netboot\"><a class=\"markdownIt-Anchor\" href=\"#netboot\">#</a> Netboot</h3>\n<p>安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。</p>\n<blockquote>\n<p>Netboot 使用定制的  <code>iPXE</code>  版本。 实时系统的 Linux 内核、 <code>initramfs</code>  和  <code>squashfs 文件</code> 是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用 <code>加密签名</code> 进行验证。</p>\n</blockquote>\n<p>这其中有几个问题：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pcHhlLm9yZy9zdGFydA==\">iPXE</span> 是啥？<strong>一种开源的网络启动固件</strong><br>\n其官方文档中的描述如下：\n<blockquote>\n<p>iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如：</p>\n<ul>\n<li>通过 HTTP 从 Web 服务器启动</li>\n<li>从 iSCSI SAN 引导</li>\n<li>通过 FCoE 从光纤通道 SAN 启动</li>\n<li>从 AoE SAN 引导</li>\n<li>从无线网络引导</li>\n<li>从广域网引导</li>\n<li>从 Infiniband 网络引导</li>\n<li>使用脚本控制引导过程</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求：</p>\n<ul>\n<li>具有 DHCP 自配置的网络</li>\n<li>能够运行系统的足够存储</li>\n</ul>\n<p>而它的具体实现是基于 <code>PXE</code>  协议。<br>\n基于递归学习的理念，我又查了查<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JUEyJTg0JUU1JTkwJUFGJUU1JThBJUE4JUU2JTg5JUE3JUU4JUExJThDJUU3JThFJUFGJUU1JUEyJTgzIw==\"> PXE</span>。。。<br>\n其基本概念如下：</p>\n<blockquote>\n<p>预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。<br>\nPXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。<br>\nPXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。</p>\n</blockquote>\n<p>其基本的运行机制是：</p>\n<blockquote>\n<p>客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它 [2]。</p>\n</blockquote>\n<p>由 <code>PXE</code>  机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。 <code>PXE</code>  的协议规范在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTMxMTAyMDAzMTQxL2h0dHA6Ly9kb3dubG9hZC5pbnRlbC5jb20vZGVzaWduL2FyY2hpdmVzL3dmbS9kb3dubG9hZHMvcHhlc3BlYy5wZGY=\"> intel 的这篇文档中</span>可以查到。而 PXE 的两个实现，一个为 <code>iPXE</code> ，另一个则是 <code>gPXE</code> 。 <code>gPXE</code>  目前已经停止开发，取而代之的是 <code>iPXE</code> 。<br>\n对于 <code>iPXE</code>  和 <code>gPXE</code>  更详细的介绍，可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmhjbC5tb2UvYXJjaGl2ZXMvMjE3Nw==\">这篇博文</span></p>\n<ol start=\"2\">\n<li>\n<p><code>initramfs文件</code> 和 <code>squashfs文件</code> 做什么用？<br>\nTODO</p>\n</li>\n<li>\n<p>为什么 <code>Arch Linux</code>  在下载过程中需要使用加密签名对镜像完整性进行验证？<br>\nTODO</p>\n</li>\n</ol>\n<h3 id=\"vagrant-images-docker-images\"><a class=\"markdownIt-Anchor\" href=\"#vagrant-images-docker-images\">#</a> Vagrant images &amp; docker images</h3>\n<p>TODO</p>\n<h3 id=\"vm-image\"><a class=\"markdownIt-Anchor\" href=\"#vm-image\">#</a> VM image</h3>\n<p>archlinux 虚拟机可从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaC1ib3hlcy8tL3BhY2thZ2Vz\">这里</span>下载，使用手册<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaC1ib3hlcw==\">在此</span>。</p>\n<h3 id=\"http-下载最常用\"><a class=\"markdownIt-Anchor\" href=\"#http-下载最常用\">#</a> HTTP 下载（最常用）</h3>\n<p>从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录 <code>sha256sums.txt</code>  及 <code>b2sums.txt</code>  文件中的校验和匹配。<br>\n下载签名： <code>sq wkd get pierre@archlinux.org -o release-key.pgp</code> <br>\n 验证： <code>sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso</code></p>\n<div class=\"note info\">\n<p><code>sq</code>  命令需要使用 <code>scoop</code>  进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文</p>\n</div>\n<h2 id=\"校验和\"><a class=\"markdownIt-Anchor\" href=\"#校验和\">#</a> 校验和</h2>\n<p>最新版本的校验和下载详见官网。在镜像源网站上也可以看到 <code>sha256sums.txt</code>  和 <code>b2sums.txt</code> <br>\n<img data-src=\"tsinghua_mirror.png\" alt=\"清华大学镜像站\">。下载镜像后我们需要利用它与我们下载到的镜像的校验和进行比对 (主要是用于比对，这两个文件可下载也可不下载，在镜像站上也能打开，只要我们下载到的镜像的校验和文件中版本对应的那行的校验和匹配就行了)。</p>\n<h2 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一</h2>\n<ol>\n<li>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==\"> Download 界面</span>选择推荐的 BitTorrent Download:<br>\n<img data-src=\"download.png\" alt=\"下载界面\"></li>\n<li>下载到本地电脑的 Downloads 文件夹中，其后缀名为 <code>.torrent</code></li>\n<li>打开百度网盘，在其中上传该文件</li>\n<li>上传后双击该文件，点击开始下载到网盘，等待下载完成（有点慢哈！）</li>\n<li>下载到网盘后，将 <code>iso镜像文件</code> 下载到在自选的本地目录中<div class=\"note info\">\n<p>由于这种方式下载过慢，笔者建议使用方法二，即通过开源镜像站进行下载。</p>\n</div>\n</li>\n</ol>\n<h2 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二</h2>\n<ol>\n<li>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==\"> Download 界面</span>下翻，找到中国的镜像站列表:<br>\n<img data-src=\"mirrors.png\" alt=\"中国镜像站列表\"></li>\n<li>在其中选择 <code>tuna.tsinghua.edu.cn</code> ，即清华大学镜像站（我每次都用他们的镜像，速度不错）<br>\n<img data-src=\"tsinghua_mirror.png\" alt=\"清华大学镜像站\"></li>\n<li>选择 <code>archlinux-2023.09.01-x86_64.iso</code>  下载</li>\n<li>将 <code>.iso</code>  文件保存到我们想要虚拟机保存的目录中</li>\n</ol>\n<h1 id=\"获取gnupg签名\"><a class=\"markdownIt-Anchor\" href=\"#获取gnupg签名\">#</a> 获取<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL0dudVBH\"> GnuPG</span> 签名</h1>\n<blockquote>\n<p>GnuPG 是什么？<br>\nGnuPG 是完整实现了 RFC4880（即 PGP）所定义的 OpenPGP 标准的自由软件。GnuPG 可以加密和签名你的数据和通讯信息，包含一个通用的密钥管理系统以及用于各种公钥目录的访问模块。GnuPG，简称 GPG，是一个易于与其它程序整合的命令行工具，拥有很多前端程序和函数库。GnuPG 还支持 S/MIME 和 Secure Shell (ssh)。</p>\n</blockquote>\n<p>从上述清华大学镜像站，可获取 iso 版本对应的 PGP 签名 <code>archlinux-2023.09.01-x86_64.iso.sig`` ![清华大学镜像站](tsinghua_mirror.png) 在本次安装中，我使用的是</code>  Git Bash <code>，其中装有GPG，</code> cmd <code>和</code>  powershell` 中也装有 gpg，可选择一个终端进行后续操作。</p>\n<h1 id=\"验证签名\"><a class=\"markdownIt-Anchor\" href=\"#验证签名\">#</a> 验证签名</h1>\n<p>为避免因 HTTP 连接下载镜像时遭到拦截，获取到恶意镜像，我们需要利用 PGP 签名对镜像进行验证。<br>\n通过以下命令验证:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg --keyserver-options auto-key-retrieve <span class=\"token parameter variable\">--verify</span> archlinux-version-x86_64.iso.sig</pre></td></tr></table></figure><p>其中 <code>version</code>  替换成你所下载的版本号，如 <code>2023.09.01</code> 。我的显示结果是：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>legion@DESKTOP-ROOSFVQ MINGW64 /e/VMs/Arch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ gpg --keyserver-options auto-key-retrieve <span class=\"token parameter variable\">--verify</span> archlinux-2023.09.01-x86_64.iso.sig</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gpg: assuming signed data <span class=\"token keyword\">in</span> <span class=\"token string\">'archlinux-2023.09.01-x86_64.iso'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gpg: Signature made <span class=\"token number\">2023</span>年09月 <span class=\"token number\">1</span>日 <span class=\"token number\">18</span>:48:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gpg:                using EDDSA key 3E80CA1A8B89F69CBA57D98A76A5EF9054449A5C</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gpg:                issuer <span class=\"token string\">\"pierre@archlinux.org\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>gpg: Good signature from <span class=\"token string\">\"Pierre Schmitz &lt;pierre@archlinux.org>\"</span> <span class=\"token punctuation\">[</span>unknown<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>gpg: WARNING: This key is not certified with a trusted signature<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>gpg:          There is no indication that the signature belongs to the owner.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Primary key fingerprint: 3E80 CA1A 8B89 F69C BA57  D98A 76A5 EF90 <span class=\"token number\">5444</span> 9A5C</pre></td></tr></table></figure><p>若从镜像站下载，则会显示 <code>fingerprint</code> ，我们需要打开<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rZXlzZXJ2ZXIudWJ1bnR1LmNvbS9wa3MvbG9va3VwP29wPXZpbmRleCZhbXA7ZmluZ2VycHJpbnQ9b24mYW1wO2V4YWN0PW9uJmFtcDtzZWFyY2g9MHgzRTgwQ0ExQThCODlGNjlDQkE1N0Q5OEE3NkE1RUY5MDU0NDQ5QTVD\"> fingerprint 合集</span>，确保我们所获得的镜像的 <code>fingerprint</code>  和该网站上的 fingerprint 吻合。（确保公钥的指纹等于其中一位签署了 ISO 文件 Arch Linux 开发者的指纹）</p>\n<h1 id=\"准备安装介质\"><a class=\"markdownIt-Anchor\" href=\"#准备安装介质\">#</a> 准备安装介质</h1>\n<p>安装镜像包括：U 盘，光盘，和带有 PXE 的网络安装镜像。此处我是用 VMWare 虚拟机进行安装。</p>\n<h1 id=\"vmware-新建虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#vmware-新建虚拟机\">#</a> VMWare 新建虚拟机</h1>\n<p>依次选择：</p>\n<ol>\n<li>自定义（高级）</li>\n<li>硬件兼容性</li>\n<li>稍后安装操作系统</li>\n<li>本内核版本为 6.4.12，因 VMware 中没有 Arch，因此我选择 <code>其他 Linux 5.x 内核 64位</code></li>\n<li>选择安装目录（自定）</li>\n<li>处理器配置、<s>内存大小分配</s>均选择默认（注意：内存大小选择 2G，768MB 完全不够)</li>\n<li>使用网络地址转换（NAT）</li>\n<li>SCSI 控制器：LSI Logic（L）</li>\n<li>虚拟磁盘类型：SCSI（S）</li>\n<li>创建新虚拟磁盘</li>\n<li>最大磁盘大小默认，将虚拟磁盘拆分成多个文件</li>\n<li>磁盘文件名默认</li>\n<li>自定义硬件 -&gt; 新 CD/DVD-&gt; 使用 ISO 映像文件 -&gt; 选择我们下载的 iso 文件 -&gt; 关闭</li>\n<li>完成</li>\n<li>你可以自行决定 BIOS 或 UEFI 模式启动（我选择 UEFI，但是应该影响不大）</li>\n<li>点击开启此虚拟机<div class=\"note info\">\n<p>Ready for the journey? Let’s go!</p>\n</div>\n</li>\n</ol>\n<h1 id=\"进入安装程序\"><a class=\"markdownIt-Anchor\" href=\"#进入安装程序\">#</a> 进入安装程序</h1>\n<ol>\n<li>默认第一项，等待一会儿，随后进入命令行模式</li>\n</ol>\n<h1 id=\"一号坑vmware-默认分配内存-768mb-过小需要-2g\"><a class=\"markdownIt-Anchor\" href=\"#一号坑vmware-默认分配内存-768mb-过小需要-2g\">#</a> 一号坑：VMware 默认分配内存 768MB 过小，需要 2G</h1>\n<p>开局遇雷：怎么回事？<br>\n<img data-src=\"command.png\" alt=\"命令行模式开启\"></p>\n<div class=\"note info\">\n<p>参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDk5MDgwL2FydGljbGUvZGV0YWlscy8xMzE3MTE1MDMjOn46dGV4dD0yJUUzJTgwJTgxJUU2JTlCJUI0JUU2JTk2JUIwJUU5JTk1JTlDJUU1JTgzJThGJUU2JUJBJTkwcGFjbWFuLC1TeXkzJUUzJTgwJTgxJUU2JTlCJUI0JUU2JTk2JUIwUk9PVCVFNSVBRiU4NiVFNyVBMCU4MXBhc3N3ZDQlRTMlODAlODE=\">这篇博文</span>虚拟机默认的是 768MB，不够。在设置中修改为 2G, 成功启动。</p>\n</div>\n<h1 id=\"二号坑网络出现问题\"><a class=\"markdownIt-Anchor\" href=\"#二号坑网络出现问题\">#</a> 二号坑：网络出现问题</h1>\n<p><img data-src=\"network_error.png\" alt=\"Arch网络出问题\"></p>\n<div class=\"note info\">\n<p>关了虚拟机，重新开机，成功启动<br>\n<img data-src=\"success.png\" alt=\"Arch成功启动\"></p>\n</div>\n<h1 id=\"配置控制台键盘布局和字体\"><a class=\"markdownIt-Anchor\" href=\"#配置控制台键盘布局和字体\">#</a> 配置控制台键盘布局和字体</h1>\n<p>系统启动后，控制台键盘布局默认为 us（美式键盘）。如果您需要列出所有可用的键盘布局，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> /usr/share/kbd/keymaps/**/*.map.gz</pre></td></tr></table></figure><p><img data-src=\"keymaps.png\" alt=\"显示所有键盘布局\"><br>\n此处我使用 <code>us</code>  键盘布局，不修改。</p>\n<h1 id=\"检查是否连接到互联网\"><a class=\"markdownIt-Anchor\" href=\"#检查是否连接到互联网\">#</a> 检查是否连接到互联网</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ip</span> <span class=\"token function\">link</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ping</span> archlinux.org</pre></td></tr></table></figure><p><img data-src=\"network.png\" alt=\"检查网络连接\"></p>\n<h1 id=\"更新系统时间\"><a class=\"markdownIt-Anchor\" href=\"#更新系统时间\">#</a> 更新系统时间</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>timedatectl <span class=\"token comment\">#查看系统时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>timedatectl list-timezones <span class=\"token comment\">#查看所有时区</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>timedatectl set-timezone <span class=\"token string\">\"Asia/Shanghai\"</span> <span class=\"token comment\"># 设置为亚洲上海</span></pre></td></tr></table></figure><p><img data-src=\"set-timezone.png\" alt=\"设置时区\"></p>\n<div class=\"note info\">\n<p>要创建磁盘分区了，为保证出问题后还能倒回来，此处拍摄快照 1</p>\n</div>\n<h1 id=\"创建硬盘分区\"><a class=\"markdownIt-Anchor\" href=\"#创建硬盘分区\">#</a> 创建硬盘分区</h1>\n<h2 id=\"指南\"><a class=\"markdownIt-Anchor\" href=\"#指南\">#</a> 指南</h2>\n<p>系统如果识别到计算机的内置硬盘、U 盘或者移动硬盘等类型磁盘，就会将其分配为一个块设备，如 /dev/sda、/dev/nvme0n1 或 /dev/mmcblk0。可以使用 lsblk 或者 fdisk 查看：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fdisk</span> -l<span class=\"token punctuation\">(</span>此处为小写字母l<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"block.png\" alt=\"块设备\"><br>\n结果中以 rom、loop 或者 airoot 结尾的设备可以被忽略。</p>\n<div class=\"note info\">\n<p>提示：在分区之前，请您检查 NVMe 驱动器和 Advanced Format 硬盘是否使用了最佳逻辑扇区大小。需要注意的是，更改逻辑扇区大小后，可能会导致在 Windows 系统中出现兼容性问题。<br>\n对于一个选定的设备，以下分区是必须要有的：</p>\n<ol>\n<li>一个根分区（挂载在 根目录）/；</li>\n<li>要在 UEFI 模式中启动，还需要一个 EFI 系统分区。</li>\n<li>如果您需要创建多级存储例如 LVM、磁盘加密 或 RAID，请您在这时候完成。<br>\n请使用分区工具（fdisk 、parted、cfdisk 等等）修改分区表。例如：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fdisk</span> /dev/the_disk_to_be_partitioned（要被分区的磁盘）</pre></td></tr></table></figure><p>注意：<br>\n如果您想要的磁盘没有显示出来， 确保您的磁盘控制器未处于 RAID 模式。<br>\n如果要启动的磁盘已经有一个 EFI 系统分区，就不要再新建 EFI 分区了，而是使用现有的 EFI 分区。<br>\n如果文件系统支持，交换空间 可以通过 交换文件 实现。</p>\n</div>\n<h2 id=\"分区方案\"><a class=\"markdownIt-Anchor\" href=\"#分区方案\">#</a> 分区方案：</h2>\n<p><img data-src=\"partition.png\" alt=\"分区方案\"></p>\n<h2 id=\"分区步骤\"><a class=\"markdownIt-Anchor\" href=\"#分区步骤\">#</a> 分区步骤</h2>\n<h3 id=\"创建-gpt-分区表\"><a class=\"markdownIt-Anchor\" href=\"#创建-gpt-分区表\">#</a> 创建 GPT 分区表</h3>\n<ol>\n<li>输入 <code>fdisk /dev/sda</code> ，对 <code>/dev/sda</code>  磁盘进行分区</li>\n<li>输入 <code>g</code> ，创建一个 <code>GUID</code>  分区表</li>\n</ol>\n<h3 id=\"创建第一个分区efi-分区\"><a class=\"markdownIt-Anchor\" href=\"#创建第一个分区efi-分区\">#</a> 创建第一个分区：EFI 分区</h3>\n<ol>\n<li>输入 <code>n</code> ，创建第一个分区，输入其编号（默认为 1，即 <code>/dev/sda1</code> ）</li>\n<li>回车，默认其大小</li>\n<li>对最后一个扇区，输入 <code>+512M</code></li>\n<li>输入 <code>t</code>  来将这个新分区改为 &quot;EFI System&quot;</li>\n<li>输入 <code>L</code>  来查看所有分区名，输入 <code>q</code>  退出，可见 <code>EFI System</code>  分区别名为 1</li>\n<li>输入 <code>1</code> ，将分区改为 <code>EFI System</code></li>\n</ol>\n<h3 id=\"创建第二个分区文件系统分区\"><a class=\"markdownIt-Anchor\" href=\"#创建第二个分区文件系统分区\">#</a> 创建第二个分区：文件系统分区</h3>\n<ol>\n<li>输入 <code>n</code> ，创建第二个分区</li>\n<li>两次回车，使用默认分区号和扇区大小</li>\n<li>输入 <code>-512M</code> ，为交换分区留出 512MB 大小来</li>\n<li>分区默认名为 <code>Linux filesystem</code> ，因此不需要改</li>\n</ol>\n<h3 id=\"创建第三个分区交换分区\"><a class=\"markdownIt-Anchor\" href=\"#创建第三个分区交换分区\">#</a> 创建第三个分区：交换分区</h3>\n<ol>\n<li>输入 <code>n</code> ，创建第三个分区</li>\n<li>连按 3 次回车，接受所有默认设置</li>\n<li>输入 <code>t</code> ，将新分区改为 <code>Linux Swap</code> , 别名为 19</li>\n</ol>\n<h3 id=\"查看分区结果\"><a class=\"markdownIt-Anchor\" href=\"#查看分区结果\">#</a> 查看分区结果</h3>\n<p>输入 <code>p</code></p>\n<h3 id=\"完成修改\"><a class=\"markdownIt-Anchor\" href=\"#完成修改\">#</a> 完成修改</h3>\n<p>输入 <code>w</code></p>\n<h1 id=\"格式化分区\"><a class=\"markdownIt-Anchor\" href=\"#格式化分区\">#</a> 格式化分区</h1>\n<p>对于不同的分区，我们使用不同的文件系统：</p>\n<h2 id=\"esp-分区格式化mkfsfat格式化-fat32-文件系统\"><a class=\"markdownIt-Anchor\" href=\"#esp-分区格式化mkfsfat格式化-fat32-文件系统\">#</a> ESP 分区格式化： <code>mkfs.fat</code>  格式化 FAT32 文件系统</h2>\n<p>ESP 在 <code>/dev/sda1</code>  中，运行 <code>mkfs.fat -F32 /dev/sda1</code>  来挂载 FAT32 文件系统</p>\n<h2 id=\"根分区通过mkfsext4格式化-ext4-文件系统\"><a class=\"markdownIt-Anchor\" href=\"#根分区通过mkfsext4格式化-ext4-文件系统\">#</a> 根分区：通过 <code>mkfs.ext4</code>  格式化 ext4 文件系统</h2>\n<p><code>mkfs.ext4 /dev/sad2</code></p>\n<h2 id=\"交换分区格式化mkswap\"><a class=\"markdownIt-Anchor\" href=\"#交换分区格式化mkswap\">#</a> 交换分区格式化： <code>mkswap</code></h2>\n<p><code>mkswap /dev/sda3</code></p>\n<h1 id=\"挂载分区\"><a class=\"markdownIt-Anchor\" href=\"#挂载分区\">#</a> 挂载分区</h1>\n<h2 id=\"挂载根分区\"><a class=\"markdownIt-Anchor\" href=\"#挂载根分区\">#</a> 挂载根分区</h2>\n<p>将根磁盘卷挂载到 <code>/mnt</code> ，使用命令： <code>mount /dev/sda2 /mnt</code></p>\n<h2 id=\"挂载-efi-分区\"><a class=\"markdownIt-Anchor\" href=\"#挂载-efi-分区\">#</a> 挂载 EFI 分区</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> <span class=\"token parameter variable\">--mkdir</span> /dev/sda1 /mnt/boot</pre></td></tr></table></figure><h2 id=\"挂载-swap-分区\"><a class=\"markdownIt-Anchor\" href=\"#挂载-swap-分区\">#</a> 挂载 swap 分区</h2>\n<p><code>swapon /dev/sda3</code>  来启用交换分区</p>\n<p>稍后 genfstab (8) 将自动检测挂载的文件系统和交换空间。</p>\n<h1 id=\"开始安装系统\"><a class=\"markdownIt-Anchor\" href=\"#开始安装系统\">#</a> 开始安装系统</h1>\n<h2 id=\"选择镜像站\"><a class=\"markdownIt-Anchor\" href=\"#选择镜像站\">#</a> 选择镜像站</h2>\n<h3 id=\"安装reflector包\"><a class=\"markdownIt-Anchor\" href=\"#安装reflector包\">#</a> 安装 <code>reflector</code>  包</h3>\n<p>通常来说系统默认有，如果没有的话使用如下命令安装：<br>\n <code>sudo pacman -S reflector</code></p>\n<h3 id=\"更新源\"><a class=\"markdownIt-Anchor\" href=\"#更新源\">#</a> 更新源</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> reflector <span class=\"token parameter variable\">--country</span> China <span class=\"token parameter variable\">--save</span> /etc/pacman.d/mirrorlist.pacnew</pre></td></tr></table></figure><p>确保源准确无误后，将 <code>mirrorlist.pacnew</code>  复制到 <code>mirrorlist</code></p>\n<h2 id=\"安装必须的软件包\"><a class=\"markdownIt-Anchor\" href=\"#安装必须的软件包\">#</a> 安装必须的软件包</h2>\n<p>使用 pacstrap (8) 脚本，安装 base 包 软件包和 Linux 内核以及常规硬件的固件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pacstrap <span class=\"token parameter variable\">-K</span> /mnt base linux <span class=\"token function\">vim</span> man-db man-pages texinfo</pre></td></tr></table></figure><p>这时候可以同时额外安装计算机的 CPU 微码包。如果计算机是 Intel 的 CPU ，使用 <code>intel-ucode</code>  包，AMD CPU 则使用  <code>amd-ucode</code>  包。也可以暂时都不安装，等到进入系统后再安装。</p>\n<div class=\"note info\">\n<ol>\n<li>因为我是在虚拟机中安装，因此我不安装固件 <code>linux-firmware</code>  和微码包 <code>intel-ucode</code> 。如果你有想补充的软件，请加在 <code>pacstrap</code>  后面。</li>\n<li>是 <code>texinfo</code> ，不是 <code>textinfo</code> ，不要看错啦！</li>\n</ol>\n</div>\n<!-- ~~# 三号坑：出现`error: failed to install packages to new root`~~\n解决方案：\n3. `pacman -S archlinux-keyring`\n4. `pacman-key --refresh-keys`\n   -->\n<h1 id=\"配置系统\"><a class=\"markdownIt-Anchor\" href=\"#配置系统\">#</a> 配置系统</h1>\n<h2 id=\"生成-fstab-文件\"><a class=\"markdownIt-Anchor\" href=\"#生成-fstab-文件\">#</a> 生成 fstab 文件</h2>\n<p>通过以下命令生成 fstab 文件 (用 -U 或 -L 选项设置 UUID 或卷标)：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>genfstab <span class=\"token parameter variable\">-U</span> /mnt <span class=\"token operator\">>></span> /mnt/etc/fstab</pre></td></tr></table></figure><p>强烈建议在执行完以上命令后，检查一下生成的 <code>/mnt/etc/fstab</code>  文件是否正确。</p>\n<h2 id=\"chroot-到新安装的系统\"><a class=\"markdownIt-Anchor\" href=\"#chroot-到新安装的系统\">#</a> chroot 到新安装的系统</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arch-chroot /mnt</pre></td></tr></table></figure><div class=\"note info\">\n<p>提示：此处使用的是 arch-chroot 而不是直接使用 chroot，注意不要输错了。在 <code>arch-chroot</code>  进入 <code>/mnt</code>  后，提示符应该变为了 <code>[root@archiso]</code>  样式，如果没有，请检查一下前面的步骤是否都准确完成了。</p>\n</div>\n<h2 id=\"设置时区\"><a class=\"markdownIt-Anchor\" href=\"#设置时区\">#</a> 设置时区</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-sf</span> /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime</pre></td></tr></table></figure><p>地区名填 Asia, 城市名填 Shanghai<br>\n 然后运行 hwclock (8) 以生成 /etc/adjtime：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hwclock <span class=\"token parameter variable\">--systohc</span></pre></td></tr></table></figure><p>这个命令假定已设置硬件时间为 UTC 时间。</p>\n<h2 id=\"区域和本地化设置\"><a class=\"markdownIt-Anchor\" href=\"#区域和本地化设置\">#</a> 区域和本地化设置</h2>\n<ol>\n<li>编辑 <code>/etc/locale.gen</code> 。将 <code>en_US.UTF-8</code>  或其他你想要的配置，对应那行取消注释。修改后，执行 <code>locale-gen</code> ，以生成 <code>locale信息</code> 。</li>\n<li>创建 <code>/etc/locale.conf</code> ，在其中写入：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US.UTF-8</pre></td></tr></table></figure><h2 id=\"控制台键盘布局和字体设置\"><a class=\"markdownIt-Anchor\" href=\"#控制台键盘布局和字体设置\">#</a> 控制台键盘布局和字体设置</h2>\n<p>如果需要修改控制台键盘布局和字体，可编辑 /etc/vconsole.conf 使其长期生效，例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">KEYMAP</span><span class=\"token operator\">=</span>de-latin1</pre></td></tr></table></figure><h2 id=\"网络配置\"><a class=\"markdownIt-Anchor\" href=\"#网络配置\">#</a> 网络配置</h2>\n<div class=\"note info\">\n<p>网络配置很重要，否则安装系统后会连不上网（例如 <code>VirtualBox</code>  桥接模式就需要配置 DHCP）</p>\n</div>\n<h3 id=\"设置主机名\"><a class=\"markdownIt-Anchor\" href=\"#设置主机名\">#</a> 设置主机名</h3>\n<p>创建 <code>/etc/hostname</code>  文件，在其中直接填写你所设定的主机名，我填写的主机名是 <code>arch</code></p>\n<h3 id=\"检查连接\"><a class=\"markdownIt-Anchor\" href=\"#检查连接\">#</a> 检查连接</h3>\n<p>TODO</p>\n<h3 id=\"安装网络管理器\"><a class=\"markdownIt-Anchor\" href=\"#安装网络管理器\">#</a> 安装网络管理器</h3>\n<ol>\n<li><code>pacman -S networkmanager</code></li>\n<li><code>systemctl enable NetworkManager.service</code>  设置网络管理器开机自启动</li>\n</ol>\n<h2 id=\"关于-initramfs\"><a class=\"markdownIt-Anchor\" href=\"#关于-initramfs\">#</a> 关于 initramfs</h2>\n<p>通常不需要自己创建新的 initramfs，因为在执行 pacstrap 时已经安装 linux 包，这时已经运行过 mkinitcpio 了。</p>\n<h2 id=\"设置-root-密码\"><a class=\"markdownIt-Anchor\" href=\"#设置-root-密码\">#</a> 设置 root 密码</h2>\n<p>输入 <code>passwd</code>  创建一个 <code>root</code>  密码</p>\n<h2 id=\"安装引导程序\"><a class=\"markdownIt-Anchor\" href=\"#安装引导程序\">#</a> 安装引导程序</h2>\n<p>需要安装 Linux 引导加载程序，才能在安装后启动系统，可以使用的的引导程序已在启动加载器中列出，请选择一个安装并配置它，GRUB 是最常见的选择。<br>\n如果有 Intel 或 AMD 的 CPU，请另外启用微码更新。</p>\n<ol>\n<li>安装 <code>grub</code>  和 <code>efibootmgr</code> ：输入 <code>pacman -S grub efibootmgr</code></li>\n<li>输入 <code>grub-install --target=x86_64-efi --efi-directory=[esp] --bootloader-id=GRUB</code><div class=\"note info\">\n<p>我的 <code>esp</code>  挂载点是 <code>/mnt/boot</code> ，因为我已经 <code>arch-chroot</code>  到 <code>/mnt</code>  中了，因此 <code>esp</code>  字段填写 <code>/boot</code>  即可。如果你安装在了其他挂载点上，请在 <code>esp</code>  字段填写你自己的挂载点。如果出现问题，检查：</p>\n</div>\n</li>\n</ol>\n<ul>\n<li>是否已经 <code>arch-chroot</code>  到了 <code>/mnt</code>  下？命令提示符为 <code>[root@archiso]</code></li>\n<li>前面的配置过程有没有出现问题？<br>\n:::<br>\n <code>grub-install</code>  命令成功时应该出现:<br>\n<img data-src=\"grub-install.png\" alt=\"grub-install成功\"></li>\n</ul>\n<ol start=\"3\">\n<li>生成主配置文件: <code>grub-mkconfig -o /boot/grub/grub.cfg</code> <br>\n 配置成功时界面：<br>\n<img data-src=\"configure.png\" alt=\"配置成功\"></li>\n</ol>\n<h1 id=\"重新启动计算机\"><a class=\"markdownIt-Anchor\" href=\"#重新启动计算机\">#</a> 重新启动计算机</h1>\n<ol>\n<li><code>exit</code>  退出 <code>chroot</code>  环境</li>\n<li><code>umount -R /mnt</code>  取消挂载 <code>/mnt</code> （也等到可 <code>reboot</code>  时 systemd 自动卸载）</li>\n<li><code>reboot</code>  重启系统</li>\n</ol>\n<h1 id=\"安装后的工作\"><a class=\"markdownIt-Anchor\" href=\"#安装后的工作\">#</a> 安装后的工作</h1>\n<p>参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCQiVCQSVFOCVBRSVBRSVFOSU5OCU4NSVFOCVBRiVCQg==\">建议阅读列表</span>及<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCQSU5NCVFNyU5NCVBOCVFNyVBOCU4QiVFNSVCQSU4RiVFNSU4OCU5NyVFOCVBMSVBOA==\">应用程序列表</span></p>\n",
            "tags": [
                "Linux",
                "操作系统",
                "notes",
                "Arch",
                "安装教程"
            ]
        }
    ]
}