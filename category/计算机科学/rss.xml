<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>望春风 • Posts by &#34;计算机科学&#34; category</title>
        <link>https://salvely.github.io/blog</link>
        <description>计算机&amp;数理&amp;文学爱好者，喜欢健身、下厨、听音乐和看电影</description>
        <language>zh-CN</language>
        <pubDate>Fri, 27 Oct 2023 17:45:08 +0800</pubDate>
        <lastBuildDate>Fri, 27 Oct 2023 17:45:08 +0800</lastBuildDate>
        <category>Arch</category>
        <category>Linux</category>
        <category>安装教程</category>
        <category>操作系统</category>
        <category>notes</category>
        <category>配置教程</category>
        <category>C++</category>
        <category>参考资料</category>
        <category>Debian</category>
        <category>包管理</category>
        <category>CMake</category>
        <category>Makefile</category>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/</guid>
            <title>C++编译与工程构建</title>
            <link>https://salvely.github.io/blog/2023/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E7%BC%96%E8%AF%91%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA/</link>
            <category>C++</category>
            <category>CMake</category>
            <category>Makefile</category>
            <pubDate>Fri, 27 Oct 2023 17:45:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在课程中写的都是代码量不大的小文件，但是在实际工程开发中，情况可就不一样了。但是那么多的代码，我们不可能将它们放在同一个文件中，肯定要分成不同的源文件。但是如何分解程序？如何实现程序之间的交流，就成了一个问题。本节中我们将探讨如何将一个大的工程分成不同的源程序，并且实现这些源程序之间的交流。我们首先介绍 C++ 的编译模型，也就是 C++ 源程序是如何编译成为机器可理解的二进制代码的。然后，我们讨论如何将一个大的工程分解为多个小的源程序，并且实现他们之间的交流。最后，我们探讨 C++ 的预处理器的工作模式。&lt;/p&gt;
&lt;h1 id=&#34;C-编译模型&#34;&gt;&lt;a href=&#34;#C-编译模型&#34; class=&#34;headerlink&#34; title=&#34;C++ 编译模型&#34;&gt;&lt;/a&gt;C++ 编译模型&lt;/h1&gt;&lt;p&gt;C++ 是一种编译型的语言，即通过编译器将源代码转化为机器可以理解的二进制代码。其编译过程分为 3 个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预处理阶段：扩展头文件，进行宏替换等&lt;/li&gt;
&lt;li&gt;编译阶段：将预处理后的高级语言代码转化为机器可以理解的二进制代码，即目标文件。在这个阶段，编译器会检查一些语法错误，如漏掉了&lt;code&gt;;&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;链接阶段：将生成的多个目标文件合并成一个最终的可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法错误主要集中在编译阶段进行检查，而程序的一些其他问题则多半是出现在链接阶段。例如，程序可能定义了一个函数的原型，并且对他进行了调用，但是却没有实现这个函数。又或者，定义的函数原型和实现不一样，按照函数原型进行调用以后，程序找不到函数的实现。有的人会奇怪为什么这种错误会出现在链接阶段，是因为链接器没有在这个文件中找到函数原型时，他会本能的想到是不是在需要链接的其他文件中。如果在其他文件中也没有找到的话，链接器才会告诉你出现了链接错误。&lt;/p&gt;
&lt;h1 id=&#34;模块化与分解&#34;&gt;&lt;a href=&#34;#模块化与分解&#34; class=&#34;headerlink&#34; title=&#34;模块化与分解&#34;&gt;&lt;/a&gt;模块化与分解&lt;/h1&gt;&lt;p&gt;通常来说，对于一个大的工程问题，我们无法一口气思考到所有的细节。而在这种情况下，我们倾向于将问题分解成不同的模块，然后通过不同模块间的合作和交流来解决。但是，如何确定模块划分的粒度呢？毕竟越往下分，细节就越多。而在这个时候，我们会选择使用一些抽象的接口。举个例子，我们无需设计 C++ STL，只需要调用其提供给我们的接口，便可以实现多种功能。而这就是模块划分的尽头。&lt;br&gt;对于模块化，通常来说遵循 3 个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单化：提供一个较为简单的接口&lt;/li&gt;
&lt;li&gt;可扩展：在需要的时候，我们可以在不改变接口的条件下改变其实现方式。&lt;/li&gt;
&lt;li&gt;可复用：接口足够泛用（使用泛型，模板之类），可以保证函数可以被用在多个不同的项目中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;C-预处理器&#34;&gt;&lt;a href=&#34;#C-预处理器&#34; class=&#34;headerlink&#34; title=&#34;C++ 预处理器&#34;&gt;&lt;/a&gt;C++ 预处理器&lt;/h1&gt;&lt;h2 id=&#34;前言-1&#34;&gt;&lt;a href=&#34;#前言-1&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在编写 C++ 程序时，我们通常把一个程序分为&lt;code&gt;file.h&lt;/code&gt;和&lt;code&gt;file.cpp&lt;/code&gt;两个部分。&lt;code&gt;file.h&lt;/code&gt;中描述的是程序提供的类及函数接口（定义），而&lt;code&gt;.cpp&lt;/code&gt;文件中描述的是其实现。此外，通常在&lt;code&gt;.h&lt;/code&gt;文件的前后，会加上如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#ifndef StrUtils_Included
#define StrUtils_Included

#include &amp;lt;string&amp;gt;
using namespace std;
string ConvertToUpperCase(string input);
string ConvertToLowerCase(string input);
string IntegerToString(int value);
string DoubleToString(double value);

#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;include头文件&#34;&gt;&lt;a href=&#34;#include头文件&#34; class=&#34;headerlink&#34; title=&#34;include头文件&#34;&gt;&lt;/a&gt;&lt;code&gt;include&lt;/code&gt;头文件&lt;/h2&gt;&lt;p&gt;其作用在于将头文件的内容复制到&lt;code&gt;#include&lt;/code&gt;处。头文件分为两种，一种用&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;包起，是 C++ 标准库中的文件；而另外一种用&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;包起，是用户自定义的头文件，编译器会在当前工程文件夹下找。&lt;/p&gt;
&lt;h2 id=&#34;define定义与替换&#34;&gt;&lt;a href=&#34;#define定义与替换&#34; class=&#34;headerlink&#34; title=&#34;define定义与替换&#34;&gt;&lt;/a&gt;&lt;code&gt;define&lt;/code&gt;定义与替换&lt;/h2&gt;&lt;p&gt;宏定义的基本格式是&lt;code&gt;define val replacement&lt;/code&gt;。在进行宏替换时，做的不是值替换，而是普通的字符串的替换。即将程序中所有的&lt;code&gt;val&lt;/code&gt;都替换成&lt;code&gt;replacement&lt;/code&gt;。在进行宏替换时编译器并不理解这到底是什么东西，就是简单的左无脑替换。因此在替换时必须要注意，譬如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#define a 5 + 10
...
int b = 2 * a;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在进行宏替换后，效果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int b = 2 * 5 + 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而不是:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int b = 2 * (5 + 10);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为它做的仅仅是简单的字符串替换。这种错误经常发生，而要避免这类错误的方法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;define&lt;/code&gt;时使用&lt;code&gt;()&lt;/code&gt;圆括号&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;const&lt;/code&gt;语句&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;include-guard&#34;&gt;&lt;a href=&#34;#include-guard&#34; class=&#34;headerlink&#34; title=&#34;include guard&#34;&gt;&lt;/a&gt;&lt;code&gt;include guard&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;预处理语句可以通过条件判断来决定是否要定义某些文件，一个简单的格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;ifndef...define...endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这套语句的基本意思是：如果已经&lt;code&gt;#include&lt;/code&gt;过上述文件，就不需要再定义一次了。C++ 工程文件之间相互&lt;code&gt;#include&lt;/code&gt;是家常便饭，这样做是为了防止由于多次互相&lt;code&gt;#include&lt;/code&gt;带来的重定义问题。上述语句只是一个较为简化的版本，更为完整的定义是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;  #if statement
  ...
  #elif another-statement
  ...
  #elif yet-another-statement
  ...
  #else
  ...
  #endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这其中的&lt;code&gt;statement&lt;/code&gt;可以是条件判断语句，也可以是&lt;code&gt;define()&lt;/code&gt;语句。做条件判断时，使用的必须是已经定义过的变量，如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;  #if MY_CONSTANT &amp;gt; 137 // Legal
  #if MY_CONSTANT * 42 == MY_CONSTANT // Legal
  #if sqrt(MY_CONSTANT) &amp;lt; 4 // Illegal, cannot call function sqrt
  #if MY_CONSTANT == 3.14 // Illegal, can only use integral values
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而使用&lt;code&gt;define&lt;/code&gt;语句时，如果变量已经定义，则&lt;code&gt;define()&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;  #if defined(MY_CONSTANT) // Evaluates to true.
  #if defined(OTHER_CONSTANT) // Evaluates to false.
  #if !defined(MY_CONSTANT) // Evaluates to false.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其判断结果被应用在&lt;code&gt;if&lt;/code&gt;语句中。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#if defined(A)
    cout &amp;lt;&amp;lt; &amp;quot;A is defined.&amp;quot; &amp;lt;&amp;lt; endl;
#elif defined(B)
    cout &amp;lt;&amp;lt; &amp;quot;B is defined.&amp;quot; &amp;lt;&amp;lt; endl;
#elif defined(C)
     cout &amp;lt;&amp;lt; &amp;quot;C is defined.&amp;quot; &amp;lt;&amp;lt; endl;
#else
    cout &amp;lt;&amp;lt; &amp;quot;None of A, B, or C is defined.&amp;quot; &amp;lt;&amp;lt; endl;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这套语句的效果相当于将所有&lt;code&gt;include&lt;/code&gt;的内容复制粘贴到源程序中，但是注释掉重复定义的部分。它和注释不一样之处在于，这套语句可以嵌套，而注释不能。&lt;/p&gt;
&lt;h2 id=&#34;宏&#34;&gt;&lt;a href=&#34;#宏&#34; class=&#34;headerlink&#34; title=&#34;宏&#34;&gt;&lt;/a&gt;宏&lt;/h2&gt;&lt;h2 id=&#34;内联函数&#34;&gt;&lt;a href=&#34;#内联函数&#34; class=&#34;headerlink&#34; title=&#34;内联函数&#34;&gt;&lt;/a&gt;内联函数&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%9D%82%E8%B0%88/C++%E7%9A%84%E8%AF%9E%E7%94%9F%E4%B8%8E%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
            <title>C++的诞生与一些思考</title>
            <link>https://salvely.github.io/blog/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%9D%82%E8%B0%88/C++%E7%9A%84%E8%AF%9E%E7%94%9F%E4%B8%8E%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
            <pubDate>Wed, 25 Oct 2023 14:00:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近在学习斯坦福的 CS106L，学习标准 C++。在阅读&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm&#34;&gt;Course Reader&lt;/span&gt;的 Introduction 部分时，作者介绍了 C++的诞生故事，对我颇有启发。&lt;/p&gt;
&lt;p&gt;C++的创始人在剑桥大学读 PhD 时，主要研究的是分布式系统。在当时，他使用了一种叫 Simula 的面向对象语言。他在 Simula 中初始化电脑对象和网络对象，来模拟系统之间通过网络的交互。但是在开发的过程中，他发现，虽然使用 Simula 来对整个过程进行模拟，非常的快速，但是 Simula 的执行速度非常慢。而后，他又尝试通过一种名为 BCPL 的语言进行开发。但是新的问题又出现了，这种语言是一种较底层的系统语言，并不具备面向对象等特性。虽然执行速度快，但是搭建系统的过程非常的痛苦和繁琐。&lt;/p&gt;
&lt;p&gt;在博士毕业后，他来到了贝尔实验室工作。在这里他接触了一门高效的高级语言，C 语言。此后，他在 C 语言的基础上，拓展了类，而后又增加了一些新的特性。他把这种语言称之为 C++。&lt;/p&gt;
&lt;p&gt;从他的故事来看，再结合之前 OpenAI 创始人的书《伟大不能被计划》，我们可以看到，有的时候我们在探索目标的过程中，可能会遇到一些新的尚未发现过的东西，探索这项新知，可能会让我们更慢达到目标，但是可以让我们在沿途看到更多的风景。 C++ 创始人在研究分布式系统的过程中，意外创造了 C++ 语言。有的人可能会因为创造一门语言所需要的工作量而被劝退，殊不知这正是伟大的开端。有时候我们在是做事情时，可以多想一点点，多做一点点，多探索，多思考，多创造，而不是重复原有的工作，那正是创造力和新世界的大门。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</guid>
            <title>C++参考资料</title>
            <link>https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/C++%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
            <category>C++</category>
            <category>参考资料</category>
            <pubDate>Sun, 22 Oct 2023 16:47:56 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pc29jcHAuZ2l0aHViLmlvL0NwcENvcmVHdWlkZWxpbmVzL0NwcENvcmVHdWlkZWxpbmVz&#34;&gt;C++ Core Guidelines&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/</guid>
            <title>Stanford CS106L:Standard C++ Programming</title>
            <link>https://salvely.github.io/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/</link>
            <category>C++</category>
            <pubDate>Sun, 22 Oct 2023 11:36:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;课程资料&#34;&gt;&lt;a href=&#34;#课程资料&#34; class=&#34;headerlink&#34; title=&#34;课程资料&#34;&gt;&lt;/a&gt;课程资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUs4NDExYjdBVS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTg1YWNmMGE1OWRlZDAyZTRjNzVhZTExNThiYWNhMjA3&#34;&gt;Video&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjI0Lw==&#34;&gt;Slides&amp;#x2F;Code&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9mdWxsX2NvdXJzZV9yZWFkZXIucGRm&#34;&gt;Course Reader&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9hc3NpZ25tZW50LXNldHVw&#34;&gt;Assignment&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29yZ3MvY291cnNld29ya3MvcmVwb3NpdG9yaWVzP3E9QVAxNDAxLTImdHlwZT1hbGwmbGFuZ3VhZ2U9JnNvcnQ9&#34;&gt;AP1401-2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2FyY2hpdmUvY3MvY3MxMDZsL2NzMTA2bC4xMjEyLw==&#34;&gt;Spring 2021 资料&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTA2bC9sZWN0dXJlcy8=&#34;&gt;综合资料&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;学习流程&#34;&gt;&lt;a href=&#34;#学习流程&#34; class=&#34;headerlink&#34; title=&#34;学习流程&#34;&gt;&lt;/a&gt;学习流程&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;for(int i = 0; i &amp;lt; 17; i++) &amp;#123;
    1. 阅读 Course Reader对应章节
    2. 观看video
    3. 阅读Slides
    4. 整理Code
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上流程完成后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完成 CS106L 所有 Assignment&lt;/li&gt;
&lt;li&gt;完成 AP1401-2 所有作业&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Welcome&#34;&gt;&lt;a href=&#34;#Welcome&#34; class=&#34;headerlink&#34; title=&#34;Welcome&#34;&gt;&lt;/a&gt;Welcome&lt;/h1&gt;&lt;p&gt;本节课主要讲述了 C++的应用前景，历史发展和设计哲学。&lt;/p&gt;
&lt;h2 id=&#34;C-应用前景&#34;&gt;&lt;a href=&#34;#C-应用前景&#34; class=&#34;headerlink&#34; title=&#34;C++应用前景&#34;&gt;&lt;/a&gt;C++应用前景&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/future.png&#34; alt=&#34;C++应用前景&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;C-的历史&#34;&gt;&lt;a href=&#34;#C-的历史&#34; class=&#34;headerlink&#34; title=&#34;C++的历史&#34;&gt;&lt;/a&gt;C++的历史&lt;/h2&gt;&lt;h3 id=&#34;汇编语言&#34;&gt;&lt;a href=&#34;#汇编语言&#34; class=&#34;headerlink&#34; title=&#34;汇编语言&#34;&gt;&lt;/a&gt;汇编语言&lt;/h3&gt;&lt;p&gt;在早期阶段，尚没有高级语言这一说。程序员大多使用汇编语言编写程序，汇编语言的好处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用较为简单的指令进行编程&lt;/li&gt;
&lt;li&gt;汇编语言执行速度较快&lt;/li&gt;
&lt;li&gt;程序员可以直接操作计算机底层寄存器等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，汇编语言编程也有它的缺陷，缺陷就在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序涉及到对计算机底层硬件的基础操作，而不只是处理逻辑，因此对其他程序员来说，阅读起来较为困难&lt;/li&gt;
&lt;li&gt;因为汇编语言涉及到指令集架构，而指令集架构和计算机底层硬件和操作系统紧密相关，因此在一台机器上运行的程序可能无法迁移到另一台程序，简单来说就是可移植性较差&lt;/li&gt;
&lt;li&gt;汇编语言编写的程序因为使用的是一些基本的操作，因此程序较长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，&lt;code&gt;Ken Thompson&lt;/code&gt;和&lt;code&gt;Dennis Ritchie&lt;/code&gt;于 1972 年发明了 C 语言。&lt;/p&gt;
&lt;h3 id=&#34;C-语言&#34;&gt;&lt;a href=&#34;#C-语言&#34; class=&#34;headerlink&#34; title=&#34;C 语言&#34;&gt;&lt;/a&gt;C 语言&lt;/h3&gt;&lt;p&gt;C 语言是一门高级语言，相较汇编，它的优势在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向过程编程，较为简单。程序员在编写程序时，无需考虑计算机底层架构，而只需要考虑处理逻辑，因此编程较为简单&lt;/li&gt;
&lt;li&gt;C 语言可以由编译器编译为汇编指令，在不同的机器上，可以编译出不同的汇编指令，而后汇编器又可以将汇编指令转化为针对该计算机指令集架构的机器指令，实现 C 语言的可迁移性&lt;/li&gt;
&lt;li&gt;C 语言程序执行速度非常快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，在面对更复杂的编程问题时，C 语言也表现出了它的不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C 语言是面向过程的语言，它无法面向对象。当我们需要更复杂的结构和它的一系列方法时，C 语言只为我们提供了一些有限的结构，无法满足我们对高级结构的需求&lt;/li&gt;
&lt;li&gt;C 语言无法对不同类型提供一个泛化的模板，对于不同类型的传入参数，我们可能需要重复写多个几乎一致的处理函数&lt;/li&gt;
&lt;li&gt;写大型项目时，很多时候很难将一个问题拆解为一个面向过程的模型，不是所有问题都可以使用模块化的过程方法解决&lt;/li&gt;
&lt;li&gt;写出来的程序较长&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;C&#34;&gt;&lt;a href=&#34;#C&#34; class=&#34;headerlink&#34; title=&#34;C++&#34;&gt;&lt;/a&gt;C++&lt;/h3&gt;&lt;p&gt;针对 C 语言的问题，&lt;code&gt;Bjarne Stroustrup&lt;/code&gt;于 1983 年开发了 C++ 语言，他希望能够在 C 语言基础上实现一个具有多种不同特性的高级语言。 C++ 语言一开始只是&lt;code&gt;C with classes&lt;/code&gt;，实现了 C 语言面向对象的延伸。而后逐步发展，直到今天的&lt;code&gt;C++23&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/CS106L/evolution.png&#34; alt=&#34;C++的演化&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;C-的几大特性&#34;&gt;&lt;a href=&#34;#C-的几大特性&#34; class=&#34;headerlink&#34; title=&#34;C++的几大特性&#34;&gt;&lt;/a&gt;C++的几大特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通用语言&lt;br&gt;有的语言可以在应用到多个场景中，但是在解决特定场景问题时会显得复杂，比如 C++ 在做矩阵乘除法时，需要程序员手动编写程序，效率较低。但是 C++ 的用途很广。而有的语言，可以解决特定问题，但是并不泛用。比如 Matlab 在做科学计算时非常的常用，但是在解决其他问题时并没有 C++ 高效。&lt;/li&gt;
&lt;li&gt;编译型语言&lt;br&gt;高级语言需要转换成机器可以阅读的二进制码才能被计算机执行。而高级语言分为编译型和解释型。其区别在于，解释型语言使用解释器(Interpreters)进行翻译，一边翻译一边执行。解释器在执行一条语句的同时，获取下一条语句。而编译型语言使用编译器进行编译。将整个源代码编译完成后，直接执行生成的二进制码。&lt;/li&gt;
&lt;li&gt;静态类型语言&lt;br&gt;静态类型语言是指语句中的每个变量在声明后都有固定的类型，一旦确定，不能随意更改。而动态类型（如 Python、Javascript）会在执行的过程中动态的判断变量的类型。静态类型语言会在编译阶段检查语句是否合法，否则产生编译错误。而动态类型通常无法在编译阶段确定该语句是否有编译错误，错误均在程序运行时产生，也称为运行时错误。编译阶段排错让运行时错误出现的概率大大降低。这样无需运行即可排除程序错误。&lt;/li&gt;
&lt;li&gt;多范式语言&lt;br&gt;部分语言只有单一范式，如 C 语言，无法编写面向对象程序。而 C++可以同时实现面向对象特性，泛型特性，和面向过程的特性。非常灵活。&lt;/li&gt;
&lt;li&gt;中间语言&lt;br&gt;部分底层语言（如汇编）直接和计算机内存打交道，但是利用其写出的程序逻辑不清晰，难以理解。而部分语言无法直接对计算机底层进行操纵（如 Python、Java)等，程序员在编写程序时就像是被禁锢，无法探索底层的奥秘。C++可以像 C 语言那样接触底层硬件（利用指针），也可以利用其面向对象特性构造大型程序，同时实现封装和抽象。触及底层系统和实现抽象的目的同时达到，非常便于程序员大展身手。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;C-的设计哲学&#34;&gt;&lt;a href=&#34;#C-的设计哲学&#34; class=&#34;headerlink&#34; title=&#34;C++的设计哲学&#34;&gt;&lt;/a&gt;C++的设计哲学&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;只有在需要解决特定问题时引入新的特性&lt;/li&gt;
&lt;li&gt;程序员可以自由选择编程风格&lt;/li&gt;
&lt;li&gt;隐藏实现细节，抽象出编程接口&lt;/li&gt;
&lt;li&gt;让程序员能够完全以自己想要的方式编写程序&lt;/li&gt;
&lt;li&gt;让编写的程序尽可能高效&lt;/li&gt;
&lt;li&gt;编译时进行类型检查&lt;/li&gt;
&lt;li&gt;可以兼容早期版本程序，也兼容 C 语言程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;C-的应用&#34;&gt;&lt;a href=&#34;#C-的应用&#34; class=&#34;headerlink&#34; title=&#34;C++的应用&#34;&gt;&lt;/a&gt;C++的应用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;li&gt;JVM&lt;/li&gt;
&lt;li&gt;火星探索车&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Type-and-Structs&#34;&gt;&lt;a href=&#34;#Type-and-Structs&#34; class=&#34;headerlink&#34; title=&#34;Type and Structs&#34;&gt;&lt;/a&gt;Type and Structs&lt;/h1&gt;&lt;p&gt;关于类型和结构体没什么好说的，主要的用法和 C 语言中差不多。但是&lt;code&gt;string&lt;/code&gt;类在使用之前需要在程序最开始处&lt;code&gt;#include&amp;lt;string&amp;gt;&lt;/code&gt;，并且最好是不要使用&lt;code&gt;using namespace std&lt;/code&gt;，而是使用&lt;code&gt;std::string&lt;/code&gt;，对于&lt;code&gt;std::cout&lt;/code&gt;和&lt;code&gt;std::cin&lt;/code&gt;也是一样。这样做是为了保证程序员在自主开发时，不和&lt;code&gt;std&lt;/code&gt;域内的的东西重名导致出错。&lt;/p&gt;
&lt;h2 id=&#34;std-pair&#34;&gt;&lt;a href=&#34;#std-pair&#34; class=&#34;headerlink&#34; title=&#34;std::pair&#34;&gt;&lt;/a&gt;&lt;code&gt;std::pair&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;一种&lt;code&gt;STL&lt;/code&gt;内置结构，其中包括两个域。&lt;code&gt;std::pair&lt;/code&gt;相当于是个模板，其中域的类型随意。声明时使用如下格式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::pair&amp;lt;int,string&amp;gt; p = &amp;#123;1,&amp;quot;st&amp;quot;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，还可以在程序中使用如下方法构建&lt;code&gt;std::pair&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::pair&amp;lt;int,string&amp;gt; p = std::make_pair(1,&amp;quot;st&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在使用&lt;code&gt;pair&lt;/code&gt;时，分别用&lt;code&gt;p.first&lt;/code&gt;和&lt;code&gt;p.second&lt;/code&gt;来引用两个域。&lt;/p&gt;
&lt;h2 id=&#34;auto类型推导&#34;&gt;&lt;a href=&#34;#auto类型推导&#34; class=&#34;headerlink&#34; title=&#34;auto类型推导&#34;&gt;&lt;/a&gt;&lt;code&gt;auto&lt;/code&gt;类型推导&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;auto&lt;/code&gt;变量表示允许编译器自行推导值的类型。&lt;br&gt;:::info&lt;br&gt;什么时候使用&lt;code&gt;auto&lt;/code&gt;？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用迭代器时，我不关心值的类型&lt;/li&gt;
&lt;li&gt;使用模板时，值的类型已经可以根据上下文推断出来&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;lambda&lt;/code&gt;时，咱不知道值是啥类型&lt;/li&gt;
&lt;li&gt;没那个必要时，尽量不要将&lt;code&gt;auto&lt;/code&gt;作为返回值类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;Streams&#34;&gt;&lt;a href=&#34;#Streams&#34; class=&#34;headerlink&#34; title=&#34;Streams&#34;&gt;&lt;/a&gt;Streams&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;How can we convert between string-represented data and the real thing? Streams!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节首先介绍了什么是环境，而后引入&lt;code&gt;Stream&lt;/code&gt;的概念，讲解了&lt;code&gt;Streams&lt;/code&gt;在读入和写出数据时的一些特点。而&lt;code&gt;Streams&lt;/code&gt;可以利用&lt;code&gt;cin&lt;/code&gt;和&lt;code&gt;cout&lt;/code&gt;这两种&lt;code&gt;iostream&lt;/code&gt;类的对象，实现从标准输入和控制台进行读取。也可以通过&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;两种来实现文件的读取和写入。亦可以通过&lt;code&gt;istringstrean&lt;/code&gt;和&lt;code&gt;ostringstream&lt;/code&gt;来实现字符串和其他类型之间的连接。但是普通的&lt;code&gt;cin&lt;/code&gt;和&lt;code&gt;cout&lt;/code&gt;在使用时也可能出现读取的问题，因此我们还可以使用&lt;code&gt;std::getline()&lt;/code&gt;来进行一行一次的读取。此外，在使用&lt;code&gt;Stream&lt;/code&gt;时，还应该注意判别读取异常和写入异常。&lt;/p&gt;
&lt;h2 id=&#34;Streams-Overview&#34;&gt;&lt;a href=&#34;#Streams-Overview&#34; class=&#34;headerlink&#34; title=&#34;Streams Overview&#34;&gt;&lt;/a&gt;Streams Overview&lt;/h2&gt;&lt;h3 id=&#34;Environment&#34;&gt;&lt;a href=&#34;#Environment&#34; class=&#34;headerlink&#34; title=&#34;Environment&#34;&gt;&lt;/a&gt;Environment&lt;/h3&gt;&lt;p&gt;在学习 Stream 之前，我们先要了解&lt;code&gt;Environment&lt;/code&gt;（环境）的概念。我们家里有温度计，我们通常通过温度计上的水银球去检测环境温度，然后将摄氏度显示在数轴上，人们通过观测数轴上的数字来查看当前温度。在这个例子中，外界就是环境，水银球就是将温度转化为实际示数的媒介，而数轴就是温度的输出，将温度显示出来供人们了解。而在程序编写的过程中，也可能存在一个外部环境，程序需要从这个环境获取信息，然后在利用一些处理逻辑来进行一些计算，最后返回输出或者将输出打印在屏幕上。这个环境可能是用户输入，也可能是外部文件，还有可能是其他程序。&lt;/p&gt;
&lt;h3 id=&#34;Stream-是什么&#34;&gt;&lt;a href=&#34;#Stream-是什么&#34; class=&#34;headerlink&#34; title=&#34;Stream 是什么&#34;&gt;&lt;/a&gt;Stream 是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Streams is an abstraction for input and output. Streams convert between data and the string representation of data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Stream 是程序与外部环境交流的媒介。Stream 的输入与输出可能来自用户，也可能来自程序，也可能来自其他文件。如果要将一个变量输出到终端，那么变量就会以字符串的形式打入 Stream，然后 Stream 将其输出到终端。如果要从用户输入读取数据，那么也是将用户输入转化为字符串存储在 Stream 中，然后再将其转储到变量中。&lt;/p&gt;
&lt;h3 id=&#34;Stream-特点&#34;&gt;&lt;a href=&#34;#Stream-特点&#34; class=&#34;headerlink&#34; title=&#34;Stream 特点&#34;&gt;&lt;/a&gt;Stream 特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以对大体积数据进行分片读取，然后存储&lt;/li&gt;
&lt;li&gt;可以读取多个类型的数据&lt;/li&gt;
&lt;li&gt;可以串联多个&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cin-与-cout：来自键盘，去往终端&#34;&gt;&lt;a href=&#34;#cin-与-cout：来自键盘，去往终端&#34; class=&#34;headerlink&#34; title=&#34;cin 与 cout：来自键盘，去往终端&#34;&gt;&lt;/a&gt;cin 与 cout：来自键盘，去往终端&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cout&lt;/code&gt;为 Stream 对象，它从变量中获取数据，存储到一个 Buffer 中，然后将其&lt;strong&gt;输出到终端上&lt;/strong&gt;。&lt;br&gt;&lt;code&gt;cin&lt;/code&gt;也是 Stream 对象，它从&lt;strong&gt;用户输入&lt;/strong&gt;获取值，存储到一个 Buffer 中，然后将其转储到对应类型的变量中。&lt;br&gt;在使用这两个输入流前，需要在程序开始处&lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ifstream-与-ofstream：来自文件，去往文件&#34;&gt;&lt;a href=&#34;#ifstream-与-ofstream：来自文件，去往文件&#34; class=&#34;headerlink&#34; title=&#34;ifstream 与 ofstream：来自文件，去往文件&#34;&gt;&lt;/a&gt;ifstream 与 ofstream：来自文件，去往文件&lt;/h2&gt;&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;问题思考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;分别是什么？&lt;/li&gt;
&lt;li&gt;还有什么特殊的读写文件类？特殊在哪？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i/ofstream&lt;/code&gt;和&lt;code&gt;cin/cout&lt;/code&gt;在使用上有什么不一样之处？&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;需要包含什么头文件？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;怎么初始化？初始化后需要做哪些检查？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ofstream&lt;/code&gt;怎么初始化？初始化后需要做哪些检查？&lt;/li&gt;
&lt;li&gt;如果传入的文件名是&lt;code&gt;string&lt;/code&gt;类型，如何处理？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;时有哪些需要注意的地方？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;ifstream-ofstream-Overview&#34;&gt;&lt;a href=&#34;#ifstream-ofstream-Overview&#34; class=&#34;headerlink&#34; title=&#34;ifstream &amp;amp; ofstream Overview&#34;&gt;&lt;/a&gt;ifstream &amp;amp; ofstream Overview&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;分别从文件读取和写入文件。此外，还有一个叫做&lt;code&gt;fstream&lt;/code&gt;的类型，即可以完成写入，又可以完成读取）。此外，&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;在使用上与&lt;code&gt;cin/cout&lt;/code&gt;不一样之处在于，&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;是一个类型，而不是一个对象，但是&lt;code&gt;cin&lt;/code&gt;及&lt;code&gt;cout&lt;/code&gt;分别是&lt;code&gt;std::istream&lt;/code&gt;和&lt;code&gt;std::ostream&lt;/code&gt;类的对象。在使用对象的方法时(&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;已被重载)可以直接调用，但是在使用一个类的方法时，首先需要初始化这个类的一个对象，然后再对其方法进行调用。&lt;/p&gt;
&lt;h3 id=&#34;ifstream-ofstream-使用说明&#34;&gt;&lt;a href=&#34;#ifstream-ofstream-使用说明&#34; class=&#34;headerlink&#34; title=&#34;ifstream &amp;amp; ofstream 使用说明&#34;&gt;&lt;/a&gt;ifstream &amp;amp; ofstream 使用说明&lt;/h3&gt;&lt;h4 id=&#34;包含头文件&#34;&gt;&lt;a href=&#34;#包含头文件&#34; class=&#34;headerlink&#34; title=&#34;包含头文件&#34;&gt;&lt;/a&gt;包含头文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;fstream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ifstream-初始化-使用&#34;&gt;&lt;a href=&#34;#ifstream-初始化-使用&#34; class=&#34;headerlink&#34; title=&#34;ifstream 初始化 &amp;amp; 使用&#34;&gt;&lt;/a&gt;ifstream 初始化 &amp;amp; 使用&lt;/h4&gt;&lt;p&gt;可以直接使用构造函数，在参数列表中填入文件名进行初始化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;ifstream myStream(&amp;quot;file.txt&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以在使用默认构造函数初始化后，利用类的&lt;code&gt;open()&lt;/code&gt;方法打开文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;ifstream myStream;
myStream.open(&amp;quot;file.txt&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;ifstream&lt;/code&gt;对象的方法与使用&lt;code&gt;cin&lt;/code&gt;相似，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;myStream &amp;gt;&amp;gt; myInteger
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，在&lt;code&gt;open()&lt;/code&gt;方法调用后，推荐使用&lt;code&gt;myStream.is_open()&lt;/code&gt;来探测是否真的成功打开了文件。&lt;/p&gt;
&lt;h4 id=&#34;ofstream-初始化-使用&#34;&gt;&lt;a href=&#34;#ofstream-初始化-使用&#34; class=&#34;headerlink&#34; title=&#34;ofstream 初始化 &amp;amp; 使用&#34;&gt;&lt;/a&gt;ofstream 初始化 &amp;amp; 使用&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ofstream&lt;/code&gt;初始化过程及使用过程与前文&lt;code&gt;ifstream&lt;/code&gt;相似。若文件不存在，调用&lt;code&gt;open()&lt;/code&gt;方法会新创建一个文件，否则会覆盖原有的同名文件。（所以尽量做好备份）&lt;/p&gt;
&lt;h4 id=&#34;关闭流：close&#34;&gt;&lt;a href=&#34;#关闭流：close&#34; class=&#34;headerlink&#34; title=&#34;关闭流：close()&#34;&gt;&lt;/a&gt;关闭流：&lt;code&gt;close()&lt;/code&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;当流的生命周期结束时，C++会为你自动关闭流&lt;/li&gt;
&lt;li&gt;你也可以手动使用&lt;code&gt;close()&lt;/code&gt;方法关闭流&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用-string-作为文件名时…&#34;&gt;&lt;a href=&#34;#使用-string-作为文件名时…&#34; class=&#34;headerlink&#34; title=&#34;使用 string 作为文件名时…&#34;&gt;&lt;/a&gt;使用 string 作为文件名时…&lt;/h4&gt;&lt;p&gt;注意，&lt;code&gt;string&lt;/code&gt;类的开发时间要晚于&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;，彼时&lt;code&gt;ifstream&lt;/code&gt;和&lt;code&gt;ofstream&lt;/code&gt;只接受 C 语言的字符串类型。因此，要将一个&lt;code&gt;string&lt;/code&gt;类型的文件名传入这两个类的对象，我们必须调用&lt;code&gt;.c_str()&lt;/code&gt;来将其转化为 C 语言格式的字符串。&lt;/p&gt;
&lt;h2 id=&#34;Stream-manipulators&#34;&gt;&lt;a href=&#34;#Stream-manipulators&#34; class=&#34;headerlink&#34; title=&#34;Stream manipulators&#34;&gt;&lt;/a&gt;Stream manipulators&lt;/h2&gt;&lt;p&gt;&lt;code&gt;stream manipulator&lt;/code&gt;可以让对变量及输出的处理更加方便，程序员无需手动编程实现一些较为繁琐的功能。几种常用的&lt;code&gt;stream manipulator&lt;/code&gt;如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt;:输出后换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setw&lt;/code&gt;:设置输出的宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left/right&lt;/code&gt;:通常与&lt;code&gt;setw&lt;/code&gt;连用，表示左补空格&amp;#x2F;右补空格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setfill&lt;/code&gt;:在宽度一定，文字没有填满处补充特定的占位符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolalpha&lt;/code&gt;:用&lt;code&gt;true/false&lt;/code&gt;表示&lt;code&gt;1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hex&lt;/code&gt;:将输入输出理解为 16 进制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dec&lt;/code&gt;:输入输出为 10 进制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oct&lt;/code&gt;:输入输出为 8 进制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ws&lt;/code&gt;:跳过所有的空格&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Stream-异常处理&#34;&gt;&lt;a href=&#34;#Stream-异常处理&#34; class=&#34;headerlink&#34; title=&#34;Stream 异常处理&#34;&gt;&lt;/a&gt;Stream 异常处理&lt;/h2&gt;&lt;p&gt;在使用&lt;code&gt;stream&lt;/code&gt;进行读取时，可能会出现读取异常的情况，比如读进来的值是个字符串，但是程序想把它保存到一个&lt;code&gt;int&lt;/code&gt;类中，这样就产生了类型异常。我们需要在读取后使用&lt;code&gt;cout.fail()&lt;/code&gt;或&lt;code&gt;cin.fail()&lt;/code&gt;来判断读取是否成功，如果有异常，我们需要手动处理异常，然后用&lt;code&gt;cin.clear()&lt;/code&gt;表达异常已经处理完毕。&lt;br&gt;:::info&lt;br&gt;注意，在使用&lt;code&gt;while&lt;/code&gt;循环进行读取时，尽量把异常判断放在&lt;code&gt;while&lt;/code&gt;循环内，如果判断到异常则退出，否则就进行下一次读取。不要把&lt;code&gt;while&lt;/code&gt;循环放在条件判断中，否则可能会导致读取异常后依然在进行输出，因此尽量使用如下的结构。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;while(true) &amp;#123;
  ...
  if(cin.fail())
    break;
  ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为&lt;code&gt;stream&lt;/code&gt;在读取到最后或读取错误时会返回&lt;code&gt;false&lt;/code&gt;，而其他情况下会返回&lt;code&gt;stream&lt;/code&gt;对象本身（也可以判断为&lt;code&gt;true&lt;/code&gt;），因此我们可以使用&lt;code&gt;cin &amp;lt;&amp;lt; intValue &amp;lt;&amp;lt; doubleValue&lt;/code&gt;之类的语句作为判断的条件，以简化上述的循环，结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;while(cin &amp;lt;&amp;lt; intValue &amp;lt;&amp;lt; doubleVALUE) &amp;#123;
  ...
  ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;Stream-的麻烦之处&#34;&gt;&lt;a href=&#34;#Stream-的麻烦之处&#34; class=&#34;headerlink&#34; title=&#34;Stream 的麻烦之处&#34;&gt;&lt;/a&gt;Stream 的麻烦之处&lt;/h2&gt;&lt;p&gt;Stream 存在一个问题，如果用户多次连续读取值，而其中某一次读入的值的类型不匹配的话，则会连环影响到后面的读取。这其中的根本原因是，&lt;code&gt;stream&lt;/code&gt;本身是一个附带了一个读写头的&lt;code&gt;buffer&lt;/code&gt;字符数组，而每次读取后，读写后都会向后移动，下一次读取的位置是上一次读取的位置+上一次读取的长度。比如说我们需要读取一个&lt;code&gt;int&lt;/code&gt;，再读取一个&lt;code&gt;string&lt;/code&gt;。上一次用户输入了&lt;code&gt;8.265&lt;/code&gt;,那么第一次就只会读入&lt;code&gt;8&lt;/code&gt;，下一次读取从&lt;code&gt;.265&lt;/code&gt;开始，导致&lt;code&gt;string&lt;/code&gt;读取出错。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;cin&lt;/code&gt;的特点是：&lt;code&gt;cin&lt;/code&gt;越过一切前导空格和换行符，在读入有效字符后，遇到空格或换行符就停止读取，见如下程序：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
int main(void)
&amp;#123;
    string name;
    string city;
    cin &amp;gt;&amp;gt; name &amp;gt;&amp;gt; city;
    cout &amp;lt;&amp;lt; &amp;quot;My name is &amp;quot; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &amp;quot;The city is &amp;quot; &amp;lt;&amp;lt; city &amp;lt;&amp;lt; endl;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果输入的第一个&lt;code&gt;name&lt;/code&gt;是&lt;code&gt;First Last&lt;/code&gt;，&lt;code&gt;city&lt;/code&gt;输入的是&lt;code&gt;Wuhan&lt;/code&gt;。由于&lt;code&gt;cin&lt;/code&gt;遇到空格就停止读取，那么&lt;code&gt;name&lt;/code&gt;中存储的值就是&lt;code&gt;First&lt;/code&gt;，&lt;code&gt;city&lt;/code&gt;中存储的值就是&lt;code&gt;Last&lt;/code&gt;，而&lt;code&gt;Wuhan&lt;/code&gt;依然在&lt;code&gt;buffer&lt;/code&gt;中无法读取。&lt;/p&gt;
&lt;p&gt;因此，要解决标准的&lt;code&gt;stream&lt;/code&gt;带来的麻烦，我们引入一个新的函数：&lt;code&gt;getline()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;用getline-函数读取标准输入&#34;&gt;&lt;a href=&#34;#用getline-函数读取标准输入&#34; class=&#34;headerlink&#34; title=&#34;用getline()函数读取标准输入&#34;&gt;&lt;/a&gt;用&lt;code&gt;getline()&lt;/code&gt;函数读取标准输入&lt;/h2&gt;&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt;可以将输入保存在&lt;code&gt;string&lt;/code&gt;中。&lt;code&gt;getline&lt;/code&gt;函数的用途在于，如同他的名字，它可以一次读取一行，而&lt;code&gt;cin&lt;/code&gt;每次读到空格或换行符就停止。&lt;code&gt;getline&lt;/code&gt;不会忽略空格，会将其一并读入，但是&lt;code&gt;getline&lt;/code&gt;遇到换行符就停止读取，并且换行符依然留存在&lt;code&gt;stream buffer&lt;/code&gt;中。因此&lt;code&gt;getline&lt;/code&gt;非常适合那种用户需要在这个字符串中保留空格的情况。&lt;/p&gt;
&lt;p&gt;前文我们说过，&lt;code&gt;cin&lt;/code&gt;会在开始读取时越过一切前导的空格和换行符，读取有效字符后，遇到空格和换行符就停止读取，并且将其留在&lt;code&gt;stream buffer&lt;/code&gt;中，以待下一次的读取。那么如果我们将&lt;code&gt;cin&lt;/code&gt;和&lt;code&gt;getline&lt;/code&gt;混用时，便会出现一些问题。&lt;/p&gt;
&lt;p&gt;参考如下示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int dummyInt;
string dummyString;
cin &amp;gt;&amp;gt; dummyInt;
getline(cin,dummyString);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cin&lt;/code&gt;首先读入了一个数，然后&lt;strong&gt;将换行符留在了&lt;code&gt;buffer&lt;/code&gt;中&lt;/strong&gt;，但是下一次调用&lt;code&gt;getline&lt;/code&gt;时，&lt;code&gt;getline&lt;/code&gt;遇到换行符就停止读取。导致读入的&lt;code&gt;dummyString&lt;/code&gt;并不是我们下一次输入的字符串，而是一个空串。这都是因为上一个字符串的换行符还没有处理干净。&lt;br&gt;最好的解决办法是将这种原始的输入输出读取，改为调用封装好的功能完善的库函数。&lt;/p&gt;
&lt;h2 id=&#34;用getline-函数读取文件&#34;&gt;&lt;a href=&#34;#用getline-函数读取文件&#34; class=&#34;headerlink&#34; title=&#34;用getline()函数读取文件&#34;&gt;&lt;/a&gt;用&lt;code&gt;getline()&lt;/code&gt;函数读取文件&lt;/h2&gt;&lt;p&gt;参考之前&lt;code&gt;cin&lt;/code&gt;循环从文件读取的形式，我们可以编写一个使用&lt;code&gt;getline&lt;/code&gt;循环读取文件的格式:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;ifstream capitals(&amp;quot;capitals.txt&amp;quot;);
string capital,country;
... // check if the file is correctly opened
while(getline(capitals,capital) &amp;amp;&amp;amp; getlien(capitals,country)) &amp;#123;
    ...
    ...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;A-string-buffer-stringstream&#34;&gt;&lt;a href=&#34;#A-string-buffer-stringstream&#34; class=&#34;headerlink&#34; title=&#34;A string buffer:stringstream&#34;&gt;&lt;/a&gt;A string buffer:&lt;code&gt;stringstream&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;:::info&lt;br&gt;有时候，我们想要连接字符串和数字，譬如&lt;code&gt;&amp;quot;I ate&amp;quot; + 3 &amp;quot;peaches today&amp;quot;&lt;/code&gt;，可是 C++ 不允许我们拼接不一样类型的值，怎么办呢？&lt;br&gt;下面我们引入一个新的&lt;code&gt;stream&lt;/code&gt;类：&lt;code&gt;stringstream&lt;/code&gt;。通过 &lt;code&gt;myStringStream &amp;lt;&amp;lt; &amp;quot;I ate&amp;quot; &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; &amp;quot;peaches today&amp;quot;&lt;/code&gt;,我们可以实现字符串和其他类型值的拼接。&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stringstream&lt;/code&gt;是一个类似于&lt;code&gt;cin&lt;/code&gt;和&lt;code&gt;cout&lt;/code&gt;的&lt;code&gt;stream&lt;/code&gt;。和&lt;code&gt;ifstream/ofstream&lt;/code&gt;一样，在使用&lt;code&gt;stringstream&lt;/code&gt;前，我们需要先初始化一个&lt;code&gt;stringstream&lt;/code&gt;类的对象，然后再对这个对象进行读入和写出。&lt;code&gt;stringstream&lt;/code&gt;和标准&lt;code&gt;iostream&lt;/code&gt;的差别在于，其写入和写出的值并不保存在程序外，而是作为程序的一个变量，可以通过调用&lt;code&gt;myStringStream.str()&lt;/code&gt;随时读取。&lt;/p&gt;
&lt;p&gt;:::info&lt;br&gt;在使用&lt;code&gt;stringstream&lt;/code&gt;之前，需要引入头文件&lt;code&gt;#include &amp;lt;sstream&amp;gt;&lt;/code&gt;&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;Initialization&#34;&gt;&lt;a href=&#34;#Initialization&#34; class=&#34;headerlink&#34; title=&#34;Initialization&#34;&gt;&lt;/a&gt;Initialization&lt;/h1&gt;&lt;h2 id=&#34;初始化结构体&#34;&gt;&lt;a href=&#34;#初始化结构体&#34; class=&#34;headerlink&#34; title=&#34;初始化结构体&#34;&gt;&lt;/a&gt;初始化结构体&lt;/h2&gt;&lt;h3 id=&#34;方法一：用-给每个字段赋值&#34;&gt;&lt;a href=&#34;#方法一：用-给每个字段赋值&#34; class=&#34;headerlink&#34; title=&#34;方法一：用.给每个字段赋值&#34;&gt;&lt;/a&gt;方法一：用&lt;code&gt;.&lt;/code&gt;给每个字段赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt; Student s;
 s.name = &amp;quot;Frankie&amp;quot;;
 s.state = &amp;quot;MN&amp;quot;;
 s.age = 21;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法二：用-直接赋值&#34;&gt;&lt;a href=&#34;#方法二：用-直接赋值&#34; class=&#34;headerlink&#34; title=&#34;方法二：用{}直接赋值&#34;&gt;&lt;/a&gt;方法二：用&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;直接赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;Student s = &amp;#123;&amp;quot;Frankie&amp;quot;, &amp;quot;MN&amp;quot;, 21&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;初始化std-pair&#34;&gt;&lt;a href=&#34;#初始化std-pair&#34; class=&#34;headerlink&#34; title=&#34;初始化std::pair&#34;&gt;&lt;/a&gt;初始化&lt;code&gt;std::pair&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&#34;方法一：用-给每个字段赋值-1&#34;&gt;&lt;a href=&#34;#方法一：用-给每个字段赋值-1&#34; class=&#34;headerlink&#34; title=&#34;方法一：用.给每个字段赋值&#34;&gt;&lt;/a&gt;方法一：用&lt;code&gt;.&lt;/code&gt;给每个字段赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::pair&amp;lt;int, string&amp;gt; numSuffix1 = &amp;#123;1,&amp;quot;st&amp;quot;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法二：用-直接赋值-1&#34;&gt;&lt;a href=&#34;#方法二：用-直接赋值-1&#34; class=&#34;headerlink&#34; title=&#34;方法二：用{}直接赋值&#34;&gt;&lt;/a&gt;方法二：用&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;直接赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::pair&amp;lt;int, string&amp;gt; numSuffix2;
numSuffix2.first = 2;
numSuffix2.second = &amp;quot;nd&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法三：调用std-make-pair-field1-field2-方法&#34;&gt;&lt;a href=&#34;#方法三：调用std-make-pair-field1-field2-方法&#34; class=&#34;headerlink&#34; title=&#34;方法三：调用std::make_pair(field1,field2)方法&#34;&gt;&lt;/a&gt;方法三：调用&lt;code&gt;std::make_pair(field1,field2)&lt;/code&gt;方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::pair&amp;lt;int, string&amp;gt; numSuffix2 = std::make_pair(3, &amp;quot;rd&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;初始化std-vector&#34;&gt;&lt;a href=&#34;#初始化std-vector&#34; class=&#34;headerlink&#34; title=&#34;初始化std::vector&#34;&gt;&lt;/a&gt;初始化&lt;code&gt;std::vector&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&#34;方法一：使用-直接赋值&#34;&gt;&lt;a href=&#34;#方法一：使用-直接赋值&#34; class=&#34;headerlink&#34; title=&#34;方法一：使用{}直接赋值&#34;&gt;&lt;/a&gt;方法一：使用&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;直接赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;// a = &amp;#123;3,5&amp;#125;
std::vector&amp;lt;int&amp;gt; a = &amp;#123;3,5&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法二：使用vector-构造函数赋值&#34;&gt;&lt;a href=&#34;#方法二：使用vector-构造函数赋值&#34; class=&#34;headerlink&#34; title=&#34;方法二：使用vector()构造函数赋值&#34;&gt;&lt;/a&gt;方法二：使用&lt;code&gt;vector()构造函数&lt;/code&gt;赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::vector&amp;lt;int&amp;gt; a(3,5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::info&lt;br&gt;这种情况下,传入的 3 和 5 是构造函数的参数，3 是元素的个数，5 是重复的元素值，&lt;code&gt;a=&amp;#123;5,5,5&amp;#125;&lt;/code&gt;&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;大括号初始化-通用&#34;&gt;&lt;a href=&#34;#大括号初始化-通用&#34; class=&#34;headerlink&#34; title=&#34;大括号初始化(通用)&#34;&gt;&lt;/a&gt;大括号初始化(通用)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;std::vector&amp;lt;int&amp;gt; vec&amp;#123;1,3,5&amp;#125;;
std::pair&amp;lt;int, string&amp;gt; numSuffix1&amp;#123;1,&amp;quot;st&amp;quot;&amp;#125;;
Student s&amp;#123;&amp;quot;Frankie&amp;quot;, &amp;quot;MN&amp;quot;, 21&amp;#125;;
// less common/nice for primitive types, but possible!
int x&amp;#123;5&amp;#125;;
string f&amp;#123;&amp;quot;Frankie&amp;quot;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Structure-Bindings&#34;&gt;&lt;a href=&#34;#Structure-Bindings&#34; class=&#34;headerlink&#34; title=&#34;Structure Bindings&#34;&gt;&lt;/a&gt;Structure Bindings&lt;/h2&gt;&lt;p&gt;可以结合&lt;code&gt;auto&lt;/code&gt;的自动类型推导来自动绑定值。&lt;br&gt;使用前：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;auto p =
std::make_pair(“s”, 5);
string a = s.first;
int b = s.second;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用后：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;auto p =
std::make_pair(“s”, 5);
auto [a, b] = p;
// a is string, b is int
// auto [a, b] =
std::make_pair(...);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;References&#34;&gt;&lt;a href=&#34;#References&#34; class=&#34;headerlink&#34; title=&#34;References&#34;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;p&gt;:::info&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;默认为赋值值，如果要传入引用，必须在声明引用时加上&lt;code&gt;&amp;amp;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;修改引用时便修改了值本身，而修改复制品不修改本身;&lt;/li&gt;
&lt;li&gt;引用是变量的引用，修改引用前必须声明一个变量，无法对常量进行引用;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int value = 5;
int&amp;amp; ref = value; // the reference of value
int copy = value; // the copy of value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，在使用迭代器时，如果要修改被迭代的值本身而不是他的复制品，必须使用引用，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;void shift(vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;amp; nums) &amp;#123;
    for (auto [num1, num2]: nums) &amp;#123;
        num1++;
        num2++;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码中，&lt;code&gt;auto [num1,num2]&lt;/code&gt;是&lt;code&gt;nums&lt;/code&gt;中每个元素的复制品，而不是本身。如果要对本身进行修改，必须使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;for (auto&amp;amp; [num1,num2] : nums)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;left-value-right-value&#34;&gt;&lt;a href=&#34;#left-value-right-value&#34; class=&#34;headerlink&#34; title=&#34;left-value &amp;amp; right-value&#34;&gt;&lt;/a&gt;left-value &amp;amp; right-value&lt;/h1&gt;&lt;p&gt;左值和右值的区别在于，左值通常来说是变量，而右值是字面量。左值可以出现在&lt;code&gt;=&lt;/code&gt;的左边和右边，是在程序生命周期内长期有效。而右值作为字面量，无法在程序中长期存活，自然也不能出现在&lt;code&gt;=&lt;/code&gt;的左边。&lt;/p&gt;
&lt;p&gt;:::info&lt;br&gt;在使用引用时，不允许传入右值，即不允许传入字面量。我们无法对一个常量进行引用，只能对左值(变量)进行引用。&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;常量及常量引用&#34;&gt;&lt;a href=&#34;#常量及常量引用&#34; class=&#34;headerlink&#34; title=&#34;常量及常量引用&#34;&gt;&lt;/a&gt;常量及常量引用&lt;/h1&gt;&lt;p&gt;常量是不允许修改的量，使用&lt;code&gt;const&lt;/code&gt;声明常量。常量的引用和复制也必须是常量，引用及复制前加&lt;code&gt;const&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;Containers&#34;&gt;&lt;a href=&#34;#Containers&#34; class=&#34;headerlink&#34; title=&#34;Containers&#34;&gt;&lt;/a&gt;Containers&lt;/h1&gt;&lt;h1 id=&#34;Iterators-and-Pointers&#34;&gt;&lt;a href=&#34;#Iterators-and-Pointers&#34; class=&#34;headerlink&#34; title=&#34;Iterators and Pointers&#34;&gt;&lt;/a&gt;Iterators and Pointers&lt;/h1&gt;&lt;h1 id=&#34;Classes&#34;&gt;&lt;a href=&#34;#Classes&#34; class=&#34;headerlink&#34; title=&#34;Classes&#34;&gt;&lt;/a&gt;Classes&lt;/h1&gt;&lt;h1 id=&#34;Template-Classes-and-Const-Correctness&#34;&gt;&lt;a href=&#34;#Template-Classes-and-Const-Correctness&#34; class=&#34;headerlink&#34; title=&#34;Template Classes and Const Correctness&#34;&gt;&lt;/a&gt;Template Classes and Const Correctness&lt;/h1&gt;&lt;h1 id=&#34;Template-Functions&#34;&gt;&lt;a href=&#34;#Template-Functions&#34; class=&#34;headerlink&#34; title=&#34;Template Functions&#34;&gt;&lt;/a&gt;Template Functions&lt;/h1&gt;&lt;h1 id=&#34;Functions-and-Lambdas&#34;&gt;&lt;a href=&#34;#Functions-and-Lambdas&#34; class=&#34;headerlink&#34; title=&#34;Functions and Lambdas&#34;&gt;&lt;/a&gt;Functions and Lambdas&lt;/h1&gt;&lt;h1 id=&#34;Midquarter-Review&#34;&gt;&lt;a href=&#34;#Midquarter-Review&#34; class=&#34;headerlink&#34; title=&#34;Midquarter Review&#34;&gt;&lt;/a&gt;Midquarter Review&lt;/h1&gt;&lt;h1 id=&#34;Operators&#34;&gt;&lt;a href=&#34;#Operators&#34; class=&#34;headerlink&#34; title=&#34;Operators&#34;&gt;&lt;/a&gt;Operators&lt;/h1&gt;&lt;h1 id=&#34;Special-Member-Functions&#34;&gt;&lt;a href=&#34;#Special-Member-Functions&#34; class=&#34;headerlink&#34; title=&#34;Special Member Functions&#34;&gt;&lt;/a&gt;Special Member Functions&lt;/h1&gt;&lt;h1 id=&#34;Move-Semantics&#34;&gt;&lt;a href=&#34;#Move-Semantics&#34; class=&#34;headerlink&#34; title=&#34;Move Semantics&#34;&gt;&lt;/a&gt;Move Semantics&lt;/h1&gt;&lt;h1 id=&#34;std-optional-and-Type-Safety&#34;&gt;&lt;a href=&#34;#std-optional-and-Type-Safety&#34; class=&#34;headerlink&#34; title=&#34;std::optional and Type Safety&#34;&gt;&lt;/a&gt;std::optional and Type Safety&lt;/h1&gt;&lt;h1 id=&#34;RAII-Smart-Pointers-and-Building-C-Projects&#34;&gt;&lt;a href=&#34;#RAII-Smart-Pointers-and-Building-C-Projects&#34; class=&#34;headerlink&#34; title=&#34;RAII, Smart Pointers, and Building C++ Projects&#34;&gt;&lt;/a&gt;RAII, Smart Pointers, and Building C++ Projects&lt;/h1&gt;&lt;h1 id=&#34;C-for-Data-Science-and-ML&#34;&gt;&lt;a href=&#34;#C-for-Data-Science-and-ML&#34; class=&#34;headerlink&#34; title=&#34;C++ for Data Science and ML&#34;&gt;&lt;/a&gt;C++ for Data Science and ML&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</guid>
            <title>Arch Linux系统配置教程</title>
            <link>https://salvely.github.io/blog/2023/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</link>
            <category>Arch</category>
            <category>Linux</category>
            <category>操作系统</category>
            <category>notes</category>
            <category>配置教程</category>
            <pubDate>Sun, 15 Oct 2023 09:38:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;初始化用户和组&#34;&gt;&lt;a href=&#34;#初始化用户和组&#34; class=&#34;headerlink&#34; title=&#34;初始化用户和组&#34;&gt;&lt;/a&gt;初始化用户和组&lt;/h1&gt;&lt;h1 id=&#34;权限授予&#34;&gt;&lt;a href=&#34;#权限授予&#34; class=&#34;headerlink&#34; title=&#34;权限授予&#34;&gt;&lt;/a&gt;权限授予&lt;/h1&gt;&lt;h1 id=&#34;安全性配置&#34;&gt;&lt;a href=&#34;#安全性配置&#34; class=&#34;headerlink&#34; title=&#34;安全性配置&#34;&gt;&lt;/a&gt;安全性配置&lt;/h1&gt;&lt;h1 id=&#34;安装基本组件&#34;&gt;&lt;a href=&#34;#安装基本组件&#34; class=&#34;headerlink&#34; title=&#34;安装基本组件&#34;&gt;&lt;/a&gt;安装基本组件&lt;/h1&gt;&lt;h1 id=&#34;让系统更易用&#34;&gt;&lt;a href=&#34;#让系统更易用&#34; class=&#34;headerlink&#34; title=&#34;让系统更易用&#34;&gt;&lt;/a&gt;让系统更易用&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
            <title>Debian包管理初探</title>
            <link>https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/</link>
            <category>Linux</category>
            <category>操作系统</category>
            <category>notes</category>
            <category>Debian</category>
            <category>包管理</category>
            <pubDate>Sat, 14 Oct 2023 14:23:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Linux-发行版&#34;&gt;&lt;a href=&#34;#Linux-发行版&#34; class=&#34;headerlink&#34; title=&#34;Linux 发行版&#34;&gt;&lt;/a&gt;Linux 发行版&lt;/h1&gt;&lt;p&gt;Linux 操作系统 &amp;#x3D; Linux 内核 + 不同功能&lt;br&gt;但是因为内核和功能包有多种不同配置，因此 Linux 有多种发行版。&lt;br&gt;几种主要的发行版及其衍生是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arch -&amp;gt; Manjaro&lt;/li&gt;
&lt;li&gt;Debian -&amp;gt; Ubuntu&lt;/li&gt;
&lt;li&gt;RHEL -&amp;gt; Scientific Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安装软件的困惑？&#34;&gt;&lt;a href=&#34;#安装软件的困惑？&#34; class=&#34;headerlink&#34; title=&#34;安装软件的困惑？&#34;&gt;&lt;/a&gt;安装软件的困惑？&lt;/h1&gt;&lt;p&gt;:::default&lt;br&gt;我们要在 Linux 操作系统上安装一个软件，思考如下问题：&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要哪些文件？如何获取他们？&lt;/li&gt;
&lt;li&gt;用户需要做多少工作？&lt;/li&gt;
&lt;li&gt;开发者需要做多少工作？&lt;/li&gt;
&lt;li&gt;在发行软件的过程中还有其他人参与工作吗？&lt;/li&gt;
&lt;li&gt;如何更新软件包？&lt;/li&gt;
&lt;li&gt;如何保证软件包来源的安全性？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::default&lt;br&gt;一个简陋的安装方案是：直接下载一堆文件。这其中包含的内容有：&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译好的二进制可执行文件&lt;/li&gt;
&lt;li&gt;配置信息&lt;/li&gt;
&lt;li&gt;说明文档&lt;/li&gt;
&lt;li&gt;许可证(License)&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::default&lt;br&gt;那么问题来了：&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要哪些文件？&lt;/li&gt;
&lt;li&gt;这些文件放在哪里？&lt;/li&gt;
&lt;li&gt;如何进行环境配置？&lt;/li&gt;
&lt;li&gt;这个安装包和我的系统兼容吗？&lt;/li&gt;
&lt;li&gt;我怎么更新呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::default&lt;br&gt;一个进阶的安装方案是：下载一个压缩包。但是我们也面临一些问题：&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里面的文件是编译好的还是未编译的？&lt;/li&gt;
&lt;li&gt;软件包之间存在依赖关系怎么办？&lt;/li&gt;
&lt;li&gt;这个软件如何应对不同 Linux 发行版的需求？&lt;/li&gt;
&lt;li&gt;如何更新？如何保证更新后的版本可靠？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;解决方案：打包！&#34;&gt;&lt;a href=&#34;#解决方案：打包！&#34; class=&#34;headerlink&#34; title=&#34;解决方案：打包！&#34;&gt;&lt;/a&gt;解决方案：打包！&lt;/h1&gt;&lt;h2 id=&#34;什么是包？&#34;&gt;&lt;a href=&#34;#什么是包？&#34; class=&#34;headerlink&#34; title=&#34;什么是包？&#34;&gt;&lt;/a&gt;什么是包？&lt;/h2&gt;&lt;p&gt;包是 Linux 操作系统上软件的组织方式。&lt;/p&gt;
&lt;h2 id=&#34;什么是仓库（repository）？&#34;&gt;&lt;a href=&#34;#什么是仓库（repository）？&#34; class=&#34;headerlink&#34; title=&#34;什么是仓库（repository）？&#34;&gt;&lt;/a&gt;什么是仓库（&lt;code&gt;repository&lt;/code&gt;）？&lt;/h2&gt;&lt;p&gt;仓库是一系列软件包的合集列表。&lt;code&gt;Debian&lt;/code&gt;上常见的仓库包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debian stable (all the packages available to install on a default Debian stable install)&lt;/li&gt;
&lt;li&gt;Debian security updates&lt;/li&gt;
&lt;li&gt;Debian backports&lt;/li&gt;
&lt;li&gt;Docker’s custom repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个 Linux 发行版都维护仓库，里面列举了该仓库中可安装的所有软件包&lt;/li&gt;
&lt;li&gt;包维护者负责对开发者的软件进行打包&lt;/li&gt;
&lt;li&gt;对于不同的 Linux 发行版，打包的方式不同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::info&lt;br&gt;包和仓库区别的详细解释参考这里:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMDkwNzU4L3doYXQtYXJlLXBhY2thZ2VzLWFuZC1yZXBvc2l0b3JpZXM=&#34;&gt;what are packages and repositories&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.cn/article-14994-1.html&#34;&gt;&lt;code&gt;apt-update&lt;/code&gt;和&lt;code&gt;apt-upgrade&lt;/code&gt;的区别&lt;/a&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;包的安装过程&#34;&gt;&lt;a href=&#34;#包的安装过程&#34; class=&#34;headerlink&#34; title=&#34;包的安装过程&#34;&gt;&lt;/a&gt;包的安装过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;从包列表中读取该包&lt;/li&gt;
&lt;li&gt;查看该包的所有依赖项&lt;/li&gt;
&lt;li&gt;看看依赖项中哪些包已经安装了&lt;/li&gt;
&lt;li&gt;安装未安装的依赖&lt;/li&gt;
&lt;li&gt;解压缩文件等&lt;/li&gt;
&lt;li&gt;完成一些安装后需要做的工作，如将其作为&lt;code&gt;service&lt;/code&gt;启动&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- # 仓库 vs App Store
仓库和App Store均是集中管理包的地方，但是他们略有不同。
## 软件包更新方式
仓库：
- 维护者负责发布更新
- 部分不稳定的更新会延迟
- 用户可自己选择使用测试版
App Store：
- 开发者直接向用户推送更新
- 可能随机挑选用户测试更新
## 安全方面和依赖管理方面
仓库：
- 用户可信赖开发者
App Store:
- 具有隔离性，一切依赖开发者决定 --&gt;

&lt;h1 id=&#34;包更新方式&#34;&gt;&lt;a href=&#34;#包更新方式&#34; class=&#34;headerlink&#34; title=&#34;包更新方式&#34;&gt;&lt;/a&gt;包更新方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;部分 Linux 发行版采用&lt;code&gt;periodic release&lt;/code&gt;方式，例如&lt;code&gt;Debian&lt;/code&gt;，2 年一发行&lt;/li&gt;
&lt;li&gt;部分采用&lt;code&gt;rolling release&lt;/code&gt;方式，例如&lt;code&gt;Arch&lt;/code&gt;，发行版更新更快，但是是以稳定性为代价&lt;br&gt;更多内容参考这里：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91dGNjLnV0b3JvbnRvLmNhL35ja3Mvc3BhY2UvYmxvZy9saW51eC9Sb2xsaW5nVnNSZWxlYXNlc05vV2lubmVy&#34;&gt;Rolling distribution releases versus periodic releases are a tradeoff&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;自动化包管理工具&#34;&gt;&lt;a href=&#34;#自动化包管理工具&#34; class=&#34;headerlink&#34; title=&#34;自动化包管理工具&#34;&gt;&lt;/a&gt;自动化包管理工具&lt;/h1&gt;&lt;h2 id=&#34;apt&#34;&gt;&lt;a href=&#34;#apt&#34; class=&#34;headerlink&#34; title=&#34;apt&#34;&gt;&lt;/a&gt;&lt;code&gt;apt&lt;/code&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apt update&lt;/code&gt;：生成列表，显示仓库中包含哪些包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt upgrade&lt;/code&gt;&amp;#x2F;&lt;code&gt;apt dist-upgrade&lt;/code&gt;：把列表中的包升级到最新版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt policy &amp;lt;packagename&amp;gt;&lt;/code&gt;：列举可安装的包版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt -t [targetrelease] install [package]&lt;/code&gt;：安装特定版本包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt install &amp;lt;packagename&amp;gt;&lt;/code&gt;：安装包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt remove &amp;lt;packagename&amp;gt;&lt;/code&gt;：卸载包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt search &amp;lt;packagename&amp;gt;&lt;/code&gt;：搜索包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt install ./&amp;lt;packagename&amp;gt;.deb&lt;/code&gt;：安装本地的&lt;code&gt;deb&lt;/code&gt;包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt download &amp;lt;packagename&amp;gt;.deb&lt;/code&gt;：下载包&lt;br&gt;:::info&lt;br&gt;几种不同命令的区别参考这里：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xOTQ2NTEvd2h5LXVzZS1hcHQtZ2V0LXVwZ3JhZGUtaW5zdGVhZC1vZi1hcHQtZ2V0LWRpc3QtdXBncmFkZQ==&#34;&gt;Why use apt-get upgrade instead of apt-get dist-upgrade?&lt;/span&gt;&lt;br&gt;:::&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dpkg-多用于安装本地包&#34;&gt;&lt;a href=&#34;#dpkg-多用于安装本地包&#34; class=&#34;headerlink&#34; title=&#34;dpkg:多用于安装本地包&#34;&gt;&lt;/a&gt;&lt;code&gt;dpkg&lt;/code&gt;:多用于安装本地包&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dpkg -i [packagefilename]&lt;/code&gt;：安装本地包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpkg --remove [packagename]&lt;/code&gt;：卸载本地包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpkg -I [packagename]&lt;/code&gt;：查看本地包的更多信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpkg --configure -a&lt;/code&gt;：查看所有解压了但是还没安装的包&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用什么包？&#34;&gt;&lt;a href=&#34;#使用什么包？&#34; class=&#34;headerlink&#34; title=&#34;使用什么包？&#34;&gt;&lt;/a&gt;使用什么包？&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;和&lt;code&gt;/etc/apt/sources.list.d&lt;/code&gt;文件中维护镜像源：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;deb http://mirrors/debian/ stretch-backports main contrib non-free
deb http://mirrors/debian-security/ stretch/updates main contrib non-free
deb-src http://mirrors/debian-security/ stretch/updates main contrib non-free
deb http://mirrors/debian/ stretch-updates main contrib non-free
deb-src http://mirrors/debian/ stretch-updates main contrib non-free
deb http://mirrors/debian/ stretch main contrib non-free
deb-src http://mirrors/debian/ stretch main contrib non-free
# OCF
deb http://apt/ stretch-backports main
deb-src http://apt/ stretch-backports main
deb http://apt/ stretch main
deb-src http://apt/ stretch main
deb http://mirrors/puppetlabs/apt/ stretch puppet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::info&lt;br&gt;我个人的理解是，&lt;code&gt;repository&lt;/code&gt;是指仓库名，仓库中列举了该仓库有哪些软件包。而&lt;code&gt;mirror list&lt;/code&gt;指明了从哪里下载这个仓库中的软件包（网络地址）？在清华的镜像中有这个仓库，而在中科大的镜像中也有这个仓库。镜像中仓库的内容随着官方仓库内容的更新而更新？&lt;br&gt;关于什么是镜像，请看这里:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy85MTMxODAvd2hhdC1hcmUtbWlycm9ycw==&#34;&gt;What are mirrors？&lt;/span&gt;&lt;br&gt;:::&lt;br&gt;不同的仓库中的软件版本可能不同，需要通过&lt;code&gt;apt policy&lt;/code&gt;来看软件包所属的仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;每行内容如何解读？&#34;&gt;&lt;a href=&#34;#每行内容如何解读？&#34; class=&#34;headerlink&#34; title=&#34;每行内容如何解读？&#34;&gt;&lt;/a&gt;每行内容如何解读？&lt;/h2&gt;&lt;p&gt;:::info&lt;br&gt;以下内容摘自 UC Berkeley System Admin Decal 原文&lt;br&gt;:::&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;deb http://mirrors/debian/ stretch-backports main contrib non-free
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;deb&lt;/code&gt; is binary package source. &lt;code&gt;deb-src&lt;/code&gt; indicates src packages.&lt;br&gt;&lt;code&gt;http://…&lt;/code&gt; describes the location&lt;br&gt;&lt;code&gt;stretch-backports&lt;/code&gt; means that this is for &lt;code&gt;Jessie stretch&lt;/code&gt; and from a &lt;code&gt;backport&lt;/code&gt; repository&lt;br&gt;&lt;code&gt;main&lt;/code&gt; means that the repo has packages licensed under &lt;code&gt;Debian Free Software Guidelines (DFSG)&lt;/code&gt;&lt;br&gt;&lt;code&gt;contrib&lt;/code&gt; repos have packages licensed under &lt;code&gt;DSFG&lt;/code&gt; but require &lt;code&gt;non-free dependencies&lt;/code&gt;&lt;br&gt;&lt;code&gt;non-free&lt;/code&gt; repos have packages that do not comply with &lt;code&gt;DSFG&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;手动安装包&#34;&gt;&lt;a href=&#34;#手动安装包&#34; class=&#34;headerlink&#34; title=&#34;手动安装包&#34;&gt;&lt;/a&gt;手动安装包&lt;/h1&gt;&lt;p&gt;包中通常含有&lt;code&gt;Makefile&lt;/code&gt;文件，我们可以手动的进行安装。&lt;br&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装所需的相关包，例如&lt;code&gt;gcc&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不便之处：卸载麻烦。&lt;/p&gt;
&lt;h1 id=&#34;包结构&#34;&gt;&lt;a href=&#34;#包结构&#34; class=&#34;headerlink&#34; title=&#34;包结构&#34;&gt;&lt;/a&gt;包结构&lt;/h1&gt;&lt;p&gt;Debian 包通常具有如下几个目录和文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;control&lt;/code&gt;：涵盖包的元信息，例如包的大小、版本、依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debian-binary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etc&lt;/code&gt;：配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;md5sums&lt;/code&gt;：文件有效性检验&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usr&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bin&lt;/code&gt;：可执行文件，要加到&lt;code&gt;$PATH&lt;/code&gt;环境变量中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;share&lt;/code&gt;：文档，man page，本地化设置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;doc&lt;/code&gt;：文档&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;: info page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale&lt;/code&gt;：本地化设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man&lt;/code&gt;：man page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;自己组包&#34;&gt;&lt;a href=&#34;#自己组包&#34; class=&#34;headerlink&#34; title=&#34;自己组包&#34;&gt;&lt;/a&gt;自己组包&lt;/h1&gt;&lt;h2 id=&#34;usr-目录下几个重要的目录&#34;&gt;&lt;a href=&#34;#usr-目录下几个重要的目录&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;usr 目录下几个重要的目录&#34;&gt;&lt;/a&gt;&amp;#x2F;usr 目录下几个重要的目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/bin&lt;/code&gt; 二进制可执行文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/lib&lt;/code&gt; 相关的库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/include&lt;/code&gt; 头文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share&lt;/code&gt; 文档等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;打包过程：将hellopenguin-c程序打包&#34;&gt;&lt;a href=&#34;#打包过程：将hellopenguin-c程序打包&#34; class=&#34;headerlink&#34; title=&#34;打包过程：将hellopenguin.c程序打包&#34;&gt;&lt;/a&gt;打包过程：将&lt;code&gt;hellopenguin.c&lt;/code&gt;程序打包&lt;/h2&gt;&lt;h3 id=&#34;初始准备&#34;&gt;&lt;a href=&#34;#初始准备&#34; class=&#34;headerlink&#34; title=&#34;初始准备&#34;&gt;&lt;/a&gt;初始准备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;编写&lt;code&gt;hellopenguin.c&lt;/code&gt;程序&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void)
&amp;#123;
    printf(&amp;quot;Hello Penguin!\n&amp;quot;);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;编译&lt;code&gt;hellopenguin.c&lt;/code&gt;程序，生成可执行文件&lt;code&gt;hellopenguin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;gcc hellopenguin.c -o hellopenguin
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打包环境准备&#34;&gt;&lt;a href=&#34;#打包环境准备&#34; class=&#34;headerlink&#34; title=&#34;打包环境准备&#34;&gt;&lt;/a&gt;打包环境准备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;fpm&lt;/code&gt;工具(&lt;code&gt;Ruby Gem&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ sudo apt install ruby-dev
$ sudo gem install fpm
$ fpm -s dir -t deb -n [name here] -v [version #] -C [the directory with the /usr folder]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::info&lt;br&gt;如果&lt;code&gt;gem&lt;/code&gt;安装&lt;code&gt;fpm&lt;/code&gt;过慢的话，需要给 ruby 环境换源，命令如下（这里使用清华源）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 添加镜像源并移除默认源
gem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/
# 列出已有源
gem sources -l
# 应该只有镜像源一个
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者在&lt;code&gt;~/.gemrc&lt;/code&gt;中将&lt;code&gt;https://mirrors.tuna.tsinghua.edu.cn/rubygems/&lt;/code&gt;加到&lt;code&gt;sources&lt;/code&gt;字段。&lt;br&gt;:::&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;查看&lt;code&gt;fpm&lt;/code&gt;是否安装，输入&lt;code&gt;fpm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建包文件夹&#34;&gt;&lt;a href=&#34;#创建包文件夹&#34; class=&#34;headerlink&#34; title=&#34;创建包文件夹&#34;&gt;&lt;/a&gt;创建包文件夹&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建目录&lt;code&gt;packpenguin/usr/bin&lt;/code&gt;，将&lt;code&gt;hellopenguin&lt;/code&gt;放进去&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mkdir -p packpenguin/usr/bin
mv hellopenguin packpenguin/usr/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在&lt;code&gt;packpenguin&lt;/code&gt;的父目录中，使用&lt;code&gt;fpm&lt;/code&gt;进行打包，命令如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;fpm -s dir -t deb -n hellopenguin -v 1.0~ocf1 -C packpenguin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中几个字段解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;：使用一个目录构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;：生成&lt;code&gt;deb&lt;/code&gt;包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;：输出包的名字叫&lt;code&gt;hellopenguin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;：版本号为&lt;code&gt;1.0~ocf1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-C&lt;/code&gt;:由&lt;code&gt;packpenguin&lt;/code&gt;目录生成&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装我们组建的包:&lt;code&gt;sudo dpkg -i ./hellopenguin_1.0~ocf1_amd64.deb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;hellopenguin&lt;/code&gt;，运行&lt;code&gt;hellopenguin&lt;/code&gt;，可以看到输出了&lt;code&gt;Hello Penguin!&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::info&lt;br&gt;要卸载我们安装的包，可以使用&lt;code&gt;dpkg --remove hellopenguin&lt;/code&gt;命令。&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVJNTlBSSE5vaDRhNUtXd1hZOGZCV0o0OW5CYWZ4Ym80Zy1PdlNaWjg1VjgvZWRpdCNzbGlkZT1pZC5nNTM2NGNlYzI4Y18wXzEx&#34;&gt;Packaging&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTIvI2dyYWRpbmctbm90ZQ==&#34;&gt;Advanced Lab 2 - Packages and Packaging and Troubleshooting&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVVKSE83Zlhvay02Uk43REFKNVNQVHFjQ1hpUlNSOGhwR1p4OU9RTW5NT1UvZWRpdCNzbGlkZT1pZC5w&#34;&gt;Distros, Packaging, and Compiling&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYjQvI3doYXQtaXMtYS1kaXN0cmlidXRpb24=&#34;&gt;Beginner Lab 4 - Debian, packages, compiling software&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0vd2lraQ==&#34;&gt;FPM 文档&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90bGRyLnNoLw==&#34;&gt;TLDR 页面&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://salvely.github.io/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid>
            <title>Arch Linux安装实录&amp;知识讲解&amp;踩坑分析（超详细！）</title>
            <link>https://salvely.github.io/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link>
            <category>Arch</category>
            <category>Linux</category>
            <category>安装教程</category>
            <category>操作系统</category>
            <category>notes</category>
            <pubDate>Thu, 12 Oct 2023 13:50:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;:::danger&lt;br&gt;此坑还没填完，暂时只添加了安装部分（装完发现 Arch wiki 实在是已经写得很详细了），还有很多的知识还没有完全弄清楚和补充。&lt;br&gt;等我学习完&lt;code&gt;计算机组成原理&lt;/code&gt;，&lt;code&gt;操作系统&lt;/code&gt;和&lt;code&gt;计算机网络&lt;/code&gt;后会再来填坑。&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::info&lt;br&gt;本文安装过程基本按照 Arch Linux 安装文档，附带了额外的相关知识。其中可能伴有踩坑，但是也是一种经验啦！:smile:&lt;br&gt;如发现本文某些地方有误，请在评论区评论，我看到的话会改过来哒！&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;写作起因&#34;&gt;&lt;a href=&#34;#写作起因&#34; class=&#34;headerlink&#34; title=&#34;写作起因&#34;&gt;&lt;/a&gt;写作起因&lt;/h1&gt;&lt;p&gt;Arch Linux 的安装过程涉及较多的操作系统知识，而不仅仅是像 Ubuntu&amp;#x2F;Debian 那样提供 GUI 中的几个选项供你选择。此外，Arch Linux 的文档较为详细（Arch wiki 简直是棒极了！）。&lt;br&gt;因此，本教程不只是演示本人的安装&amp;amp;踩坑过程，还附带许多的相关文档带读、踩坑原因分析等。&lt;/p&gt;
&lt;h1 id=&#34;本文适合哪些人&#34;&gt;&lt;a href=&#34;#本文适合哪些人&#34; class=&#34;headerlink&#34; title=&#34;本文适合哪些人&#34;&gt;&lt;/a&gt;本文适合哪些人&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;热爱倒腾的&lt;/li&gt;
&lt;li&gt;不怕踩坑的&lt;/li&gt;
&lt;li&gt;想要通过 Arch Linux 安装过程递归学习其他知识的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;对于其他同学&#34;&gt;&lt;a href=&#34;#对于其他同学&#34; class=&#34;headerlink&#34; title=&#34;对于其他同学&#34;&gt;&lt;/a&gt;对于其他同学&lt;/h1&gt;&lt;p&gt;若您仅需要高效的安装 Arch Linux，而不希望看相关知识及其他无关的踩坑过程的，可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参考其他博主的奶妈式教程&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81OTYyMjc1MjQ=&#34;&gt;Arch Linux 详细安装教程，萌新再也不怕了！「2023.09」&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNoLmljZWt5bGluLm9ubGluZS8=&#34;&gt;archlinux 简明指南 包含安装、配置、维护等，帮助新手快速上手&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMv&#34;&gt;Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ttaW5kaS9qaWZmeWJveC1hcmNobGludXgtdHV0b3JpYWw=&#34;&gt;Github 教程 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RzMTk5OTE5OTkvQXJjaExpbnV4LUluc3RhbGwtVHV0b3JpYWw=&#34;&gt;Github 教程 2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NzgwNzU1Mzg=&#34;&gt;2022 年 12 月最新安装 Archlinux 一次过的教程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTM4NTkyMzY=&#34;&gt;2022.5 archlinux 详细安装过程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWl2bS5jbi9hcmNobGludXgtaW5zdGFsbGF0aW9uLWd1aWRlLXNpbXBsZQ==&#34;&gt;ArchLinux 安装指南（新手向）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MzM5MjAwNzk=&#34;&gt;Archlinux 安装教程超详细（2021.11.15&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YyMDc1MzA1Mi8=&#34;&gt;Arch Linux 完全安装教程 2023.10&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;archinstall 工具&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTE0NDQ0LTEuaHRtbA==&#34;&gt;用 archinstall 自动化脚本安装 Arch Linux&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FyY2hsaW51eC9hcmNoaW5zdGFsbA==&#34;&gt;archinstall github 链接&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;一些图形化界面安装工具&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Nwb29reWtpZG1tL3plbl9pbnN0YWxsZXI=&#34;&gt;Zen installer&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FyY2gtbGludXgtZ3VpL2FsZy1yZWxlYXNlcw==&#34;&gt;archlinuxgui&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Netboot 网络安装&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Rlbmd0ZW5nc25ha2UvQXJjaC1saW51eC1pbnN0YWxsLXR1dG9yaWFs&#34;&gt;Github 上提供的脚本（按照里面的命令一个个输入）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQ2F0ZWdvcnk6SW5zdGFsbGF0aW9uX3Byb2Nlc3M=&#34;&gt;其他安装方式&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;要在一个 Ubuntu 虚拟机上安装 Arch 虚拟机（嵌套虚拟机），请看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTMv&#34;&gt;这里&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用 Arch 前看了 UCB System Admin Decal 的 Linux Pre-install and Install 一节，其中的实验是在 Ubuntu 虚拟机上安装 Arch。Arch 的安装涉及到自己进行分区，对系统进行加密和解密等，我觉得非常有趣，对于操作系统本身也是一个探索的过程。因此决定挑战自己跟着官方文档进行安装。&lt;br&gt;以前每次安装 Linux 虚拟机，包括 Ubuntu 和 Debian，都是跟着一些博主自己写的奶妈式手把手安装教程一步步的装。每次都能安装成功，但是总是感觉少了一些&lt;code&gt;【探索的乐趣】&lt;/code&gt;:laughing:。&lt;br&gt;今天我就要跟着 Arch Linux 的官方文档一步步装，感受一把极致的安装酸爽体验！&lt;br&gt;+++ 如果你也想体验自己安装 Arch，或者是想成为 Arch 开发者，下面内容可能对你有帮助：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSW5zdGFsbGF0aW9uX2d1aWRlI0FjcXVpcmVfYW5faW5zdGFsbGF0aW9uX2ltYWdl&#34;&gt;Arch Linux 官方安装文档&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaGlzby8tL2lzc3Vlcw==&#34;&gt;Issue tracker&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saXN0cy5hcmNobGludXgub3JnL21haWxtYW4zL2xpc3RzL2FyY2gtcmVsZW5nLmxpc3RzLmFyY2hsaW51eC5vcmcv&#34;&gt;Mailing List&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCOCVCOCVFOCVBNyU4MSVFOSU5NyVBRSVFOSVBMiU5OA==&#34;&gt;常见问题及解答&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL0hlbHA6JUU5JTk4JTg1JUU4JUFGJUJC&#34;&gt;帮助&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL1Byb2plY3Q6JUU1JTg1JUIzJUU0JUJBJThF&#34;&gt;贡献项目&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL01hbl9wYWdl&#34;&gt;帮助手册&lt;/span&gt;&lt;br&gt;+++&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;过程简介&#34;&gt;&lt;a href=&#34;#过程简介&#34; class=&#34;headerlink&#34; title=&#34;过程简介&#34;&gt;&lt;/a&gt;过程简介&lt;/h1&gt;&lt;p&gt;安装过程涉及到的步骤包含：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UEFI 模式启动（或 BIOS，但是分区会不一样，需要注意）&lt;/li&gt;
&lt;li&gt;设置键盘模式&lt;/li&gt;
&lt;li&gt;检查网络连接&lt;/li&gt;
&lt;li&gt;更新系统时钟&lt;/li&gt;
&lt;li&gt;创建磁盘分区&lt;/li&gt;
&lt;li&gt;初始化分区中的文件系统（&lt;code&gt;/&lt;/code&gt;文件系统可选是否加密）&lt;/li&gt;
&lt;li&gt;挂载文件系统&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;pacstrap&lt;/code&gt;安装必要的包：linux 内核，&lt;code&gt;initrd&lt;/code&gt;、&lt;code&gt;init system&lt;/code&gt;、&lt;code&gt;pacman&lt;/code&gt;\、&lt;code&gt;base&lt;/code&gt;等等&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;genfstab&lt;/code&gt;生成&lt;code&gt;/etc/fstab&lt;/code&gt;（文件系统表）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arch-chroot&lt;/code&gt;进入&lt;code&gt;/mnt&lt;/code&gt;目录&lt;/li&gt;
&lt;li&gt;通过修改&lt;code&gt;/etc/hostname&lt;/code&gt;修改主机名&lt;br&gt;+++ boot 启动原理&lt;blockquote&gt;
&lt;p&gt;图源自 UCB System Admin Decal(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMW9MdHNqc0VJc3ZDaE9JMzFfNVlZRmhJTGZ6R2x5eDdIazlEc0wxTnYtbWMvZWRpdD9wbGk9MSNzbGlkZT1pZC5nOWI0MTRkZGEwNF8wXzE1OA==&#34;&gt;https://docs.google.com/presentation/d/1oLtsjsEIsvChOI31_5YYFhILfzGlyx7Hk9DsL1Nv-mc/edit?pli=1#slide=id.g9b414dda04_0_158&lt;/span&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/boot.png&#34; alt=&#34;boot启动原理&#34;&gt;&lt;br&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;获取安装镜像（后缀为-iso）&#34;&gt;&lt;a href=&#34;#获取安装镜像（后缀为-iso）&#34; class=&#34;headerlink&#34; title=&#34;获取安装镜像（后缀为.iso）&#34;&gt;&lt;/a&gt;获取安装镜像（后缀为.iso）&lt;/h1&gt;&lt;p&gt;看了一下下载界面，最顶部写了当前发行版的信息，下面是对于几种不同用户的安装方式以及校验和，最后是所有的 Arch 镜像源集合。&lt;/p&gt;
&lt;h2 id=&#34;发行版信息&#34;&gt;&lt;a href=&#34;#发行版信息&#34; class=&#34;headerlink&#34; title=&#34;发行版信息&#34;&gt;&lt;/a&gt;发行版信息&lt;/h2&gt;&lt;p&gt;当前发布版本: 2023.09.01&lt;br&gt;内核版本: 6.4.12&lt;br&gt;ISO 镜像文件大小: 804.3 MB&lt;/p&gt;
&lt;h2 id=&#34;几种下载方式&#34;&gt;&lt;a href=&#34;#几种下载方式&#34; class=&#34;headerlink&#34; title=&#34;几种下载方式&#34;&gt;&lt;/a&gt;几种下载方式&lt;/h2&gt;&lt;h3 id=&#34;对于已经是-Arch-用户的人&#34;&gt;&lt;a href=&#34;#对于已经是-Arch-用户的人&#34; class=&#34;headerlink&#34; title=&#34;对于已经是 Arch 用户的人&#34;&gt;&lt;/a&gt;对于已经是 Arch 用户的人&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过命令&lt;code&gt;pacman -Syu&lt;/code&gt;更新&lt;/li&gt;
&lt;li&gt;通过&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXgub3JnL21pcnJvcmxpc3Qv&#34;&gt;这里&lt;/span&gt;更新镜像源&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;种子链接下载（官方推荐）&#34;&gt;&lt;a href=&#34;#种子链接下载（官方推荐）&#34; class=&#34;headerlink&#34; title=&#34;种子链接下载（官方推荐）&#34;&gt;&lt;/a&gt;种子链接下载（官方推荐）&lt;/h3&gt;&lt;p&gt;对于这种资源，可以使用&lt;code&gt;百度网盘&lt;/code&gt;或者&lt;code&gt;迅雷&lt;/code&gt;下载（和下载电影相同），下载格式为.torrent，该种子链接需要上传到百度网盘&amp;#x2F;迅雷，然后将其中的 iso 镜像文件下载到本地目录中。&lt;/p&gt;
&lt;h3 id=&#34;Netboot&#34;&gt;&lt;a href=&#34;#Netboot&#34; class=&#34;headerlink&#34; title=&#34;Netboot&#34;&gt;&lt;/a&gt;Netboot&lt;/h3&gt;&lt;p&gt;安装时需要联网，最新版本会自动推送，可用于在系统启动时即时下载最新的 Arch Linux 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Netboot 使用定制的 &lt;code&gt;iPXE&lt;/code&gt; 版本。 实时系统的 Linux 内核、&lt;code&gt;initramfs&lt;/code&gt; 和 &lt;code&gt;squashfs 文件&lt;/code&gt;是从 Arch Linux 镜像下载的。 所有下载文件的完整性都使用&lt;code&gt;加密签名&lt;/code&gt;进行验证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这其中有几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pcHhlLm9yZy9zdGFydA==&#34;&gt;iPXE&lt;/span&gt;是啥？&lt;strong&gt;一种开源的网络启动固件&lt;/strong&gt;&lt;br&gt;其官方文档中的描述如下：&lt;blockquote&gt;
&lt;p&gt;iPXE 是领先的开源网络引导固件。它提供了完整的 PXE 实现，并通过其他功能进行了增强，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 HTTP 从 Web 服务器启动&lt;/li&gt;
&lt;li&gt;从 iSCSI SAN 引导&lt;/li&gt;
&lt;li&gt;通过 FCoE 从光纤通道 SAN 启动&lt;/li&gt;
&lt;li&gt;从 AoE SAN 引导&lt;/li&gt;
&lt;li&gt;从无线网络引导&lt;/li&gt;
&lt;li&gt;从广域网引导&lt;/li&gt;
&lt;li&gt;从 Infiniband 网络引导&lt;/li&gt;
&lt;li&gt;使用脚本控制引导过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此可以看出，iPXE 是一种基于网络进行系统启动的固件。它的启动需要依附于计算机网络的各种协议。在 Arch Linux 文档中也指明，使用 Netboot 安装需要满足以下两点要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有 DHCP 自配置的网络&lt;/li&gt;
&lt;li&gt;能够运行系统的足够存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而它的具体实现是基于&lt;code&gt;PXE&lt;/code&gt;协议。&lt;br&gt;基于递归学习的理念，我又查了查&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JUEyJTg0JUU1JTkwJUFGJUU1JThBJUE4JUU2JTg5JUE3JUU4JUExJThDJUU3JThFJUFGJUU1JUEyJTgzIw==&#34;&gt;PXE&lt;/span&gt;。。。&lt;br&gt;其基本概念如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;预启动执行环境（Preboot eXecution Environment，PXE，也被称为预执行环境）提供了一种使用网络接口（Network Interface）启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。&lt;br&gt;PXE 当初是作为 Intel 的有线管理体系的一部分，Intel 和 Systemsoft 于 1999 年 9 月 20 日公布其规格（版本 2.1）[1]。通过使用像网际协议（IP）、用户数据报协议（UDP）、动态主机设定协定（DHCP）、BOOTP、小型文件传输协议（TFTP）等几种网络协议和全局唯一标识符（GUID）、通用网络驱动接口（UNDI）、通用唯一识别码（UUID）的概念并通过对客户机（通过 PXE 自检的电脑）固件扩展预设的 API 来实现目的。&lt;br&gt;PXE 客户机（client）这个术语是指机器在 PXE 启动过程中的角色。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其基本的运行机制是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户机的固件（如网卡的 PXE 固件）通过 DHCP 协议找到可用的 PXE 启动服务器。在找到可用的 PXE 启动服务器后，固件会向合适的启动服务器询问网络启动程序（NBP，Network Boot Program）的路径，并且通过 TFTP 协议将网络启动程序下载到电脑的内存中，最后执行它[2]。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由&lt;code&gt;PXE&lt;/code&gt;机制又衍生出了无盘系统，其利用网络服务器下载启动系统的镜像，而不是本地硬盘。&lt;code&gt;PXE&lt;/code&gt;的协议规范在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTMxMTAyMDAzMTQxL2h0dHA6Ly9kb3dubG9hZC5pbnRlbC5jb20vZGVzaWduL2FyY2hpdmVzL3dmbS9kb3dubG9hZHMvcHhlc3BlYy5wZGY=&#34;&gt;intel 的这篇文档中&lt;/span&gt;可以查到。而 PXE 的两个实现，一个为&lt;code&gt;iPXE&lt;/code&gt;，另一个则是&lt;code&gt;gPXE&lt;/code&gt;。&lt;code&gt;gPXE&lt;/code&gt;目前已经停止开发，取而代之的是&lt;code&gt;iPXE&lt;/code&gt;。&lt;br&gt;对于&lt;code&gt;iPXE&lt;/code&gt;和&lt;code&gt;gPXE&lt;/code&gt;更详细的介绍，可以参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmhjbC5tb2UvYXJjaGl2ZXMvMjE3Nw==&#34;&gt;这篇博文&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;initramfs文件&lt;/code&gt;和&lt;code&gt;squashfs文件&lt;/code&gt;做什么用？&lt;br&gt;TODO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么&lt;code&gt;Arch Linux&lt;/code&gt;在下载过程中需要使用加密签名对镜像完整性进行验证？&lt;br&gt;TODO&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Vagrant-images-docker-images&#34;&gt;&lt;a href=&#34;#Vagrant-images-docker-images&#34; class=&#34;headerlink&#34; title=&#34;Vagrant images &amp;amp; docker images&#34;&gt;&lt;/a&gt;Vagrant images &amp;amp; docker images&lt;/h3&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;h3 id=&#34;VM-image&#34;&gt;&lt;a href=&#34;#VM-image&#34; class=&#34;headerlink&#34; title=&#34;VM image&#34;&gt;&lt;/a&gt;VM image&lt;/h3&gt;&lt;p&gt;archlinux 虚拟机可从&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaC1ib3hlcy8tL3BhY2thZ2Vz&#34;&gt;这里&lt;/span&gt;下载，使用手册&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIuYXJjaGxpbnV4Lm9yZy9hcmNobGludXgvYXJjaC1ib3hlcw==&#34;&gt;在此&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;HTTP-下载（最常用）&#34;&gt;&lt;a href=&#34;#HTTP-下载（最常用）&#34; class=&#34;headerlink&#34; title=&#34;HTTP 下载（最常用）&#34;&gt;&lt;/a&gt;HTTP 下载（最常用）&lt;/h3&gt;&lt;p&gt;从后文中的镜像源中下载镜像。需要注意的是，我们需要保证下载的镜像的校验和，和同一目录&lt;code&gt;sha256sums.txt&lt;/code&gt;及&lt;code&gt;b2sums.txt&lt;/code&gt;文件中的校验和匹配。&lt;br&gt;下载签名：&lt;code&gt;sq wkd get pierre@archlinux.org -o release-key.pgp&lt;/code&gt;&lt;br&gt;验证：&lt;code&gt;sq verify --signer-file release-key.pgp --detached archlinux-2023.09.01-x86_64.iso.sig archlinux-2023.09.01-x86_64.iso&lt;/code&gt;&lt;br&gt;:::info&lt;br&gt;&lt;code&gt;sq&lt;/code&gt;命令需要使用&lt;code&gt;scoop&lt;/code&gt;进行安装，如果是 windows 用户，会比较麻烦，详细解决办法见后文&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;校验和&#34;&gt;&lt;a href=&#34;#校验和&#34; class=&#34;headerlink&#34; title=&#34;校验和&#34;&gt;&lt;/a&gt;校验和&lt;/h2&gt;&lt;p&gt;最新版本的校验和下载详见官网。在镜像源网站上也可以看到&lt;code&gt;sha256sums.txt&lt;/code&gt;和&lt;code&gt;b2sums.txt&lt;/code&gt;&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/tsinghua_mirror.png&#34; alt=&#34;清华大学镜像站&#34;&gt;。下载镜像后我们需要利用它与我们下载到的镜像的校验和进行比对(主要是用于比对，这两个文件可下载也可不下载，在镜像站上也能打开，只要我们下载到的镜像的校验和文件中版本对应的那行的校验和匹配就行了)。&lt;/p&gt;
&lt;h2 id=&#34;方法一&#34;&gt;&lt;a href=&#34;#方法一&#34; class=&#34;headerlink&#34; title=&#34;方法一&#34;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==&#34;&gt;Download 界面&lt;/span&gt;选择推荐的 BitTorrent Download:&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/download.png&#34; alt=&#34;下载界面&#34;&gt;&lt;/li&gt;
&lt;li&gt;下载到本地电脑的 Downloads 文件夹中，其后缀名为&lt;code&gt;.torrent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开百度网盘，在其中上传该文件&lt;/li&gt;
&lt;li&gt;上传后双击该文件，点击开始下载到网盘，等待下载完成（有点慢哈！）&lt;/li&gt;
&lt;li&gt;下载到网盘后，将&lt;code&gt;iso镜像文件&lt;/code&gt;下载到在自选的本地目录中&lt;br&gt;:::info&lt;br&gt;由于这种方式下载过慢，笔者建议使用方法二，即通过开源镜像站进行下载。&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;方法二&#34;&gt;&lt;a href=&#34;#方法二&#34; class=&#34;headerlink&#34; title=&#34;方法二&#34;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==&#34;&gt;Download 界面&lt;/span&gt;下翻，找到中国的镜像站列表:&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/mirrors.png&#34; alt=&#34;中国镜像站列表&#34;&gt;&lt;/li&gt;
&lt;li&gt;在其中选择&lt;code&gt;tuna.tsinghua.edu.cn&lt;/code&gt;，即清华大学镜像站（我每次都用他们的镜像，速度不错）&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/tsinghua_mirror.png&#34; alt=&#34;清华大学镜像站&#34;&gt;&lt;/li&gt;
&lt;li&gt;选择&lt;code&gt;archlinux-2023.09.01-x86_64.iso&lt;/code&gt;下载&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;.iso&lt;/code&gt;文件保存到我们想要虚拟机保存的目录中&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;获取GnuPG签名&#34;&gt;&lt;a href=&#34;#获取GnuPG签名&#34; class=&#34;headerlink&#34; title=&#34;获取GnuPG签名&#34;&gt;&lt;/a&gt;获取&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpL0dudVBH&#34;&gt;GnuPG&lt;/span&gt;签名&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;GnuPG 是什么？&lt;br&gt;GnuPG 是完整实现了 RFC4880（即 PGP）所定义的 OpenPGP 标准的自由软件。GnuPG 可以加密和签名你的数据和通讯信息，包含一个通用的密钥管理系统以及用于各种公钥目录的访问模块。GnuPG，简称 GPG，是一个易于与其它程序整合的命令行工具，拥有很多前端程序和函数库。GnuPG 还支持 S&amp;#x2F;MIME 和 Secure Shell (ssh)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从上述清华大学镜像站，可获取 iso 版本对应的 PGP 签名&lt;code&gt;archlinux-2023.09.01-x86_64.iso.sig`` ![清华大学镜像站](tsinghua_mirror.png) 在本次安装中，我使用的是&lt;/code&gt;Git Bash&lt;code&gt;，其中装有GPG，&lt;/code&gt;cmd&lt;code&gt;和&lt;/code&gt;powershell&amp;#96;中也装有 gpg，可选择一个终端进行后续操作。&lt;/p&gt;
&lt;h1 id=&#34;验证签名&#34;&gt;&lt;a href=&#34;#验证签名&#34; class=&#34;headerlink&#34; title=&#34;验证签名&#34;&gt;&lt;/a&gt;验证签名&lt;/h1&gt;&lt;p&gt;为避免因 HTTP 连接下载镜像时遭到拦截，获取到恶意镜像，我们需要利用 PGP 签名对镜像进行验证。&lt;br&gt;通过以下命令验证:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;version&lt;/code&gt;替换成你所下载的版本号，如&lt;code&gt;2023.09.01&lt;/code&gt;。我的显示结果是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;legion@DESKTOP-ROOSFVQ MINGW64 /e/VMs/Arch
$ gpg --keyserver-options auto-key-retrieve --verify archlinux-2023.09.01-x86_64.iso.sig
gpg: assuming signed data in &amp;#39;archlinux-2023.09.01-x86_64.iso&amp;#39;
gpg: Signature made 2023年09月 1日 18:48:49
gpg:                using EDDSA key 3E80CA1A8B89F69CBA57D98A76A5EF9054449A5C
gpg:                issuer &amp;quot;pierre@archlinux.org&amp;quot;
gpg: Good signature from &amp;quot;Pierre Schmitz &amp;lt;pierre@archlinux.org&amp;gt;&amp;quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 3E80 CA1A 8B89 F69C BA57  D98A 76A5 EF90 5444 9A5C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若从镜像站下载，则会显示&lt;code&gt;fingerprint&lt;/code&gt;，我们需要打开&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rZXlzZXJ2ZXIudWJ1bnR1LmNvbS9wa3MvbG9va3VwP29wPXZpbmRleCZmaW5nZXJwcmludD1vbiZleGFjdD1vbiZzZWFyY2g9MHgzRTgwQ0ExQThCODlGNjlDQkE1N0Q5OEE3NkE1RUY5MDU0NDQ5QTVD&#34;&gt;fingerprint 合集&lt;/span&gt;,确保我们所获得的镜像的&lt;code&gt;fingerprint&lt;/code&gt;和该网站上的 fingerprint 吻合。（确保公钥的指纹等于其中一位签署了 ISO 文件 Arch Linux 开发者的指纹）&lt;/p&gt;
&lt;h1 id=&#34;准备安装介质&#34;&gt;&lt;a href=&#34;#准备安装介质&#34; class=&#34;headerlink&#34; title=&#34;准备安装介质&#34;&gt;&lt;/a&gt;准备安装介质&lt;/h1&gt;&lt;p&gt;安装镜像包括：U 盘，光盘，和带有 PXE 的网络安装镜像。此处我是用 VMWare 虚拟机进行安装。&lt;/p&gt;
&lt;h1 id=&#34;VMWare-新建虚拟机&#34;&gt;&lt;a href=&#34;#VMWare-新建虚拟机&#34; class=&#34;headerlink&#34; title=&#34;VMWare 新建虚拟机&#34;&gt;&lt;/a&gt;VMWare 新建虚拟机&lt;/h1&gt;&lt;p&gt;依次选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义（高级）&lt;/li&gt;
&lt;li&gt;硬件兼容性&lt;/li&gt;
&lt;li&gt;稍后安装操作系统&lt;/li&gt;
&lt;li&gt;本内核版本为 6.4.12，因 VMware 中没有 Arch，因此我选择&lt;code&gt;其他 Linux 5.x 内核 64位&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择安装目录（自定）&lt;/li&gt;
&lt;li&gt;处理器配置、&lt;del&gt;内存大小分配&lt;/del&gt;均选择默认（注意：内存大小选择 2G，768MB 完全不够)&lt;/li&gt;
&lt;li&gt;使用网络地址转换（NAT）&lt;/li&gt;
&lt;li&gt;SCSI 控制器:LSI Logic（L）&lt;/li&gt;
&lt;li&gt;虚拟磁盘类型：SCSI（S）&lt;/li&gt;
&lt;li&gt;创建新虚拟磁盘&lt;/li&gt;
&lt;li&gt;最大磁盘大小默认，将虚拟磁盘拆分成多个文件&lt;/li&gt;
&lt;li&gt;磁盘文件名默认&lt;/li&gt;
&lt;li&gt;自定义硬件-&amp;gt;新 CD&amp;#x2F;DVD-&amp;gt;使用 ISO 映像文件-&amp;gt;选择我们下载的 iso 文件-&amp;gt;关闭&lt;/li&gt;
&lt;li&gt;完成&lt;/li&gt;
&lt;li&gt;你可以自行决定 BIOS 或 UEFI 模式启动（我选择 UEFI，但是应该影响不大）&lt;/li&gt;
&lt;li&gt;点击开启此虚拟机&lt;br&gt;:::info&lt;br&gt;Ready for the journey? Let’s go!&lt;br&gt;:::&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;进入安装程序&#34;&gt;&lt;a href=&#34;#进入安装程序&#34; class=&#34;headerlink&#34; title=&#34;进入安装程序&#34;&gt;&lt;/a&gt;进入安装程序&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;默认第一项，等待一会儿，随后进入命令行模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;一号坑：VMware-默认分配内存-768MB-过小，需要-2G&#34;&gt;&lt;a href=&#34;#一号坑：VMware-默认分配内存-768MB-过小，需要-2G&#34; class=&#34;headerlink&#34; title=&#34;一号坑：VMware 默认分配内存 768MB 过小，需要 2G&#34;&gt;&lt;/a&gt;一号坑：VMware 默认分配内存 768MB 过小，需要 2G&lt;/h1&gt;&lt;p&gt;开局遇雷：怎么回事？&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/command.png&#34; alt=&#34;命令行模式开启&#34;&gt;&lt;br&gt;:::info&lt;br&gt;参考了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDk5MDgwL2FydGljbGUvZGV0YWlscy8xMzE3MTE1MDMjOn46dGV4dD0yJUUzJTgwJTgxJUU2JTlCJUI0JUU2JTk2JUIwJUU5JTk1JTlDJUU1JTgzJThGJUU2JUJBJTkwcGFjbWFuLC1TeXkzJUUzJTgwJTgxJUU2JTlCJUI0JUU2JTk2JUIwUk9PVCVFNSVBRiU4NiVFNyVBMCU4MXBhc3N3ZDQlRTMlODAlODE=&#34;&gt;这篇博文&lt;/span&gt;虚拟机默认的是 768MB，不够。在设置中修改为 2G,成功启动。&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;二号坑：网络出现问题&#34;&gt;&lt;a href=&#34;#二号坑：网络出现问题&#34; class=&#34;headerlink&#34; title=&#34;二号坑：网络出现问题&#34;&gt;&lt;/a&gt;二号坑：网络出现问题&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/network_error.png&#34; alt=&#34;Arch网络出问题&#34;&gt;&lt;br&gt;:::info&lt;br&gt;关了虚拟机，重新开机，成功启动&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/success.png&#34; alt=&#34;Arch成功启动&#34;&gt;&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;配置控制台键盘布局和字体&#34;&gt;&lt;a href=&#34;#配置控制台键盘布局和字体&#34; class=&#34;headerlink&#34; title=&#34;配置控制台键盘布局和字体&#34;&gt;&lt;/a&gt;配置控制台键盘布局和字体&lt;/h1&gt;&lt;p&gt;系统启动后，控制台键盘布局默认为 us（美式键盘）。如果您需要列出所有可用的键盘布局，可以使用以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ls /usr/share/kbd/keymaps/**/*.map.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/keymaps.png&#34; alt=&#34;显示所有键盘布局&#34;&gt;&lt;br&gt;此处我使用&lt;code&gt;us&lt;/code&gt;键盘布局，不修改。&lt;/p&gt;
&lt;h1 id=&#34;检查是否连接到互联网&#34;&gt;&lt;a href=&#34;#检查是否连接到互联网&#34; class=&#34;headerlink&#34; title=&#34;检查是否连接到互联网&#34;&gt;&lt;/a&gt;检查是否连接到互联网&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ip link
ping archlinux.org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/network.png&#34; alt=&#34;检查网络连接&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;更新系统时间&#34;&gt;&lt;a href=&#34;#更新系统时间&#34; class=&#34;headerlink&#34; title=&#34;更新系统时间&#34;&gt;&lt;/a&gt;更新系统时间&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;timedatectl #查看系统时间
timedatectl list-timezones #查看所有时区
timedatectl set-timezone &amp;quot;Asia/Shanghai&amp;quot; # 设置为亚洲上海
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/set-timezone.png&#34; alt=&#34;设置时区&#34;&gt;&lt;br&gt;:::info&lt;br&gt;要创建磁盘分区了，为保证出问题后还能倒回来，此处拍摄快照 1&lt;br&gt;:::&lt;/p&gt;
&lt;h1 id=&#34;创建硬盘分区&#34;&gt;&lt;a href=&#34;#创建硬盘分区&#34; class=&#34;headerlink&#34; title=&#34;创建硬盘分区&#34;&gt;&lt;/a&gt;创建硬盘分区&lt;/h1&gt;&lt;h2 id=&#34;指南&#34;&gt;&lt;a href=&#34;#指南&#34; class=&#34;headerlink&#34; title=&#34;指南&#34;&gt;&lt;/a&gt;指南&lt;/h2&gt;&lt;p&gt;系统如果识别到计算机的内置硬盘、U 盘或者移动硬盘等类型磁盘，就会将其分配为一个块设备，如 &amp;#x2F;dev&amp;#x2F;sda、&amp;#x2F;dev&amp;#x2F;nvme0n1 或 &amp;#x2F;dev&amp;#x2F;mmcblk0。可以使用 lsblk 或者 fdisk 查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;fdisk -l(此处为小写字母l)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/block.png&#34; alt=&#34;块设备&#34;&gt;&lt;br&gt;结果中以 rom、loop 或者 airoot 结尾的设备可以被忽略。&lt;br&gt;:::info&lt;br&gt;提示：在分区之前，请您检查 NVMe 驱动器和 Advanced Format 硬盘是否使用了最佳逻辑扇区大小。需要注意的是，更改逻辑扇区大小后，可能会导致在 Windows 系统中出现兼容性问题。&lt;br&gt;对于一个选定的设备，以下分区是必须要有的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个根分区（挂载在 根目录）&amp;#x2F;；&lt;/li&gt;
&lt;li&gt;要在 UEFI 模式中启动，还需要一个 EFI 系统分区。&lt;/li&gt;
&lt;li&gt;如果您需要创建多级存储例如 LVM、磁盘加密 或 RAID，请您在这时候完成。&lt;br&gt;请使用分区工具（fdisk 、parted、cfdisk 等等）修改分区表。例如：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;fdisk /dev/the_disk_to_be_partitioned（要被分区的磁盘）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：&lt;br&gt;如果您想要的磁盘没有显示出来， 确保您的磁盘控制器未处于 RAID 模式。&lt;br&gt;如果要启动的磁盘已经有一个 EFI 系统分区，就不要再新建 EFI 分区了，而是使用现有的 EFI 分区。&lt;br&gt;如果文件系统支持，交换空间 可以通过 交换文件 实现。&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;分区方案：&#34;&gt;&lt;a href=&#34;#分区方案：&#34; class=&#34;headerlink&#34; title=&#34;分区方案：&#34;&gt;&lt;/a&gt;分区方案：&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/partition.png&#34; alt=&#34;分区方案&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分区步骤&#34;&gt;&lt;a href=&#34;#分区步骤&#34; class=&#34;headerlink&#34; title=&#34;分区步骤&#34;&gt;&lt;/a&gt;分区步骤&lt;/h2&gt;&lt;h3 id=&#34;创建-GPT-分区表&#34;&gt;&lt;a href=&#34;#创建-GPT-分区表&#34; class=&#34;headerlink&#34; title=&#34;创建 GPT 分区表&#34;&gt;&lt;/a&gt;创建 GPT 分区表&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;输入&lt;code&gt;fdisk /dev/sda&lt;/code&gt;，对&lt;code&gt;/dev/sda&lt;/code&gt;磁盘进行分区&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;g&lt;/code&gt;，创建一个&lt;code&gt;GUID&lt;/code&gt;分区表&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建第一个分区：EFI-分区&#34;&gt;&lt;a href=&#34;#创建第一个分区：EFI-分区&#34; class=&#34;headerlink&#34; title=&#34;创建第一个分区：EFI 分区&#34;&gt;&lt;/a&gt;创建第一个分区：EFI 分区&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;输入&lt;code&gt;n&lt;/code&gt;，创建第一个分区，输入其编号（默认为 1，即&lt;code&gt;/dev/sda1&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;回车，默认其大小&lt;/li&gt;
&lt;li&gt;对最后一个扇区，输入&lt;code&gt;+512M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;t&lt;/code&gt;来将这个新分区改为”EFI System”&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;L&lt;/code&gt;来查看所有分区名，输入&lt;code&gt;q&lt;/code&gt;退出，可见&lt;code&gt;EFI System&lt;/code&gt;分区别名为 1&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;1&lt;/code&gt;，将分区改为&lt;code&gt;EFI System&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建第二个分区：文件系统分区&#34;&gt;&lt;a href=&#34;#创建第二个分区：文件系统分区&#34; class=&#34;headerlink&#34; title=&#34;创建第二个分区：文件系统分区&#34;&gt;&lt;/a&gt;创建第二个分区：文件系统分区&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;输入&lt;code&gt;n&lt;/code&gt;，创建第二个分区&lt;/li&gt;
&lt;li&gt;两次回车，使用默认分区号和扇区大小&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;-512M&lt;/code&gt;，为交换分区留出 512MB 大小来&lt;/li&gt;
&lt;li&gt;分区默认名为&lt;code&gt;Linux filesystem&lt;/code&gt;，因此不需要改&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建第三个分区：交换分区&#34;&gt;&lt;a href=&#34;#创建第三个分区：交换分区&#34; class=&#34;headerlink&#34; title=&#34;创建第三个分区：交换分区&#34;&gt;&lt;/a&gt;创建第三个分区：交换分区&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;输入&lt;code&gt;n&lt;/code&gt;，创建第三个分区&lt;/li&gt;
&lt;li&gt;连按 3 次回车，接受所有默认设置&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;t&lt;/code&gt;，将新分区改为&lt;code&gt;Linux Swap&lt;/code&gt;,别名为 19&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;查看分区结果&#34;&gt;&lt;a href=&#34;#查看分区结果&#34; class=&#34;headerlink&#34; title=&#34;查看分区结果&#34;&gt;&lt;/a&gt;查看分区结果&lt;/h3&gt;&lt;p&gt;输入&lt;code&gt;p&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;完成修改&#34;&gt;&lt;a href=&#34;#完成修改&#34; class=&#34;headerlink&#34; title=&#34;完成修改&#34;&gt;&lt;/a&gt;完成修改&lt;/h3&gt;&lt;p&gt;输入&lt;code&gt;w&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;格式化分区&#34;&gt;&lt;a href=&#34;#格式化分区&#34; class=&#34;headerlink&#34; title=&#34;格式化分区&#34;&gt;&lt;/a&gt;格式化分区&lt;/h1&gt;&lt;p&gt;对于不同的分区，我们使用不同的文件系统：&lt;/p&gt;
&lt;h2 id=&#34;ESP-分区格式化：mkfs-fat格式化-FAT32-文件系统&#34;&gt;&lt;a href=&#34;#ESP-分区格式化：mkfs-fat格式化-FAT32-文件系统&#34; class=&#34;headerlink&#34; title=&#34;ESP 分区格式化：mkfs.fat格式化 FAT32 文件系统&#34;&gt;&lt;/a&gt;ESP 分区格式化：&lt;code&gt;mkfs.fat&lt;/code&gt;格式化 FAT32 文件系统&lt;/h2&gt;&lt;p&gt;ESP 在&lt;code&gt;/dev/sda1&lt;/code&gt;中，运行&lt;code&gt;mkfs.fat -F32 /dev/sda1&lt;/code&gt;来挂载 FAT32 文件系统&lt;/p&gt;
&lt;h2 id=&#34;根分区-通过mkfs-ext4格式化-ext4-文件系统&#34;&gt;&lt;a href=&#34;#根分区-通过mkfs-ext4格式化-ext4-文件系统&#34; class=&#34;headerlink&#34; title=&#34;根分区:通过mkfs.ext4格式化 ext4 文件系统&#34;&gt;&lt;/a&gt;根分区:通过&lt;code&gt;mkfs.ext4&lt;/code&gt;格式化 ext4 文件系统&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mkfs.ext4 /dev/sad2&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;交换分区格式化：mkswap&#34;&gt;&lt;a href=&#34;#交换分区格式化：mkswap&#34; class=&#34;headerlink&#34; title=&#34;交换分区格式化：mkswap&#34;&gt;&lt;/a&gt;交换分区格式化：&lt;code&gt;mkswap&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mkswap /dev/sda3&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;挂载分区&#34;&gt;&lt;a href=&#34;#挂载分区&#34; class=&#34;headerlink&#34; title=&#34;挂载分区&#34;&gt;&lt;/a&gt;挂载分区&lt;/h1&gt;&lt;h2 id=&#34;挂载根分区&#34;&gt;&lt;a href=&#34;#挂载根分区&#34; class=&#34;headerlink&#34; title=&#34;挂载根分区&#34;&gt;&lt;/a&gt;挂载根分区&lt;/h2&gt;&lt;p&gt;将根磁盘卷挂载到&lt;code&gt;/mnt&lt;/code&gt;，使用命令：&lt;code&gt;mount /dev/sda2 /mnt&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;挂载-EFI-分区&#34;&gt;&lt;a href=&#34;#挂载-EFI-分区&#34; class=&#34;headerlink&#34; title=&#34;挂载 EFI 分区&#34;&gt;&lt;/a&gt;挂载 EFI 分区&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mount --mkdir /dev/sda1 /mnt/boot
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;挂载-swap-分区&#34;&gt;&lt;a href=&#34;#挂载-swap-分区&#34; class=&#34;headerlink&#34; title=&#34;挂载 swap 分区&#34;&gt;&lt;/a&gt;挂载 swap 分区&lt;/h2&gt;&lt;p&gt;&lt;code&gt;swapon /dev/sda3&lt;/code&gt;来启用交换分区&lt;/p&gt;
&lt;p&gt;稍后 genfstab(8) 将自动检测挂载的文件系统和交换空间。&lt;/p&gt;
&lt;h1 id=&#34;开始安装系统&#34;&gt;&lt;a href=&#34;#开始安装系统&#34; class=&#34;headerlink&#34; title=&#34;开始安装系统&#34;&gt;&lt;/a&gt;开始安装系统&lt;/h1&gt;&lt;h2 id=&#34;选择镜像站&#34;&gt;&lt;a href=&#34;#选择镜像站&#34; class=&#34;headerlink&#34; title=&#34;选择镜像站&#34;&gt;&lt;/a&gt;选择镜像站&lt;/h2&gt;&lt;h3 id=&#34;安装reflector包&#34;&gt;&lt;a href=&#34;#安装reflector包&#34; class=&#34;headerlink&#34; title=&#34;安装reflector包&#34;&gt;&lt;/a&gt;安装&lt;code&gt;reflector&lt;/code&gt;包&lt;/h3&gt;&lt;p&gt;通常来说系统默认有，如果没有的话使用如下命令安装：&lt;br&gt;&lt;code&gt;sudo pacman -S reflector&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;更新源&#34;&gt;&lt;a href=&#34;#更新源&#34; class=&#34;headerlink&#34; title=&#34;更新源&#34;&gt;&lt;/a&gt;更新源&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;sudo reflector --country China --save /etc/pacman.d/mirrorlist.pacnew
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保源准确无误后，将&lt;code&gt;mirrorlist.pacnew&lt;/code&gt;复制到&lt;code&gt;mirrorlist&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装必须的软件包&#34;&gt;&lt;a href=&#34;#安装必须的软件包&#34; class=&#34;headerlink&#34; title=&#34;安装必须的软件包&#34;&gt;&lt;/a&gt;安装必须的软件包&lt;/h2&gt;&lt;p&gt;使用 pacstrap(8) 脚本，安装 base 包 软件包和 Linux 内核以及常规硬件的固件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;pacstrap -K /mnt base linux vim man-db man-pages texinfo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候可以同时额外安装计算机的 CPU 微码包。如果计算机是 Intel 的 CPU ，使用&lt;code&gt;intel-ucode&lt;/code&gt;包，AMD CPU 则使用 &lt;code&gt;amd-ucode&lt;/code&gt;包。也可以暂时都不安装，等到进入系统后再安装。&lt;br&gt;:::info&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为我是在虚拟机中安装，因此我不安装固件&lt;code&gt;linux-firmware&lt;/code&gt;和微码包&lt;code&gt;intel-ucode&lt;/code&gt;。如果你有想补充的软件，请加在&lt;code&gt;pacstrap&lt;/code&gt;后面。&lt;/li&gt;
&lt;li&gt;是&lt;code&gt;texinfo&lt;/code&gt;，不是&lt;code&gt;textinfo&lt;/code&gt;，不要看错啦！&lt;br&gt;:::&lt;!-- ~~# 三号坑：出现`error: failed to install packages to new root`~~
解决方案：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pacman -S archlinux-keyring&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pacman-key --refresh-keys&lt;/code&gt;&lt;br&gt;–&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;配置系统&#34;&gt;&lt;a href=&#34;#配置系统&#34; class=&#34;headerlink&#34; title=&#34;配置系统&#34;&gt;&lt;/a&gt;配置系统&lt;/h1&gt;&lt;h2 id=&#34;生成-fstab-文件&#34;&gt;&lt;a href=&#34;#生成-fstab-文件&#34; class=&#34;headerlink&#34; title=&#34;生成 fstab 文件&#34;&gt;&lt;/a&gt;生成 fstab 文件&lt;/h2&gt;&lt;p&gt;通过以下命令生成 fstab 文件 (用 -U 或 -L 选项设置 UUID 或卷标)：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;强烈建议在执行完以上命令后，检查一下生成的&lt;code&gt;/mnt/etc/fstab&lt;/code&gt;文件是否正确。&lt;/p&gt;
&lt;h2 id=&#34;chroot-到新安装的系统&#34;&gt;&lt;a href=&#34;#chroot-到新安装的系统&#34; class=&#34;headerlink&#34; title=&#34;chroot 到新安装的系统&#34;&gt;&lt;/a&gt;chroot 到新安装的系统&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;arch-chroot /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::info&lt;br&gt;提示：此处使用的是 arch-chroot 而不是直接使用 chroot，注意不要输错了。在&lt;code&gt;arch-chroot&lt;/code&gt;进入&lt;code&gt;/mnt&lt;/code&gt;后，提示符应该变为了&lt;code&gt;[root@archiso]&lt;/code&gt;样式，如果没有，请检查一下前面的步骤是否都准确完成了。&lt;br&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;设置时区&#34;&gt;&lt;a href=&#34;#设置时区&#34; class=&#34;headerlink&#34; title=&#34;设置时区&#34;&gt;&lt;/a&gt;设置时区&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;地区名填 Asia,城市名填 Shanghai&lt;br&gt;然后运行 hwclock(8) 以生成 &amp;#x2F;etc&amp;#x2F;adjtime：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;hwclock --systohc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个命令假定已设置硬件时间为 UTC 时间。&lt;/p&gt;
&lt;h2 id=&#34;区域和本地化设置&#34;&gt;&lt;a href=&#34;#区域和本地化设置&#34; class=&#34;headerlink&#34; title=&#34;区域和本地化设置&#34;&gt;&lt;/a&gt;区域和本地化设置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;编辑&lt;code&gt;/etc/locale.gen&lt;/code&gt;。将&lt;code&gt;en_US.UTF-8&lt;/code&gt;或其他你想要的配置，对应那行取消注释。修改后，执行&lt;code&gt;locale-gen&lt;/code&gt;，以生成&lt;code&gt;locale信息&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;/etc/locale.conf&lt;/code&gt;，在其中写入：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;LANG=en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;控制台键盘布局和字体设置&#34;&gt;&lt;a href=&#34;#控制台键盘布局和字体设置&#34; class=&#34;headerlink&#34; title=&#34;控制台键盘布局和字体设置&#34;&gt;&lt;/a&gt;控制台键盘布局和字体设置&lt;/h2&gt;&lt;p&gt;如果需要修改控制台键盘布局和字体，可编辑 &amp;#x2F;etc&amp;#x2F;vconsole.conf 使其长期生效，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;KEYMAP=de-latin1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;网络配置&#34;&gt;&lt;a href=&#34;#网络配置&#34; class=&#34;headerlink&#34; title=&#34;网络配置&#34;&gt;&lt;/a&gt;网络配置&lt;/h2&gt;&lt;p&gt;:::info&lt;br&gt;网络配置很重要,否则安装系统后会连不上网（例如&lt;code&gt;VirtualBox&lt;/code&gt;桥接模式就需要配置 DHCP）&lt;br&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;设置主机名&#34;&gt;&lt;a href=&#34;#设置主机名&#34; class=&#34;headerlink&#34; title=&#34;设置主机名&#34;&gt;&lt;/a&gt;设置主机名&lt;/h3&gt;&lt;p&gt;创建&lt;code&gt;/etc/hostname&lt;/code&gt;文件，在其中直接填写你所设定的主机名，我填写的主机名是&lt;code&gt;arch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;检查连接&#34;&gt;&lt;a href=&#34;#检查连接&#34; class=&#34;headerlink&#34; title=&#34;检查连接&#34;&gt;&lt;/a&gt;检查连接&lt;/h3&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;h3 id=&#34;安装网络管理器&#34;&gt;&lt;a href=&#34;#安装网络管理器&#34; class=&#34;headerlink&#34; title=&#34;安装网络管理器&#34;&gt;&lt;/a&gt;安装网络管理器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pacman -S networkmanager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl enable NetworkManager.service&lt;/code&gt;设置网络管理器开机自启动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;关于-initramfs&#34;&gt;&lt;a href=&#34;#关于-initramfs&#34; class=&#34;headerlink&#34; title=&#34;关于 initramfs&#34;&gt;&lt;/a&gt;关于 initramfs&lt;/h2&gt;&lt;p&gt;通常不需要自己创建新的 initramfs，因为在执行 pacstrap 时已经安装 linux 包，这时已经运行过 mkinitcpio 了。&lt;/p&gt;
&lt;h2 id=&#34;设置-root-密码&#34;&gt;&lt;a href=&#34;#设置-root-密码&#34; class=&#34;headerlink&#34; title=&#34;设置 root 密码&#34;&gt;&lt;/a&gt;设置 root 密码&lt;/h2&gt;&lt;p&gt;输入&lt;code&gt;passwd&lt;/code&gt;创建一个&lt;code&gt;root&lt;/code&gt;密码&lt;/p&gt;
&lt;h2 id=&#34;安装引导程序&#34;&gt;&lt;a href=&#34;#安装引导程序&#34; class=&#34;headerlink&#34; title=&#34;安装引导程序&#34;&gt;&lt;/a&gt;安装引导程序&lt;/h2&gt;&lt;p&gt;需要安装 Linux 引导加载程序，才能在安装后启动系统，可以使用的的引导程序已在启动加载器中列出，请选择一个安装并配置它，GRUB 是最常见的选择。&lt;br&gt;如果有 Intel 或 AMD 的 CPU，请另外启用微码更新。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装&lt;code&gt;grub&lt;/code&gt;和&lt;code&gt;efibootmgr&lt;/code&gt;：输入&lt;code&gt;pacman -S grub efibootmgr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;grub-install --target=x86_64-efi --efi-directory=[esp] --bootloader-id=GRUB&lt;/code&gt;&lt;br&gt;:::info&lt;br&gt;我的&lt;code&gt;esp&lt;/code&gt;挂载点是&lt;code&gt;/mnt/boot&lt;/code&gt;，因为我已经&lt;code&gt;arch-chroot&lt;/code&gt;到&lt;code&gt;/mnt&lt;/code&gt;中了，因此&lt;code&gt;esp&lt;/code&gt;字段填写&lt;code&gt;/boot&lt;/code&gt;即可。如果你安装在了其他挂载点上，请在&lt;code&gt;esp&lt;/code&gt;字段填写你自己的挂载点。如果出现问题，检查：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;是否已经&lt;code&gt;arch-chroot&lt;/code&gt;到了&lt;code&gt;/mnt&lt;/code&gt;下？命令提示符为&lt;code&gt;[root@archiso]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前面的配置过程有没有出现问题？&lt;br&gt;:::&lt;br&gt;&lt;code&gt;grub-install&lt;/code&gt;命令成功时应该出现:&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/grub-install.png&#34; alt=&#34;grub-install成功&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;生成主配置文件:&lt;code&gt;grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;&lt;br&gt;配置成功时界面：&lt;br&gt;&lt;img data-src=&#34;/blog/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Arch/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/configure.png&#34; alt=&#34;配置成功&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;重新启动计算机&#34;&gt;&lt;a href=&#34;#重新启动计算机&#34; class=&#34;headerlink&#34; title=&#34;重新启动计算机&#34;&gt;&lt;/a&gt;重新启动计算机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt;退出&lt;code&gt;chroot&lt;/code&gt;环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umount -R /mnt&lt;/code&gt;取消挂载&lt;code&gt;/mnt&lt;/code&gt;（也等到可&lt;code&gt;reboot&lt;/code&gt;时 systemd 自动卸载）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reboot&lt;/code&gt;重启系统&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;安装后的工作&#34;&gt;&lt;a href=&#34;#安装后的工作&#34; class=&#34;headerlink&#34; title=&#34;安装后的工作&#34;&gt;&lt;/a&gt;安装后的工作&lt;/h1&gt;&lt;p&gt;参见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCQiVCQSVFOCVBRSVBRSVFOSU5OCU4NSVFOCVBRiVCQg==&#34;&gt;建议阅读列表&lt;/span&gt;及&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLmFyY2hsaW51eGNuLm9yZy93aWtpLyVFNSVCQSU5NCVFNyU5NCVBOCVFNyVBOCU4QiVFNSVCQSU4RiVFNSU4OCU5NyVFOCVBMSVBOA==&#34;&gt;应用程序列表&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
