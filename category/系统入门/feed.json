{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"系统入门\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "url": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "title": "15213 Lab 1-data lab 实验总结",
            "date_published": "2024-02-05T07:50:22.000Z",
            "content_html": "<p>部分的题目我参考了一下网上的内容（出处已注明），其他的均为自己实现（有的题目的实现过程可能会有些繁琐），部分 dlc 检测出来可能会报些 error，但是 btest 均能过。</p>\n<blockquote>\n<p>没有 TA 可太难了！自己实现了一天多，终于苟完了。不算完美，但也能看吧。</p>\n</blockquote>\n<h2 id=\"bitxor\"><a class=\"markdownIt-Anchor\" href=\"#bitxor\">#</a> bitXor</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * bitXor - x^y using only ~ and &amp;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: bitXor(4, 5) = 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ~ &amp;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 14</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bitXor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * x + y = ~( ~x &amp; ~y)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bitXor 要求我们使用位操作来实现 <code>^</code>  运算符。根据运算定律我们知道:  <code>a ^ b = (a &amp; (~b)) | (b &amp; (~a))</code> 。但是问题来了，我们这里不允许使用 <code>|</code> ，只能用 <code>~</code>  和 <code>&amp;</code> 。那么我们就必须使用这两个操作符来实现 <code>|</code>  运算。<br>\n通过德摩根定律我们知道： <code>a | b = ~((~a) &amp; (~b))</code> 。这不就解决问题了嘛，所以将这两个式子综合一下，最后的结果是 <code>~((~(x &amp; ~y)) &amp; (~(y &amp; ~x)))</code></p>\n<h2 id=\"tmin\"><a class=\"markdownIt-Anchor\" href=\"#tmin\">#</a> tmin</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * tmin - return minimum two's complement integer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Max ops: 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">tmin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * the most significant bit = 1, others = 0, so (1 &lt;&lt; 31)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这题要求我们返回最小的补码整数，返回类型为 <code>int</code> 。首先，在二进制补码表示中，最高位的权值为 - 1，其他位的权值为 1。因此，最小的补码整数 tmin 的最高位为 1，其他位为 0。而题目中 <code>int</code>  类型为 32 位，因此只要返回 <code>(1 &lt;&lt; 31)</code>  即可。</p>\n<h2 id=\"istmax\"><a class=\"markdownIt-Anchor\" href=\"#istmax\">#</a> isTmax</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isTmax - returns 1 if x is the maximum, two's complement number,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *     and 0 otherwise</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | +</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 10</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isTmax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * Tmax ^ Tmin = 0xffffffff, ~0xffffffff = 0x0, !0x0 = 0x1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// return !(~(x ^ (1 &lt;&lt; 31)));</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * ~Tmax = Tmin -> ~Tmin + 1 = Tmin 且 Tmin != 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>tmax 是二进制补码中最大的数，通过分析这个数的特点，我们可以完成这道题目。</p>\n<ol>\n<li>该数除了最高位是 0 外，其他位均是 1。因此该数和 (1&lt;&lt;31)（也就是 tmin）的亦或（或者和）为 <code>0xffffffff</code> 。 <code>0xffffffff</code>  按位取反得到 <code>0x0</code> ，而 <code>0x0</code>  按位取反得到 <code>0x1</code> 。但是其他的数并没有这个特性。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>该数取反后得到 tmin，tmin 的一个特点是 tmin 和 -tmin 的表示相同。因此两者亦或得到 0。还有一个树也有这样的特性，也就是 0。因此我们需要排除 0 的可能性。我们使用 <code>&amp;</code>  操作符来实现两种特性的叠加。我本没有想到该方法，是从这篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQxMjY3OTU=\">知乎帖子</span>学习到的。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是题目不允许在该题中使用移位运算符，因此只能使用方法二。</p>\n<h2 id=\"alloddbits\"><a class=\"markdownIt-Anchor\" href=\"#alloddbits\">#</a> allOddBits</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * allOddBits - return 1 if all odd-numbered bits in word set to 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   where bits are numbered from 0 (least significant) to 31 (most significant)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Max ops: 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Rating: 2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">allOddBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * tear the number into 4 parts, get rid of the other digits except 0xaa</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * if the results are all the same, then compare it with 0xaa, if there are the same, xor returns 0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * otherwise not all odd bits in word set is set to 1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> third <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">int</span> fourth <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">&amp;</span> second <span class=\"token operator\">&amp;</span> third <span class=\"token operator\">&amp;</span> fourth<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于单个字节的奇数位，我们可以使用 <code>0xaa</code>  作为 mask。<br>\n本题目中我将位打成 4 个部分，每个部分与 mask 相与。如果每个奇数位都是 1 的话，四个部分的比较结果应该相同，都等于 <code>0xaa</code> ，该值与 <code>0xaa</code>  异或得到 <code>0x0</code> ，取 <code>!</code>  后得到 <code>0x1</code> 。否则该值不为 <code>0xaa</code> ，同 <code>0xaa</code>  亦或得到其他非零值，取 <code>!</code>  后得到 <code>0x0</code> 。</p>\n<h2 id=\"negate\"><a class=\"markdownIt-Anchor\" href=\"#negate\">#</a> negate</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * negate - return -x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: negate(1) = -1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该题目中我们需要求解某个数的相反数。在课堂中我们学过，一个数和它相反数的和为 0。那么如何获得其相反数呢？以 <code>x</code>  为例，我们知道 <code>x + ~x = ~0</code> ，也就是全 f，然后 <code>~0 + 1 = 0</code> 。因此， <code>-x</code>  的补码表示即为 <code>~x + 1</code> 。</p>\n<h2 id=\"isasciidigit\"><a class=\"markdownIt-Anchor\" href=\"#isasciidigit\">#</a> isAsciiDigit</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: isAsciiDigit(0x35) = 1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *            isAsciiDigit(0x3a) = 0.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *            isAsciiDigit(0x05) = 0.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Max ops: 15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isAsciiDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * least = (x &amp; 0xf) - 0xa</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * if least > 0 (with 0 in most significant bit) then least = 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    * else least = 1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">int</span> least <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0xa</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> least <span class=\"token operator\">&amp;</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我使用的方法是将该数拆分为最低位和其他位来比较。我们将最低位与 <code>0xa</code>  相减，如果求得的结果为负数，符号位即为 1，代表该值在 0-9 之间。接下来判断其他位是否为 <code>0x3</code> ，如果是，则和 <code>0x3</code>  异或结果为 0，通过逻辑 <code>!</code>  返回 1。</p>\n<h2 id=\"conditional\"><a class=\"markdownIt-Anchor\" href=\"#conditional\">#</a> conditional</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * conditional - same as x ? y : z</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: conditional(2,4,5) = 4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 16</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">conditional</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * judge if x != 0, if true, !!x = 1, return y, otherwise !!x = 0, return z</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// cond gets all f when !!x == 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> cond <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cond <span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>cond <span class=\"token operator\">&amp;</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们先获取 <code>x</code>  的值，如果 <code>x != 0</code> ，则 <code>!!x = 0x1</code> ，否则为 <code>0x0</code> 。扩展该值，当该值为 <code>0x1</code>  时与 <code>y</code>  相与得到 y。当该值为 <code>0x0</code> ，取反后与 z 相与得到 z。因为这两个值只取其一，当一边不为 0 时另一边必然为 0，因此两边用 <code>|</code>  连接。</p>\n<h2 id=\"islessorequal\"><a class=\"markdownIt-Anchor\" href=\"#islessorequal\">#</a> isLessOrEqual</h2>\n<blockquote>\n<p>本题要求使用最多 24 个运算符，但是这里我使用的过多了，应该会有更好的办法。期待有人指正。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isLessOrEqual - if x &lt;= y  then return 1, else return 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: isLessOrEqual(4,5) = 1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 24</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isLessOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// first compare their sign bit</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// return true if sign = 1(>0)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_diff <span class=\"token operator\">=</span> sign_x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>sign_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sign_diff <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// then compare the magnitude</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_x <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_y <span class=\"token operator\">=</span> y <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_diff <span class=\"token operator\">=</span> mag_x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>mag_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_sign <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>mag_x <span class=\"token operator\">^</span> mag_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mag_diff <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 2 conditions return true:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * 1. sign of x = 1 and sign of y = 0</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * 2. sign of x and y equals, and magnitude of x &lt;= y</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sign_bit<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> sign_diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sign_diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> mag_sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要分几种情况：</p>\n<ol>\n<li>x 为负数，y 为正数，直接返回 <code>0x1</code></li>\n<li>x 和 y 同符号，比较数值部分。x &lt;= y 时，返回 <code>0x1</code> ；x &gt; y 时，返回 <code>0x0</code></li>\n<li>x 为正数，y 为负数，返回 <code>0x0</code></li>\n</ol>\n<p>其中 <code>sign_diff</code>  为两数符号位之差，此处分三种情况：</p>\n<ol>\n<li>x 为负数，符号位为 1；y 为正数，符号位为 0。那么两者符号位相减等于 <code>0x1</code> ，该值的符号位为 0。（这是我们要返回 <code>0x1</code>  的结果）</li>\n<li>x 为正数，符号位为 0；y 为负数，符号位为 1。那么两者符号位相减等于 <code>0xffffffff</code>  (-1)，该值的符号位为 1。（我们不要这个结果）</li>\n<li>x 和 y 的符号位相同，两者相减为 <code>0x0</code> ，该值的符号位为 0。（这里我们要看情况，看 <code>x</code>  是否和 <code>y</code>  相等）</li>\n</ol>\n<p>代码中 <code>sign_diff</code>  为两符号位之差， <code>sign_bit</code>  为该做差结果的最高位。当 x 和 y 的符号位不相同时，当 <code>sign_diff</code>  为 <code>0x1</code>  且 <code>sign_bit</code>  为 <code>0x0</code>  是，我们返回 <code>0x1</code> 。这也是运算结果 <code>|</code>  左半边的由来。</p>\n<p>代码中 <code>mag_diff</code>  为两者数值部分之差， <code>mag_sign</code>  为该差值的符号位。当 <code>x &lt; y</code>  时， <code>mag_diff</code>  为 <code>0xffffffff</code> 。当 <code>x == y</code>  时， <code>!(mag_x ^ mag_y)</code>  为 <code>0x1</code> 。因此 <code>mag_sign = !(mag_x ^ mag_y) | ((mag_diff &gt;&gt; 31) &amp; 0x1)</code> 。在判断数值之差部分时，我们需要保证两数符号位之差为 <code>0x0</code> ，而不是其他（如 x 正 y 负）。因此运算结果右半边的值为 <code>(!sign_diff) &amp; mag_sign</code> 。</p>\n<p>综上，最后的结果是 <code>((!sign_bit) &amp; sign_diff) | ((!sign_diff) &amp; mag_sign)</code> 。</p>\n<h2 id=\"logicalneg\"><a class=\"markdownIt-Anchor\" href=\"#logicalneg\">#</a> logicalNeg</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * logicalNeg - implement the ! operator, using all of</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *              the legal operators except !</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Legal ops: ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Max ops: 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">logicalNeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * if x == 0, x ^ 0x0 = 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"howmanybits\"><a class=\"markdownIt-Anchor\" href=\"#howmanybits\">#</a> howManyBits</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* howManyBits - return the minimum number of bits required to represent x in</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *             two's complement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *  Examples: howManyBits(12) = 5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *            howManyBits(298) = 10</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *            howManyBits(-5) = 4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *            howManyBits(0)  = 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *            howManyBits(-1) = 1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *            howManyBits(0x80000000) = 32</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  Max ops: 90</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *  Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">howManyBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * divide and conquer</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    * for positive number, the number of bits = the last position of 1 + 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    * for negative number, the number of bits = the last position of 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    * inverse negative number and deal with it as the same as positive number</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    * 1. judge the sign bit of x, if x is negative, inverse it</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    * 2. judge the high 16 bits, if true(high 16 bits != 0x0), result + 16</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    * 3. judge the high 8 bits, if true, result + 8</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    * 4. judge the high 4 bits, if true, result + 4</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * 5. judge the high 2 bits, if true, result + 2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 6. judge the high 1 bits, if true, result + 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * 7. judge the last 1 bit, if true, result + !!x</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * 8. the final sum must + 1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    * 9. return the result</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token comment\">// neg x if it's negative</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>sign <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token keyword\">int</span> b16<span class=\"token punctuation\">,</span> b8<span class=\"token punctuation\">,</span> b4<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">,</span> b0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token comment\">// int mask_16 = (1 &lt;&lt; 15) >> 15;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   b16 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token comment\">// int mask_8 = 0xff;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   b8 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\">// int mask_4 = 0xf;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   b4 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">// int mask_2 = 0x3;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   b2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   <span class=\"token comment\">// int mask_1 = 0x1;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   b1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token comment\">//! judge if the last bit == 1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   b0 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token keyword\">return</span> b16 <span class=\"token operator\">+</span> b8 <span class=\"token operator\">+</span> b4 <span class=\"token operator\">+</span> b2 <span class=\"token operator\">+</span> b1 <span class=\"token operator\">+</span> b0 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"floatscale2\"><a class=\"markdownIt-Anchor\" href=\"#floatscale2\">#</a> floatScale2</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// float</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * floatScale2 - Return bit-level equivalent of expression 2*f for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   floating point argument f.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Both the argument and result are passed as unsigned int's, but</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   they are to be interpreted as the bit-level representation of</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   single-precision floating point values.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   When argument is NaN, return argument</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">floatScale2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> uf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// first get the sign, exp and mag bit of the number</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// denormalized number</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// E = 1 - bias</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// frac = f</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">//! how to multiply a denormalized number? frac * 2!</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      f <span class=\"token operator\">=</span> f <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// special number</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// if frac = 0, then value = inf</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token comment\">// frac = 1 / 0;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token comment\">// if frac != 0, value = NaN</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">// normalized number</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token comment\">// E = e - bias</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// value = 1 + f</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      e <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"floatfloat2int\"><a class=\"markdownIt-Anchor\" href=\"#floatfloat2int\">#</a> floatFloat2Int</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * floatFloat2Int - Return bit-level equivalent of expression (int) f</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   for floating point argument f.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Argument is passed as unsigned int, but</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   it is to be interpreted as the bit-level representation of a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   single-precision floating point value.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Anything out of range (including NaN and infinity) should return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   0x80000000u.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">floatFloat2Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> uf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// first get the sign, exp and mag bit of the number</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// then get the exact sign, E and value of the number</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      s <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">int</span> E <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">float</span> frac <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">int</span> bias <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// denormalized number</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// E = 1 - bias</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      E <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// frac = f</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      frac <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">//! COMPARE WITH 0XFF INSTEAD OF ~0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// special number</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">// if frac = 0, then value = inf</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token comment\">// frac = 1 / 0;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         <span class=\"token comment\">// if frac != 0, value = NaN</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token comment\">// normalized number</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token comment\">// E = e - bias</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      E <span class=\"token operator\">=</span> e <span class=\"token operator\">-</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token comment\">// value = 1 + f</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      frac <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>E <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>E <span class=\"token operator\">></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token comment\">//! REMEMBER THE SITUATION THAT E > 31</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token keyword\">return</span> s <span class=\"token operator\">*</span> frac <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"floatpower2\"><a class=\"markdownIt-Anchor\" href=\"#floatpower2\">#</a> floatPower2</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   (2.0 raised to the power x) for any 32-bit integer x.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   The unsigned value that is returned should have the identical bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   representation as the single-precision floating-point number 2.0^x.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   If the result is too small to be represented as a denorm, return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   0. If too large, return +INF.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">floatPower2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">//! REMEMEBER THAT FLOATING POINT ITSELF IS IN THE FORMAT (-1)^S * M * 2.0^E</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// fit x into E</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//! MIND THE SITUATION THAT X IS TOO LARGE OR TOO SMALL</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      x <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "lab"
            ]
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_Project/",
            "url": "https://salvely.github.io/blog/2024/01/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_Project/",
            "title": "Final Project: 多线程HTTP服务器 实现记录",
            "date_published": "2024-01-08T02:32:56.000Z",
            "content_html": "<blockquote>\n<p>进入课程网页的时候意外发现这个 Project 的代码已经被填完了。所以没什么好做的。</p>\n</blockquote>\n<h1 id=\"overview\"><a class=\"markdownIt-Anchor\" href=\"#overview\">#</a> Overview</h1>\n<p>多线程网络服务器大致功能：简单的搜索和文件浏览</p>\n<ul>\n<li>Part A: 实现服务器读取文件，统计文件中的单词个数</li>\n<li>Part B: 实现网络连接和 HTTP 请求响应</li>\n<li>Part C: 将 A 和 B 两部分结合起来</li>\n</ul>\n<h2 id=\"part-a\"><a class=\"markdownIt-Anchor\" href=\"#part-a\">#</a> Part A</h2>\n<h3 id=\"filereadercc\"><a class=\"markdownIt-Anchor\" href=\"#filereadercc\">#</a>  <code>FileReader.cc</code></h3>\n<ul>\n<li>简单的文件阅读器</li>\n<li>在构建时读入文件名， <code>read_file</code>  将整个文件读入一个 <code>string</code></li>\n<li>可以使用 <code>POSIX</code> , C 接口或者 C++ 文件流实现</li>\n</ul>\n<h3 id=\"wordindexh-wordindexcc\"><a class=\"markdownIt-Anchor\" href=\"#wordindexh-wordindexcc\">#</a>  <code>WordIndex.h &amp; WordIndex.cc</code></h3>\n<p>实现一个数据结构，用于存储各个文件中的单词及其出现次数</p>\n<h3 id=\"crawlfiletreecc\"><a class=\"markdownIt-Anchor\" href=\"#crawlfiletreecc\">#</a>  <code>CrawlFileTree.cc</code></h3>\n<p>实现 <code>HandleFile</code>  函数，其获取一个文件名和一个 <code>WordIndex</code> ，这个函数读取对应文件，并且将每个单词及其对应的个数存储在 <code>WordIndex</code>  中</p>\n<h2 id=\"part-b\"><a class=\"markdownIt-Anchor\" href=\"#part-b\">#</a> Part B</h2>\n<h3 id=\"serversocketcc\"><a class=\"markdownIt-Anchor\" href=\"#serversocketcc\">#</a>  <code>ServerSocket.cc</code></h3>\n<p>实现一个类，这个类包含：</p>\n<ul>\n<li>创建一个服务器端的监听 socket</li>\n<li>从客户端接受新的连接请求</li>\n<li><code>ServerSocket.h</code>  中提供了头文件，需要在 <code>ServerSocket.cc</code>  中实现</li>\n</ul>\n<h3 id=\"httpconnectioncc\"><a class=\"markdownIt-Anchor\" href=\"#httpconnectioncc\">#</a>  <code>HttpConnection.cc</code></h3>\n<ul>\n<li><code>HttpConnection</code>  处理 <code>HTTP</code>  连接请求，将该请求转化为一个对象，并且负责将响应写回去</li>\n<li>该函数中主要实现 <code>HTTP</code>  请求的读取和解析 (string 操作)</li>\n</ul>\n<h3 id=\"httputilscc\"><a class=\"markdownIt-Anchor\" href=\"#httputilscc\">#</a>  <code>HttpUtils.cc</code></h3>\n<p>主要负责一些其他功能，尤其是安全方面：</p>\n<ul>\n<li><code>escape_html</code>\n<ul>\n<li>用于防止 <code>cross-site scripting</code> ，参考<span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3NjcmlwdGluZw==\"> Cross-site scripting</span></li>\n</ul>\n</li>\n<li><code>in_path_safe</code>\n<ul>\n<li>保证使用该服务器的人只能获取到对应目录下的文件，其他目录下对他不开放权限</li>\n<li>否则可能会有攻击者使用 <code>directory traverse attack</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"part-c\"><a class=\"markdownIt-Anchor\" href=\"#part-c\">#</a> Part C</h2>\n<ul>\n<li><code>HttpServer_ThrFn</code>  函数实现\n<ul>\n<li>每个线程可以获取到一个连接</li>\n</ul>\n</li>\n<li>两个 <code>helper_function</code>\n<ul>\n<li>分别处理两种类型的请求\n<ul>\n<li>对查看文件的请求 ( <code>ProcessFileRequest</code> )</li>\n<li>执行查询的请求 ( <code>ProcessQueryRequest</code> )</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用 <code>htttp</code>  测试 <code>Http Server</code> 。输入命令 <code>./httpd 3000 ./test_tree/</code> ，在显示 <code>accepting connections...</code>  后，点击下方的 <code>Open Server on port 3000</code></li>\n</ul>\n<h2 id=\"实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#实现步骤\">#</a> 实现步骤</h2>\n<ol>\n<li><code>FileReader::read_file</code></li>\n<li><code>WordIndex.cc &amp; WordIndex.h</code></li>\n<li><code>CrawlFileTree.cc handle_file函数</code></li>\n<li><code>ServerSocket.cc</code></li>\n<li><code>get_request &amp; parse_request from HttpConnection.cc</code></li>\n<li><code>write_response in HttpConnection.cc</code></li>\n<li><code>HttpUtils.cc</code>  两个函数实现</li>\n<li>test_suite 通过</li>\n<li>valgrind 通过</li>\n<li><code>HttpServer.cc</code>  实现并测试</li>\n</ol>\n<h2 id=\"实现提示\"><a class=\"markdownIt-Anchor\" href=\"#实现提示\">#</a> 实现提示</h2>\n<ul>\n<li><code>boost</code>  库中的 <code>split()/trim()/replace_all()</code>  函数可以使用，使用 <code>split()</code>  时可以使用 <code>is_any_of()/isalpha()/</code></li>\n<li>实现 <code>ServerSocket.cc</code>  时，留意 <code>server_accept_rw_close</code></li>\n<li>有个小函数可以让 <code>is_path_safe</code>  的实现更简单 (留意 <code>HttpUtils.cc</code>  中的注释，自己上网学习它的用法)</li>\n<li><code>FileReader</code>  需要处理只含有 0 个字节的 <code>binary_files</code> ，这里可以使用传入 2 个参数的 <code>string</code>  构造函数</li>\n</ul>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./test_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>valgrind ./test_suite</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW4/",
            "url": "https://salvely.github.io/blog/2024/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW4/",
            "title": "HW4: Shell & Pipe 实现记录",
            "date_published": "2024-01-06T06:49:15.000Z",
            "content_html": "<h1 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\">#</a> 要求</h1>\n<p>实现一个只含有基本命令和 Pipe (不含重定向符及其他符号) 的 Shell。</p>\n<h1 id=\"指南\"><a class=\"markdownIt-Anchor\" href=\"#指南\">#</a> 指南</h1>\n<h2 id=\"相关文件\"><a class=\"markdownIt-Anchor\" href=\"#相关文件\">#</a> 相关文件</h2>\n<ul>\n<li><code>pipe_shell.cc</code> : 在其中实现 shell 程序</li>\n<li><code>sh.cc</code> : 传入一个附带参数的程序， <code>fork()</code>  子程序然后 <code>execvp()</code>  去执行它</li>\n<li><code>stdin_echo.cc</code> : 从 <code>stdin</code>  中读取，输出读取的内容，直到获取 <code>EOF</code> ，然后停止</li>\n<li><code>example_tests/</code> : 其中含有示例输入和对应输出</li>\n<li><code>solution_binaries/</code> : 官方答案执行码</li>\n</ul>\n<h2 id=\"具体要求\"><a class=\"markdownIt-Anchor\" href=\"#具体要求\">#</a> 具体要求</h2>\n<ul>\n<li>程序一次从标准输入读取一行命令</li>\n<li>一行命令包括命令本身和连接他们的 Pipe</li>\n<li>不停读入直到读入 <code>EOF</code>  / 用户输入 <code>exit</code></li>\n<li>在当前命令完成之后才能运行下一条命令</li>\n<li>命令可以是绝对路径或者是程序名（用 <code>execvp</code>  执行）</li>\n</ul>\n<h2 id=\"建议方法\"><a class=\"markdownIt-Anchor\" href=\"#建议方法\">#</a> 建议方法</h2>\n<ul>\n<li>通读该指南和提供的源代码，搞清楚作业是在做什么</li>\n<li>执行一下 <code>./solution_binaries/pipe_shell</code> ，看看结果长什么样</li>\n<li>开始实现 <code>pipe_shell.cc</code> ，从循环提示用户输入开始，并且打印 <code>$</code>  提示符，直到无输入或者遇到 <code>EOF</code>  / 输入 <code>exit</code></li>\n<li>实现 <code>fork()</code> ， <code>pipe</code>  连接和命令的执行 ( <code>execvp</code>  或者直接运行命令路径)</li>\n</ul>\n<h2 id=\"实现提示\"><a class=\"markdownIt-Anchor\" href=\"#实现提示\">#</a> 实现提示</h2>\n<ul>\n<li>可以使用 <code>boost</code>  库中的 <code>split()</code>  和 <code>trim()</code>  方法，</li>\n<li>使用 <code>execvp(), fork(), pipe(), waitpid()</code>  等函数</li>\n<li>注意不同情形：无管道，一个管道，多于一个管道</li>\n<li>两种方法\n<ul>\n<li>使用一个 pipe 数组</li>\n<li>每次 <code>fork()</code>  之前创建一个 <code>pipe</code></li>\n</ul>\n</li>\n<li>每个子进程只需要两个端口，从上一个进程送来的读端口，和给下一个子进程的写端口</li>\n<li>子进程用完端口之后关闭端口，否则程序无法正常退出</li>\n</ul>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h2>\n<ul>\n<li>普通测试:  <code>make &amp;&amp; ./pipe_shell</code></li>\n<li>内存泄漏测试:  <code>valgrind --leak-check=full ./pipe_shell</code></li>\n<li>比较自己的程序和 <code>solution_binaries/pipe_shell</code>  的结果：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ./tests/simple_input.txt <span class=\"token operator\">|</span> ./pipe_shell <span class=\"token operator\">&amp;></span> my_output.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">diff</span> my_output.txt ./tests/simple_output.txt</pre></td></tr></table></figure><h2 id=\"pipe_shellcc\"><a class=\"markdownIt-Anchor\" href=\"#pipe_shellcc\">#</a>  <code>pipe_shell.cc</code></h2>\n<blockquote>\n<p>实现核心： <code>pipe</code>  的内存在操作系统内核中。在每次循环前创建一个 <code>pipe</code> ，然后 <code>fork()</code>  一个子进程读取上一个 <code>pipe</code>  的内容，写入当前这个 <code>pipe</code> 。使用完毕后关闭这个 <code>pipe</code>  的写端，保留这个 <code>pipe</code>  的读端口。进而让下一次 <code>dup2</code>  导入时使用，使用完后可关闭该 <code>pipe</code>  的读端口。 <code>pipe</code>  不会像本地变量那样随着循环的进行而消失，只要保存一下读 / 写端口，在下一轮循环中就可以正常的进行读写。<br>\n此外，我们使用 <code>dup2</code>  来进行端口的重定向。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span>    <span class=\"token comment\">// for fork()</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span> <span class=\"token comment\">// for pid_t</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span>  <span class=\"token comment\">// for wait(), waitpid(), etc.</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span> <span class=\"token comment\">// for exit(), EXIT_SUCCESS, and EXIT_FAILURE</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/algorithm/string.hpp></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUF_SIZ</span> <span class=\"token expression\"><span class=\"token number\">1000</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"$ \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> in_fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// input fd</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// split the command into multiple parts</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        boost<span class=\"token double-colon punctuation\">::</span>algorithm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">is_any_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>token_compress_on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> command_num <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>command <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// initialize a pipe</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pipe creation failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// prepare to run the current command</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// get the current command</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>algorithm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// split the command into an array of args</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            boost<span class=\"token double-colon punctuation\">::</span>algorithm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">is_any_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boost<span class=\"token double-colon punctuation\">::</span>token_compress_on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">int</span> argc <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"We need a command!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// run the current command</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            pid_t child <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token comment\">// setup the file name and input arguments</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>argc <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    string args_str <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args_str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                argv<span class=\"token punctuation\">[</span>argc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>in_fd <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token comment\">// write the pipe value into stdin</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>in_fd<span class=\"token punctuation\">,</span> STDIN_FILENO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>in_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> command_num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token comment\">// write stdout to the pipe</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> STDOUT_FILENO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token comment\">// use execvp() to run the commmand</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token function\">execvp</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// exec didn't work, so an error must have been occurred</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> argv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">// wait for the child process to complete</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// close the current pipe write fd</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            in_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">// // read out the pipe</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// char buffer[BUF_SIZ];</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">// int count = read(in_fd, buffer, BUF_SIZ);</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// buffer[count] = '\\0';</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">// if (count > 0)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">//     fprintf(stdout, \"%s\", buffer);</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>in_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"$ \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW3/",
            "url": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/CIT5950_HW3/",
            "title": "HW3: LRU SimpleVM 实现记录",
            "date_published": "2024-01-04T05:27:01.000Z",
            "content_html": "<h1 id=\"overview\"><a class=\"markdownIt-Anchor\" href=\"#overview\">#</a> Overview</h1>\n<p>本作业要求实现:</p>\n<ul>\n<li>Page 对象：\n<ul>\n<li>若 Page 不在 memory 中，那么它的数据被存储在磁盘上的 <code>swap file</code>  部分。在 <code>swap file</code>  中，每一页都有对应的顺序存储的数据。</li>\n<li>可以使用 C++  <code>fstream</code>  类进行 I/O 读写。尤其是 <code>read()</code>  和 <code>write()</code>  方法。</li>\n</ul>\n</li>\n<li>PageTable 对象\n<ul>\n<li>包含多个 page 以及 <code>swap file</code></li>\n<li>这里主要要求实现 LRU 算法</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"相关文件\"><a class=\"markdownIt-Anchor\" href=\"#相关文件\">#</a> 相关文件</h1>\n<h2 id=\"page\"><a class=\"markdownIt-Anchor\" href=\"#page\">#</a> Page</h2>\n<ul>\n<li><code>Page.h</code></li>\n<li><code>Page.cc</code></li>\n<li><code>PageTemplates.cc</code></li>\n</ul>\n<h2 id=\"pagetable\"><a class=\"markdownIt-Anchor\" href=\"#pagetable\">#</a> PageTable</h2>\n<ul>\n<li><code>PageTable.h</code></li>\n<li><code>PageTable.cc</code></li>\n</ul>\n<h2 id=\"testing\"><a class=\"markdownIt-Anchor\" href=\"#testing\">#</a> Testing</h2>\n<ul>\n<li><code>test_page.cc</code></li>\n<li><code>test_pagetable.cc</code></li>\n</ul>\n<h1 id=\"实现提示\"><a class=\"markdownIt-Anchor\" href=\"#实现提示\">#</a> 实现提示</h1>\n<ul>\n<li>map, unordered_map, list, vector 结构都很有用</li>\n<li><code>fstream</code>  中的 <code>read()</code>  和 <code>write()</code>  很有用</li>\n<li>需要将 <code>uint8_t</code>  切换到 <code>char</code>  类型来使用 <code>fstream</code></li>\n<li>利用初始化列表来初始化引用类型</li>\n</ul>\n<h1 id=\"page实现\"><a class=\"markdownIt-Anchor\" href=\"#page实现\">#</a> Page 实现</h1>\n<h2 id=\"page-源码分析\"><a class=\"markdownIt-Anchor\" href=\"#page-源码分析\">#</a> Page 源码分析</h2>\n<p><code>simplevm namespace</code>  中存在一个类 <code>Page</code> ，此外还有一个 <code>uint32_t</code>  类型 ( <code>pno_t</code>  类型) 的变量，用来表示页号。 <code>Page</code>  页的解释如下:</p>\n<ul>\n<li>页对象存在 -&gt; 页被导入到 physical memory-&gt; 创建一个 <code>page</code> ，并且从 <code>swap_file</code>  中读 <code>page</code>  数据。页的数据从 <code>virtual_pno * Page::PAGE_SIZE</code>  开始</li>\n<li>页对象不存在 -&gt; 数据存储在 <code>swap_file</code>  中</li>\n<li>用户可以\n<ul>\n<li>获取数据</li>\n<li>存储数据</li>\n<li>将数据刷新到 <code>swap file</code>  中（多余的无法放入 physical memory 的虚拟内存所存储的地方）</li>\n</ul>\n</li>\n</ul>\n<p><code>Page</code>  类中包含如下 <code>public</code>  方法:</p>\n<ul>\n<li><code>Page(fstream&amp; swap_file, pno_t virtual_pno);</code>\n<ul>\n<li>构造函数，传入该 <code>page</code>  对应的 <code>swap_file</code>  和页号</li>\n<li>我们从 <code>swap_file</code>  读入页数据，刷新时将页数据写入 <code>swap_file</code></li>\n<li>页号规定了我们在 <code>swap_file</code>  的哪里写入数据</li>\n</ul>\n</li>\n<li><code>Page(const Page&amp; other);</code>\n<ul>\n<li>利用一个页来复制构造另一个页，两个页具有相同的页号和 <code>swap_file</code>  地址，但是数据是复制了的（不是引用）</li>\n</ul>\n</li>\n<li><code>~Page()</code>\n<ul>\n<li>清理声明的变量</li>\n<li>如果当前数据为 dirty 状态，那么将其刷新到对应的 <code>swap_file</code></li>\n</ul>\n</li>\n<li><code>Page&amp; operator=(const Page&amp; rhs)</code>\n<ul>\n<li>赋值函数，同复制构造函数，两个 <code>Page</code>  具有相同的 <code>swap_file</code>  和页号，但是 <code>data</code>  是被复制了的</li>\n</ul>\n</li>\n<li><code>template &lt;typename T&gt; T access(uint32_t virtual_address);</code>\n<ul>\n<li>获取该页面的值（需要考虑错误情况）</li>\n</ul>\n</li>\n<li><code>T store(uint32_t virtual address, const T&amp; to_write)</code>\n<ul>\n<li>存储值到该页面中去</li>\n</ul>\n</li>\n<li><code>bool operator&lt;(const Page&amp; rhs);</code>\n<ul>\n<li>比较两个页面顺序</li>\n</ul>\n</li>\n<li><code>pno_t pno();</code>\n<ul>\n<li>获取该页面的页号</li>\n</ul>\n</li>\n<li><code>bool dirty();</code>\n<ul>\n<li>该 page 是否为 dirty 状态 (如果有人在 flush 之后，向该 page 写过值就是 dirty)</li>\n</ul>\n</li>\n<li><code>void flush();</code>\n<ul>\n<li>如果该 page 是 dirty 状态，就把内容刷新到 <code>swap_file</code></li>\n</ul>\n</li>\n<li>变量： <code>static constexpr size_t PAGE_SIZE = 4096U;</code>\n<ul>\n<li>该 page 的大小</li>\n</ul>\n</li>\n</ul>\n<p>Page 中还包括如下 <code>private</code>  变量:</p>\n<ul>\n<li><code>fstream&amp; swap_file_;</code>\n<ul>\n<li>注意这里是个引用，一个 page 没有对 <code>swap_file</code>  的所有权，只能 access 到它，所以这里 <code>swap_file</code>  是个引用</li>\n</ul>\n</li>\n<li><code>pno_t virtual_pno_;</code>\n<ul>\n<li>该 page 的页号</li>\n</ul>\n</li>\n<li><code>uint8_t *bytes_;</code>\n<ul>\n<li>该 page 的字节内容</li>\n</ul>\n</li>\n<li><code>bool dirty_;</code>\n<ul>\n<li>该 page 是否在 flush 后被写入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"page-设计\"><a class=\"markdownIt-Anchor\" href=\"#page-设计\">#</a> Page 设计</h2>\n<h2 id=\"pagetemplatescc实现\"><a class=\"markdownIt-Anchor\" href=\"#pagetemplatescc实现\">#</a>  <code>PageTemplates.cc</code>  实现</h2>\n<p><code>PageTemplates.cc</code>  在 <code>simplevm namespace</code>  中。源码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// TODO: implement all template member functions for Page</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// This function allows users to read various data types</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// from the page. Trying to read a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// anything being read fits in on the page we are reading</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">//   - the data of type T that was read from the page</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  T <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>virtual_address <span class=\"token operator\">/</span> PAGE_SIZE <span class=\"token operator\">!=</span> virtual_pno_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    virtual_address <span class=\"token operator\">=</span> virtual_address <span class=\"token operator\">%</span> PAGE_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    T<span class=\"token operator\">*</span> address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bytes_ <span class=\"token operator\">+</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// This function allows users to write various data types</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// to the page. Trying to write a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// anything being written fits on the current page</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//   - to_write: the data of type T to write to the page</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// Returns: nothing</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> to_write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>virtual_address <span class=\"token operator\">/</span> PAGE_SIZE <span class=\"token operator\">!=</span> virtual_pno_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    virtual_address <span class=\"token operator\">=</span> virtual_address <span class=\"token operator\">%</span> PAGE_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    T<span class=\"token operator\">*</span> address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bytes_ <span class=\"token operator\">+</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token operator\">*</span>address <span class=\"token operator\">=</span> to_write<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pageh定义\"><a class=\"markdownIt-Anchor\" href=\"#pageh定义\">#</a>  <code>Page.h</code>  定义</h2>\n<p><code>Page.h</code>  在 <code>simplevm namespace</code>  中。源码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">PAGE_H_</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PAGE_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>fstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// defines the type pno_t, which is the type</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// that represents a page number</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">uint32_t</span> pno_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// A Page is a class that represents a page of memory</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// in our simple virtual memory model.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// If a page object exists, then we say that the page is loaded</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// into physical memory. When the page object doesn't exist, then its</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// data is stored in the swap_file. When we load in a page to</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// \"physical memory\", we are creating the page and we read the page's data</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// from the swap file. A page's data in the swap file starts at</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// virtual_pno * Page::PAGE_SIZE</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// This Class manages a page's worth of data</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// Users can access or store data, sa well as flush the data in the</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// page to the specified swap file. A swap file is where exceess virtual</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// memory is stored when it can't fit in physical memory.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\">// Constructs a new Page object associated</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// with a swap_file and a virtual page number.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// The swap file is where we will load in the page</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// contents and flush the page contents. The virtual</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// page number decides where in that file we read</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// and write this page.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// Passing in an invalid page number is undefined behaviour</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// Note that a Page does not have ownership</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">// of the swap_file_, just access to it.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//  - swap_file the swap_file associated with the page</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//  - the virtual page number of our new page</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>fstream<span class=\"token operator\">&amp;</span> swap_file<span class=\"token punctuation\">,</span> pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// Constructs a new Page object that is a copy of</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// data. This cctor should only really be used</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">//   - other: the page we are copying</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">// Destructor for the page object</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">// Cleans up any dynamically allocated data or</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// otherwise allocated resources AND should flush</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">// its contents if the page is dirty at time of</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">// destruction.</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// Set the current Page object so that is a copy of</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">// data. This op= should only really be used</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">// You can assume each page has the same swap_file.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the page we are copying</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">// This function is not required, but you may add it</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token comment\">// if it is needed for some of the STL containers</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token comment\">// you use in PageTable</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token comment\">// Determines if this page should go before another page if they</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token comment\">// were in sorted order.</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the Page we are comparing this to</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">// Returns: true iff this page would show up before the other</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">// page in sorted order. False otherwise.</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token comment\">// This function allows users to read various data types</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// from the page. Trying to read a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// anything being read fits in on the page we are reading</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">//   - the data of type T that was read from the page</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  T <span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\">// This function allows users to write various data types</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">// to the page. Trying to write a non-primitive type or use</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// a virtual address that doesn't map to this page results</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">// in undefined behaviour. You can also assume that</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">// anything being written fits on the current page</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// is not partially on another page.</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// If you are familiar with endianness, it shouldn't be</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">// considered for this function.</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: a virtual address that maps somewhere</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token comment\">//     into the page, where we will read data of type T</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token comment\">//   - to_write: the data of type T to write to the page</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token comment\">// Returns: nothing</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> to_write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">// Returns the virtual page number of this page</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token comment\">// Returns: this page's virtual page number</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  pno_t <span class=\"token function\">pno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token comment\">// Returns whether or not a page is dirty</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token comment\">// A page is \"dirty\" if someone has written to the data managed</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token comment\">// by the page since the last time the page was flush()'d.</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  <span class=\"token comment\">// Returns: Whether this page is dirty or not</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token comment\">// Flushes the page to the swap file if it is dirty.</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token comment\">// Flushing a page to the swap file involves writing</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token comment\">// the page at the the spot correspoding to its page number</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  <span class=\"token comment\">// in the swap_file. For a description of what it means</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token comment\">// for a page to be dirty, see the dirty() member function.</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token comment\">// The page should not be written if it is not dirty.</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token comment\">// The amount of memory a page represents</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> size_t PAGE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">4096U</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token comment\">// The file we will be reading/writing to</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  <span class=\"token comment\">// Note how this is a reference</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  <span class=\"token comment\">// also note that a Page does not have ownership</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token comment\">// of the swap_file_, just access to it.</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  fstream<span class=\"token operator\">&amp;</span> swap_file_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token comment\">// the virtual page number</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  pno_t virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  <span class=\"token comment\">// The bytes of the page. One byte is 8 bits</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  <span class=\"token comment\">// so we use 8-bit unsigned integers.</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  <span class=\"token comment\">// You can also assume that a 'char' is one byte big</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>bytes_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  <span class=\"token comment\">// Whether the page is dirty or not</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token keyword\">bool</span> dirty_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token comment\">// since we have template code</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./PageTemplates.cc\"</span></span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  <span class=\"token comment\">// PAGE_H_</span></span></pre></td></tr></table></figure><h2 id=\"pagecc实现\"><a class=\"markdownIt-Anchor\" href=\"#pagecc实现\">#</a>  <code>Page.cc</code>  实现</h2>\n<p><code>Page.cc</code>  在 <code>simplevm namespace</code>  中。源码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./Page.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// TODO: implement all non template member functions for Page</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Constructs a new Page object associated</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// with a swap_file and a virtual page number.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// The swap file is where we will load in the page</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// contents and flush the page contents. The virtual</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// page number decides where in that file we read</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// and write this page.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// Passing in an invalid page number is undefined behaviour</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// Note that a Page does not have ownership</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// of the swap_file_, just access to it.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//  - swap_file the swap_file associated with the page</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">//  - the virtual page number of our new page</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>fstream<span class=\"token operator\">&amp;</span> swap_file<span class=\"token punctuation\">,</span> pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">swap_file_</span><span class=\"token punctuation\">(</span>swap_file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_ <span class=\"token operator\">=</span> virtual_pno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bytes_ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">[</span>PAGE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// seek the correct position</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span>virtual_pno_ <span class=\"token operator\">*</span> PAGE_SIZE<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// read from the swap file</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>bytes_<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swap_file_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap file read failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// Constructs a new Page object that is a copy of</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">// data. This cctor should only really be used</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">//   - other: the page we are copying</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">swap_file_</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>swap_file_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_ <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bytes_ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">[</span>PAGE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bytes_<span class=\"token punctuation\">,</span>other<span class=\"token punctuation\">.</span>bytes_<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>dirty_ <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>dirty_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// Destructor for the page object</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// Cleans up any dynamically allocated data or</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// otherwise allocated resources AND should flush</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">// its contents if the page is dirty at time of</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">// destruction.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dirty_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">// Set the current Page object so that is a copy of</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// another page object. Both pages will have</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// the same page number and swap_file, but should</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">// have independent copies of the page data.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">// Misc: this means that there could be issues with</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">// having the original and copy page having differnt</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">// data. This op= should only really be used</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">// in the context of managing pages with something</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// like STL, where the original page used for the cctor</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// will be discarded. In real C++, we would want to</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">// use move semantics here.</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">// You can assume each page has the same swap_file.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">// Arguements:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the page we are copying</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> Page<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">!=</span><span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// This function is not required, but you may add it</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">// if it is needed for some of the STL containers</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">// you use in PageTable</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">// Determines if this page should go before another page if they</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// were in sorted order.</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token comment\">//   - rhs: the Page we are comparing this to</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// Returns: true iff this page would show up before the other</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// page in sorted order. False otherwise.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token keyword\">bool</span> Page<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Page<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_ <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// Returns the virtual page number of this page</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">// Returns: this page's virtual page number</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  pno_t <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>virtual_pno_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">// Returns whether or not a page is dirty</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// A page is \"dirty\" if someone has written to the data managed</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">// by the page since the last time the page was flush()'d.</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">// Returns: Whether this page is dirty or not</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>dirty_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token comment\">// Flushes the page to the swap file if it is dirty.</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token comment\">// Flushing a page to the swap file involves writing</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token comment\">// the page at the the spot correspoding to its page number</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token comment\">// in the swap_file. For a description of what it means</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token comment\">// for a page to be dirty, see the dirty() member function.</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\">// The page should not be written if it is not dirty.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">Page</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">// seek the correct position</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span>virtual_pno_ <span class=\"token operator\">*</span> PAGE_SIZE<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token comment\">// write to the swap file</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>bytes_<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swap_file_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Swap file write failed!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        dirty_ <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pagetable实现\"><a class=\"markdownIt-Anchor\" href=\"#pagetable实现\">#</a> PageTable 实现</h1>\n<h2 id=\"pagetable-源码分析\"><a class=\"markdownIt-Anchor\" href=\"#pagetable-源码分析\">#</a> PageTable 源码分析</h2>\n<p>PageTable 的作用如下：</p>\n<ul>\n<li>管理一个进程的地址空间</li>\n<li>包括 <code>swap_file</code></li>\n<li>从 physical memory 中读取页</li>\n<li>选择页淘汰，进行页替换</li>\n</ul>\n<p><code>PageTable.cc</code>  中有如下一些方法：</p>\n<ul>\n<li><code>PageTable(std::string swap_file_name, size_t page_capacity);</code>\n<ul>\n<li>初始化页表，制定 <code>swap_file</code>  名称和页容量</li>\n<li>存储的页不可超过页容量</li>\n</ul>\n</li>\n<li><code>~PageTable();</code>\n<ul>\n<li>清理所有变量</li>\n<li>flush dirty pages</li>\n</ul>\n</li>\n<li><code>Page&amp; get_page(uint32_t virtual_address);</code>\n<ul>\n<li>返回一个虚拟地址对应的 page</li>\n<li>将该页导入 physical memory</li>\n<li>返回它</li>\n<li>有几种可能情况\n<ul>\n<li>该页在 Physical memory 中，返回对应的页的引用，并且将该页标记为最新（挪到 vector 最前）</li>\n<li>该页不在 physical memory 中，并且 physical memory 还没满。那么将其导入 physical memory，并且标记为最新（挪到 vector 最前），返回该页引用</li>\n<li>该页不在 Physical memory 中，并且 physical memory 已经满了，那么先执行淘汰算法，淘汰最老的页，将其写入 <code>swap_file</code> 。然后将该页从 <code>swap_file</code>  中导入进来，放在 vector 最前</li>\n</ul>\n</li>\n<li>注意：\n<ul>\n<li>virtual address != 页号，可能有多个 virtual address 对应同一个页号 (一页有 4096 个字节嘛)</li>\n<li>页的最新和最老完全取决于 <code>get_page</code>  函数的调用情况</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>size_t capacity();</code>\n<ul>\n<li>返回页容量</li>\n</ul>\n</li>\n<li><code>size_t loaded_pages();</code>\n<ul>\n<li>返回导入 physical memory 的页数目</li>\n</ul>\n</li>\n<li><code>bool page_available(pno_t virtual_pno);</code>\n<ul>\n<li>返回对应页是否存在 physical memory 中</li>\n</ul>\n</li>\n<li><code>void flush_all_pages();</code>\n<ul>\n<li>将所有页都刷新到 <code>swap_file</code>  中</li>\n</ul>\n</li>\n<li><code>void flush_page(pno_t virtual_pno);</code>\n<ul>\n<li>将对应的页刷新到 <code>swap_file</code>  中</li>\n</ul>\n</li>\n<li><code>void discard_page(pno_t virtual_pno);</code>\n<ul>\n<li>从页表中丢弃对应的页。如果该页不存在，则返回。否则，若该页为 dirty，则将该页数据写入 <code>swap_file</code> ，然后丢弃它</li>\n</ul>\n</li>\n<li><code>void evict_page();</code>\n<ul>\n<li>若没有 page 在页表中，则什么也不做。否则丢弃最老的一页（丢弃前记得将其写入 <code>swap_file</code> ）</li>\n</ul>\n</li>\n</ul>\n<p><code>PageTable.cc</code>  有两个 <code>private</code>  变量：</p>\n<ul>\n<li><code>fstream swap_file_</code> : 交换文件</li>\n<li><code>size_t capacity</code> : 页容量</li>\n<li><code>size_t page_num</code> : 当前已经导入 physical memory 的页数目</li>\n<li><code>std::vector&lt;Page*&gt; page_list</code> : 记录所有在 physical memory 中的页</li>\n<li><code>std::unordered_map&lt;pno_t,Page*&gt; mp</code> :</li>\n</ul>\n<h2 id=\"pagetableh设计\"><a class=\"markdownIt-Anchor\" href=\"#pagetableh设计\">#</a>  <code>PageTable.h</code>  设计</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">PAGE_TABLE_H_</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PAGE_TABLE_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// #include &lt;vector></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./Page.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>fstream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// A PageTable manages a processes memeory for our simplified</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// virtual memory model. This involves managing a swap_file</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// which is where pages of data are stored when they aren't loaded</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// into physical memory. For our software model, we will say a page</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// is in \"physical memory\" if it is loaded into our memory space</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// (e.g. it is on the heap). Pages that aren't loaded in will have</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// their contents stored in the swap_file and will not have an</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// associated Page object (see Page.h). Our page table can only have</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// so many pages stored in memory at one time, which is specified</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// on PageTable Creation. We implement an LRU page replacement</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// policy to decide which pages to evict if we need to load a new page</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// and we already have reached our capacity on the numberof pages we can</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// hold.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// Users can get a page from the cache, flush pages to the swap_file,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// request any page is evicted, and specifically ask for a page to be evicted.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PageTable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// Constructs a new page table with the specified</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// swap file and the specified page capacity, which is</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// the number of pages that can be held in memory</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// at one time. There cannot be more than page_capacity</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">// number of pages loaded in at a time.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//   - swap_file_name: the name of the swap_file</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//   - page_capacity: the maximum number of pages that can be held</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">//     in memory at one time.</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string swap_file_name<span class=\"token punctuation\">,</span> size_t page_capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// Destructs the page table, freeing any allocated resources</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// and flushing any pages currently loaded into memory that</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// are dirty</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\">// Given a virtual address, gets the associated</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// page for that virtual address. This page will</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// be \"loaded\" into physical memory by the time it</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// is returned.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// There are three possiblities when a page is requested:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// 1. The page is currently in the \"loaded\" and in the cache.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">//    In this case, a reference to the page is returned and</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">//    and the page is marked as most recently used in the cache</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">// 2. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">//    has not reached its page capacity:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">//    In this case, the page is loaded from the swap file and added</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">//    to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 3. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">//    is at page capacity:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">//    The least recently used page in the cache is evicted from the</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\">//    cache. Afterwards the requested page is loaded from the swap file</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token comment\">//    and added to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// NOTE: What decides how recntly used a page was used is entirely</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token comment\">// decided by how recntly it was returned by a call to get_page.</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: A virtual address that is associated</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token comment\">//     with a requested page. The virutal address is represented</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\">//     as a unsigned 32 bit integer. NOTE: a virtual address</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token comment\">//     is NOT the same as a page number. Multiple virtual addresses</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">//     could be associated with the same page number.</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">//   - the requested page, which is loaded into the cache and</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\">//     marked as the most recently used page</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> <span class=\"token function\">get_page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token comment\">// Returns the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token comment\">// Returns: the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  size_t <span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token comment\">// Returns the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// Returns: the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  size_t <span class=\"token function\">loaded_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">// Checks to see if the specified page is loaded into memory</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// Arguments: The virtual page number of the page to check for</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token comment\">// Returns: True iff the page is loaded into memory, false otherwise</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// Makes sure that all currently loaded pages are flushed</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// meaning tha the page contents are updated on the swap file.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">flush_all_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">// Flushes the specified page to the swap file.</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to flush</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">flush_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// Discards the specified page from the PageTable.</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// If the page is dirty, then it is flushed before it is discarded.</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">// If the page is not in the table, then nothing happens.</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to discard.</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">discard_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token comment\">// Evicts a page from the PageTable. The page evicted</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token comment\">// should be the least recntly used page in the cache.</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token comment\">// If the evicted page is dirty, then it is flushed before it is evicted.</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\">// If there are no pages in the cache, then do nothing.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">evict_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token comment\">// The swap file where pages are stored</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  fstream swap_file_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token comment\">// The number of pages that can be stored</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token comment\">// in the PageTable at one time.</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  size_t capacity_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token comment\">// TODO: add fields</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  size_t page_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token comment\">// a vector to store pages in physical memory</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>pno_t<span class=\"token punctuation\">,</span>Page<span class=\"token operator\">*</span><span class=\"token operator\">>></span> page_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token comment\">// use an unordered_map to quickly determined the corresponding page</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>pno_t<span class=\"token punctuation\">,</span>Page<span class=\"token operator\">*</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  <span class=\"token comment\">// PAGE_TABLE_H_</span></span></pre></td></tr></table></figure><h2 id=\"pagetablecc实现\"><a class=\"markdownIt-Anchor\" href=\"#pagetablecc实现\">#</a>  <code>PageTable.cc</code>  实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./PageTable.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./Page.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> simplevm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// TODO: implment PageTable member functions</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// Constructs a new page table with the specified</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// swap file and the specified page capacity, which is</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// the number of pages that can be held in memory</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// at one time. There cannot be more than page_capacity</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// number of pages loaded in at a time.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//   - swap_file_name: the name of the swap_file</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//   - page_capacity: the maximum number of pages that can be held</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//     in memory at one time.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string swap_file_name<span class=\"token punctuation\">,</span> size_t page_capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    swap_file_<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>swap_file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>capacity_ <span class=\"token operator\">=</span> page_capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>page_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// Destructs the page table, freeing any allocated resources</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// and flushing any pages currently loaded into memory that</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// are dirty</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">PageTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>page_num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Page<span class=\"token operator\">*</span> deleted_page <span class=\"token operator\">=</span> page_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        deleted_page<span class=\"token operator\">-></span><span class=\"token operator\">~</span><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        page_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    mp<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    page_list<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// Given a virtual address, gets the associated</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// page for that virtual address. This page will</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// be \"loaded\" into physical memory by the time it</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// is returned.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// There are three possiblities when a page is requested:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 1. The page is currently in the \"loaded\" and in the cache.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//    In this case, a reference to the page is returned and</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//    and the page is marked as most recently used in the cache</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// 2. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">//    has not reached its page capacity:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">//    In this case, the page is loaded from the swap file and added</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">//    to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">// 3. The page is not currently \"loaded\", and the PageTable</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">//    is at page capacity:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\">//    The least recently used page in the cache is evicted from the</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">//    cache. Afterwards the requested page is loaded from the swap file</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\">//    and added to the cache as the most recently used page.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// NOTE: What decides how recntly used a page was used is entirely</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// decided by how recntly it was returned by a call to get_page.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// Arguments:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">//   - virtual_address: A virtual address that is associated</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">//     with a requested page. The virutal address is represented</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">//     as a unsigned 32 bit integer. NOTE: a virtual address</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">//     is NOT the same as a page number. Multiple virtual addresses</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">//     could be associated with the same page number.</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">// Returns:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">//   - the requested page, which is loaded into the cache and</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">//     marked as the most recently used page</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  Page<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> virtual_address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// obtain the virtual_pno according to the virtual address</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    pno_t pno <span class=\"token operator\">=</span> virtual_address <span class=\"token operator\">/</span> Page<span class=\"token double-colon punctuation\">::</span>PAGE_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>pno<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        Page<span class=\"token operator\">*</span> pg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>swap_file_<span class=\"token punctuation\">,</span>pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>page_num <span class=\"token operator\">&lt;</span> capacity_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            page_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>pg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token function\">flush_page</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            page_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// LRU Algorithms</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// evict the oldest page, and flush it</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token function\">evict_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// add the new page to the front of the list</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            page_list<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>pno<span class=\"token punctuation\">,</span>pg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            page_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        mp<span class=\"token punctuation\">[</span>pno<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">[</span>pno<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token comment\">// Returns the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">// Returns: the page capacity of the page table</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  size_t <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">return</span> capacity_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">// Returns the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token comment\">// Returns: the number of pages currently loaded into \"physical memory\"</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  size_t <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">loaded_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">return</span> page_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token comment\">// Checks to see if the specified page is loaded into memory</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">// Arguments: The virtual page number of the page to check for</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token comment\">// Returns: True iff the page is loaded into memory, false otherwise</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">return</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">// Makes sure that all currently loaded pages are flushed</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">// meaning tha the page contents are updated on the swap file.</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flush_all_pages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p<span class=\"token operator\">:</span>page_list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        p<span class=\"token punctuation\">.</span>second<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\">// Flushes the specified page to the swap file.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\">// This should not affect how recently used each page is and all pages</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token comment\">// will remain loaded into memory after this operation is performed.</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to flush</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flush_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        p<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  <span class=\"token comment\">// Discards the specified page from the PageTable.</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token comment\">// If the page is dirty, then it is flushed before it is discarded.</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  <span class=\"token comment\">// If the page is not in the table, then nothing happens.</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token comment\">// Arguments: the virtual page number of the page to discard.</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">discard_page</span><span class=\"token punctuation\">(</span>pno_t virtual_pno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">page_available</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        p<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        page_list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        mp<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>virtual_pno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        page_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  <span class=\"token comment\">// Evicts a page from the PageTable. The page evicted</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  <span class=\"token comment\">// should be the least recntly used page in the cache.</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token comment\">// If the evicted page is dirty, then it is flushed before it is evicted.</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  <span class=\"token comment\">// If there are no pages in the cache, then do nothing.</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  <span class=\"token comment\">// Arguments: None</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token comment\">// Returns: Nothing</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token class-name\">PageTable</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">evict_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    pno_t current_pno <span class=\"token operator\">=</span> page_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    Page<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> page_list<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">// find the value in unordered_map</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>first <span class=\"token operator\">==</span> current_pno <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            mp<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    page_list<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    page_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}