{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"系统入门\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/",
            "url": "https://salvely.github.io/blog/2024/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/CIT5950/",
            "title": "HW3: LRU SimpleVM 实现记录",
            "date_published": "2024-01-04T05:27:01.000Z",
            "content_html": "<h1 id=\"overview\"><a class=\"markdownIt-Anchor\" href=\"#overview\">#</a> Overview</h1>\n<p>本作业要求实现:</p>\n<ul>\n<li>Page 对象：\n<ul>\n<li>若 Page 不在 memory 中，那么它的数据被存储在磁盘上的 <code>swap file</code>  部分。在 <code>swap file</code>  中，每一页都有对应的顺序存储的数据。</li>\n<li>可以使用 C++  <code>fstream</code>  类进行 I/O 读写。尤其是 <code>read()</code>  和 <code>write()</code>  方法。</li>\n</ul>\n</li>\n<li>PageTable 对象\n<ul>\n<li>包含多个 page 以及 <code>swap file</code></li>\n<li>这里主要要求实现 LRU 算法</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"相关文件\"><a class=\"markdownIt-Anchor\" href=\"#相关文件\">#</a> 相关文件</h1>\n<h2 id=\"page\"><a class=\"markdownIt-Anchor\" href=\"#page\">#</a> Page</h2>\n<ul>\n<li><code>Page.h</code></li>\n<li><code>Page.cc</code></li>\n<li><code>PageTemplates.cc</code></li>\n</ul>\n<h2 id=\"pagetable\"><a class=\"markdownIt-Anchor\" href=\"#pagetable\">#</a> PageTable</h2>\n<ul>\n<li><code>PageTable.h</code></li>\n<li><code>PageTable.cc</code></li>\n</ul>\n<h2 id=\"testing\"><a class=\"markdownIt-Anchor\" href=\"#testing\">#</a> Testing</h2>\n<ul>\n<li><code>test_page.cc</code></li>\n<li><code>test_pagetable.cc</code></li>\n</ul>\n<h1 id=\"todos\"><a class=\"markdownIt-Anchor\" href=\"#todos\">#</a> Todos</h1>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> <span class=\"exturl\" data-url=\"aHR0cDovL1BhZ2VUZW1wbGF0ZXMuY2M=\">PageTemplates.cc</span> 设计</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\"><label for=\"cbx_1\"> Page.h 定义</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> <span class=\"exturl\" data-url=\"aHR0cDovL1BhZ2UuY2M=\">Page.cc</span> 实现</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> 实现 <code>Page.cc</code>  中的构造函数，析构函数， <code>dirty()</code> , <code>pno()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\"><label for=\"cbx_4\"> 通过 <code>basic_ctor</code>  测试</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> 实现 <code>PageTemplates.cc</code>  中的 <code>access()</code>  函数，并通过 <code>access</code>  测试</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> 实现 <code>PageTemplates.cc</code>  中的 <code>store()</code>  函数，并通过 <code>store</code>  测试</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> 实现复制构造函数和赋值</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> 通过所有 Page 测试</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> PageTable.h 设计</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> <span class=\"exturl\" data-url=\"aHR0cDovL1BhZ2VUYWJsZS5jYw==\">PageTable.cc</span> 实现</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> PageTable 测试</label></li>\n</ul>\n<h1 id=\"提示\"><a class=\"markdownIt-Anchor\" href=\"#提示\">#</a> 提示</h1>\n<ul>\n<li>map, unordered_map, list, vector 结构都很有用</li>\n<li><code>fstream</code>  中的 <code>read()</code>  和 <code>write()</code>  很有用</li>\n<li>需要将 <code>uint8_t</code>  切换到 <code>char</code>  类型来使用 <code>fstream</code></li>\n<li>利用初始化列表来初始化引用类型</li>\n</ul>\n",
            "tags": []
        }
    ]
}