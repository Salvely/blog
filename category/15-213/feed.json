{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"15-213\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "url": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "title": "15213 Lab 1-data lab 实验总结",
            "date_published": "2024-02-05T07:50:22.000Z",
            "content_html": "<p>部分的题目我参考了一下网上的内容（出处已注明），其他的均为自己实现（有的题目的实现过程可能会有些繁琐），部分 dlc 检测出来可能会报些 error，但是 btest 均能过。</p>\n<blockquote>\n<p>没有 TA 可太难了！自己实现了一天多，终于苟完了。不算完美，但也能看吧。</p>\n</blockquote>\n<h2 id=\"bitxor\"><a class=\"markdownIt-Anchor\" href=\"#bitxor\">#</a> bitXor</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * bitXor - x^y using only ~ and &amp;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: bitXor(4, 5) = 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ~ &amp;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 14</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bitXor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * x + y = ~( ~x &amp; ~y)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bitXor 要求我们使用位操作来实现 <code>^</code>  运算符。根据运算定律我们知道:  <code>a ^ b = (a &amp; (~b)) | (b &amp; (~a))</code> 。但是问题来了，我们这里不允许使用 <code>|</code> ，只能用 <code>~</code>  和 <code>&amp;</code> 。那么我们就必须使用这两个操作符来实现 <code>|</code>  运算。<br>\n通过德摩根定律我们知道： <code>a | b = ~((~a) &amp; (~b))</code> 。这不就解决问题了嘛，所以将这两个式子综合一下，最后的结果是 <code>~((~(x &amp; ~y)) &amp; (~(y &amp; ~x)))</code></p>\n<h2 id=\"tmin\"><a class=\"markdownIt-Anchor\" href=\"#tmin\">#</a> tmin</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * tmin - return minimum two's complement integer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Max ops: 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">tmin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * the most significant bit = 1, others = 0, so (1 &lt;&lt; 31)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这题要求我们返回最小的补码整数，返回类型为 <code>int</code> 。首先，在二进制补码表示中，最高位的权值为 - 1，其他位的权值为 1。因此，最小的补码整数 tmin 的最高位为 1，其他位为 0。而题目中 <code>int</code>  类型为 32 位，因此只要返回 <code>(1 &lt;&lt; 31)</code>  即可。</p>\n<h2 id=\"istmax\"><a class=\"markdownIt-Anchor\" href=\"#istmax\">#</a> isTmax</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isTmax - returns 1 if x is the maximum, two's complement number,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *     and 0 otherwise</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | +</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 10</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isTmax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * Tmax ^ Tmin = 0xffffffff, ~0xffffffff = 0x0, !0x0 = 0x1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// return !(~(x ^ (1 &lt;&lt; 31)));</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * ~Tmax = Tmin -> ~Tmin + 1 = Tmin 且 Tmin != 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>tmax 是二进制补码中最大的数，通过分析这个数的特点，我们可以完成这道题目。</p>\n<ol>\n<li>该数除了最高位是 0 外，其他位均是 1。因此该数和 (1&lt;&lt;31)（也就是 tmin）的亦或（或者和）为 <code>0xffffffff</code> 。 <code>0xffffffff</code>  按位取反得到 <code>0x0</code> ，而 <code>0x0</code>  按位取反得到 <code>0x1</code> 。但是其他的数并没有这个特性。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>该数取反后得到 tmin，tmin 的一个特点是 tmin 和 -tmin 的表示相同。因此两者亦或得到 0。还有一个树也有这样的特性，也就是 0。因此我们需要排除 0 的可能性。我们使用 <code>&amp;</code>  操作符来实现两种特性的叠加。我本没有想到该方法，是从这篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQxMjY3OTU=\">知乎帖子</span>学习到的。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是题目不允许在该题中使用移位运算符，因此只能使用方法二。</p>\n<h2 id=\"alloddbits\"><a class=\"markdownIt-Anchor\" href=\"#alloddbits\">#</a> allOddBits</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * allOddBits - return 1 if all odd-numbered bits in word set to 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   where bits are numbered from 0 (least significant) to 31 (most significant)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Max ops: 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Rating: 2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">allOddBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * tear the number into 4 parts, get rid of the other digits except 0xaa</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * if the results are all the same, then compare it with 0xaa, if there are the same, xor returns 0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * otherwise not all odd bits in word set is set to 1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> third <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">int</span> fourth <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">&amp;</span> second <span class=\"token operator\">&amp;</span> third <span class=\"token operator\">&amp;</span> fourth<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于单个字节的奇数位，我们可以使用 <code>0xaa</code>  作为 mask。<br>\n本题目中我将位打成 4 个部分，每个部分与 mask 相与。如果每个奇数位都是 1 的话，四个部分的比较结果应该相同，都等于 <code>0xaa</code> ，该值与 <code>0xaa</code>  异或得到 <code>0x0</code> ，取 <code>!</code>  后得到 <code>0x1</code> 。否则该值不为 <code>0xaa</code> ，同 <code>0xaa</code>  亦或得到其他非零值，取 <code>!</code>  后得到 <code>0x0</code> 。</p>\n<h2 id=\"negate\"><a class=\"markdownIt-Anchor\" href=\"#negate\">#</a> negate</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * negate - return -x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: negate(1) = -1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该题目中我们需要求解某个数的相反数。在课堂中我们学过，一个数和它相反数的和为 0。那么如何获得其相反数呢？以 <code>x</code>  为例，我们知道 <code>x + ~x = ~0</code> ，也就是全 f，然后 <code>~0 + 1 = 0</code> 。因此， <code>-x</code>  的补码表示即为 <code>~x + 1</code> 。</p>\n<h2 id=\"isasciidigit\"><a class=\"markdownIt-Anchor\" href=\"#isasciidigit\">#</a> isAsciiDigit</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: isAsciiDigit(0x35) = 1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *            isAsciiDigit(0x3a) = 0.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *            isAsciiDigit(0x05) = 0.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Max ops: 15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isAsciiDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * least = (x &amp; 0xf) - 0xa</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * if least > 0 (with 0 in most significant bit) then least = 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    * else least = 1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">int</span> least <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0xa</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> least <span class=\"token operator\">&amp;</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我使用的方法是将该数拆分为最低位和其他位来比较。我们将最低位与 <code>0xa</code>  相减，如果求得的结果为负数，符号位即为 1，代表该值在 0-9 之间。接下来判断其他位是否为 <code>0x3</code> ，如果是，则和 <code>0x3</code>  异或结果为 0，通过逻辑 <code>!</code>  返回 1。</p>\n<h2 id=\"conditional\"><a class=\"markdownIt-Anchor\" href=\"#conditional\">#</a> conditional</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * conditional - same as x ? y : z</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: conditional(2,4,5) = 4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 16</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">conditional</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * judge if x != 0, if true, !!x = 1, return y, otherwise !!x = 0, return z</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// cond gets all f when !!x == 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> cond <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cond <span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>cond <span class=\"token operator\">&amp;</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们先获取 <code>x</code>  的值，如果 <code>x != 0</code> ，则 <code>!!x = 0x1</code> ，否则为 <code>0x0</code> 。扩展该值，当该值为 <code>0x1</code>  时与 <code>y</code>  相与得到 y。当该值为 <code>0x0</code> ，取反后与 z 相与得到 z。因为这两个值只取其一，当一边不为 0 时另一边必然为 0，因此两边用 <code>|</code>  连接。</p>\n<h2 id=\"islessorequal\"><a class=\"markdownIt-Anchor\" href=\"#islessorequal\">#</a> isLessOrEqual</h2>\n<blockquote>\n<p>本题要求使用最多 24 个运算符，但是这里我使用的过多了，应该会有更好的办法。期待有人指正。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isLessOrEqual - if x &lt;= y  then return 1, else return 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: isLessOrEqual(4,5) = 1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 24</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isLessOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// first compare their sign bit</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// return true if sign = 1(>0)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_diff <span class=\"token operator\">=</span> sign_x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>sign_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sign_diff <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// then compare the magnitude</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_x <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_y <span class=\"token operator\">=</span> y <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_diff <span class=\"token operator\">=</span> mag_x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>mag_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_sign <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>mag_x <span class=\"token operator\">^</span> mag_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mag_diff <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 2 conditions return true:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * 1. sign of x = 1 and sign of y = 0</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * 2. sign of x and y equals, and magnitude of x &lt;= y</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sign_bit<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> sign_diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sign_diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> mag_sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要分几种情况：</p>\n<ol>\n<li>x 为负数，y 为正数，直接返回 <code>0x1</code></li>\n<li>x 和 y 同符号，比较数值部分。x &lt;= y 时，返回 <code>0x1</code> ；x &gt; y 时，返回 <code>0x0</code></li>\n<li>x 为正数，y 为负数，返回 <code>0x0</code></li>\n</ol>\n<p>其中 <code>sign_diff</code>  为两数符号位之差，此处分三种情况：</p>\n<ol>\n<li>x 为负数，符号位为 1；y 为正数，符号位为 0。那么两者符号位相减等于 <code>0x1</code> ，该值的符号位为 0。（这是我们要返回 <code>0x1</code>  的结果）</li>\n<li>x 为正数，符号位为 0；y 为负数，符号位为 1。那么两者符号位相减等于 <code>0xffffffff</code>  (-1)，该值的符号位为 1。（我们不要这个结果）</li>\n<li>x 和 y 的符号位相同，两者相减为 <code>0x0</code> ，该值的符号位为 0。（这里我们要看情况，看 <code>x</code>  是否和 <code>y</code>  相等）</li>\n</ol>\n<p>代码中 <code>sign_diff</code>  为两符号位之差， <code>sign_bit</code>  为该做差结果的最高位。当 x 和 y 的符号位不相同时，当 <code>sign_diff</code>  为 <code>0x1</code>  且 <code>sign_bit</code>  为 <code>0x0</code>  是，我们返回 <code>0x1</code> 。这也是运算结果 <code>|</code>  左半边的由来。</p>\n<p>代码中 <code>mag_diff</code>  为两者数值部分之差， <code>mag_sign</code>  为该差值的符号位。当 <code>x &lt; y</code>  时， <code>mag_diff</code>  为 <code>0xffffffff</code> 。当 <code>x == y</code>  时， <code>!(mag_x ^ mag_y)</code>  为 <code>0x1</code> 。因此 <code>mag_sign = !(mag_x ^ mag_y) | ((mag_diff &gt;&gt; 31) &amp; 0x1)</code> 。在判断数值之差部分时，我们需要保证两数符号位之差为 <code>0x0</code> ，而不是其他（如 x 正 y 负）。因此运算结果右半边的值为 <code>(!sign_diff) &amp; mag_sign</code> 。</p>\n<p>综上，最后的结果是 <code>((!sign_bit) &amp; sign_diff) | ((!sign_diff) &amp; mag_sign)</code> 。</p>\n<h2 id=\"logicalneg\"><a class=\"markdownIt-Anchor\" href=\"#logicalneg\">#</a> logicalNeg</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * logicalNeg - implement the ! operator, using all of</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *              the legal operators except !</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Legal ops: ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Max ops: 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">logicalNeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * if x == 0, x ^ 0x0 = 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"howmanybits\"><a class=\"markdownIt-Anchor\" href=\"#howmanybits\">#</a> howManyBits</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* howManyBits - return the minimum number of bits required to represent x in</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *             two's complement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *  Examples: howManyBits(12) = 5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *            howManyBits(298) = 10</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *            howManyBits(-5) = 4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *            howManyBits(0)  = 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *            howManyBits(-1) = 1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *            howManyBits(0x80000000) = 32</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  Max ops: 90</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *  Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">howManyBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * divide and conquer</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    * for positive number, the number of bits = the last position of 1 + 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    * for negative number, the number of bits = the last position of 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    * inverse negative number and deal with it as the same as positive number</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    * 1. judge the sign bit of x, if x is negative, inverse it</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    * 2. judge the high 16 bits, if true(high 16 bits != 0x0), result + 16</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    * 3. judge the high 8 bits, if true, result + 8</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    * 4. judge the high 4 bits, if true, result + 4</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * 5. judge the high 2 bits, if true, result + 2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 6. judge the high 1 bits, if true, result + 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * 7. judge the last 1 bit, if true, result + !!x</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * 8. the final sum must + 1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    * 9. return the result</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token comment\">// neg x if it's negative</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>sign <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token keyword\">int</span> b16<span class=\"token punctuation\">,</span> b8<span class=\"token punctuation\">,</span> b4<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">,</span> b0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token comment\">// int mask_16 = (1 &lt;&lt; 15) >> 15;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   b16 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token comment\">// int mask_8 = 0xff;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   b8 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\">// int mask_4 = 0xf;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   b4 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">// int mask_2 = 0x3;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   b2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   <span class=\"token comment\">// int mask_1 = 0x1;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   b1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token comment\">//! judge if the last bit == 1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   b0 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token keyword\">return</span> b16 <span class=\"token operator\">+</span> b8 <span class=\"token operator\">+</span> b4 <span class=\"token operator\">+</span> b2 <span class=\"token operator\">+</span> b1 <span class=\"token operator\">+</span> b0 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"floatscale2\"><a class=\"markdownIt-Anchor\" href=\"#floatscale2\">#</a> floatScale2</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// float</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * floatScale2 - Return bit-level equivalent of expression 2*f for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   floating point argument f.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Both the argument and result are passed as unsigned int's, but</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   they are to be interpreted as the bit-level representation of</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   single-precision floating point values.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   When argument is NaN, return argument</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">floatScale2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> uf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// first get the sign, exp and mag bit of the number</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// denormalized number</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// E = 1 - bias</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// frac = f</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">//! how to multiply a denormalized number? frac * 2!</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      f <span class=\"token operator\">=</span> f <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// special number</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// if frac = 0, then value = inf</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token comment\">// frac = 1 / 0;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token comment\">// if frac != 0, value = NaN</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">// normalized number</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token comment\">// E = e - bias</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// value = 1 + f</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      e <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"floatfloat2int\"><a class=\"markdownIt-Anchor\" href=\"#floatfloat2int\">#</a> floatFloat2Int</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * floatFloat2Int - Return bit-level equivalent of expression (int) f</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   for floating point argument f.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Argument is passed as unsigned int, but</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   it is to be interpreted as the bit-level representation of a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   single-precision floating point value.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Anything out of range (including NaN and infinity) should return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   0x80000000u.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">floatFloat2Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> uf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// first get the sign, exp and mag bit of the number</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// then get the exact sign, E and value of the number</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      s <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">int</span> E <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">float</span> frac <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">int</span> bias <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// denormalized number</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// E = 1 - bias</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      E <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// frac = f</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      frac <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">//! COMPARE WITH 0XFF INSTEAD OF ~0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// special number</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">// if frac = 0, then value = inf</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token comment\">// frac = 1 / 0;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         <span class=\"token comment\">// if frac != 0, value = NaN</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token comment\">// normalized number</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token comment\">// E = e - bias</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      E <span class=\"token operator\">=</span> e <span class=\"token operator\">-</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token comment\">// value = 1 + f</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      frac <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>E <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>E <span class=\"token operator\">></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token comment\">//! REMEMBER THE SITUATION THAT E > 31</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token keyword\">return</span> s <span class=\"token operator\">*</span> frac <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"floatpower2\"><a class=\"markdownIt-Anchor\" href=\"#floatpower2\">#</a> floatPower2</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   (2.0 raised to the power x) for any 32-bit integer x.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   The unsigned value that is returned should have the identical bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   representation as the single-precision floating-point number 2.0^x.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   If the result is too small to be represented as a denorm, return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   0. If too large, return +INF.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">floatPower2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">//! REMEMEBER THAT FLOATING POINT ITSELF IS IN THE FORMAT (-1)^S * M * 2.0^E</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// fit x into E</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//! MIND THE SITUATION THAT X IS TOO LARGE OR TOO SMALL</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      x <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "lab"
            ]
        }
    ]
}