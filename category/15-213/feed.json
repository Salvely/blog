{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"15-213\" category",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "url": "https://salvely.github.io/blog/2024/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/15-213/Data%20lab%20%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/",
            "title": "15213 Lab 1-data lab 实验总结",
            "date_published": "2024-02-05T07:50:22.000Z",
            "content_html": "<p>部分的题目我参考了一下网上的内容（出处已注明），其他的均为自己实现（有的题目的实现过程可能会有些繁琐），部分 dlc 检测出来可能会报些 error，但是 btest 均能过。</p>\n<blockquote>\n<p>没有 TA 可太难了！自己实现了一天多，终于苟完了。不算完美，但也能看吧。</p>\n</blockquote>\n<h2 id=\"bitxor\"><a class=\"markdownIt-Anchor\" href=\"#bitxor\">#</a> bitXor</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * bitXor - x^y using only ~ and &amp;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: bitXor(4, 5) = 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ~ &amp;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 14</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bitXor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * x + y = ~( ~x &amp; ~y)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bitXor 要求我们使用位操作来实现 <code>^</code>  运算符。根据运算定律我们知道:  <code>a ^ b = (a &amp; (~b)) | (b &amp; (~a))</code> 。但是问题来了，我们这里不允许使用 <code>|</code> ，只能用 <code>~</code>  和 <code>&amp;</code> 。那么我们就必须使用这两个操作符来实现 <code>|</code>  运算。<br>\n通过德摩根定律我们知道： <code>a | b = ~((~a) &amp; (~b))</code> 。这不就解决问题了嘛，所以将这两个式子综合一下，最后的结果是 <code>~((~(x &amp; ~y)) &amp; (~(y &amp; ~x)))</code></p>\n<h2 id=\"tmin\"><a class=\"markdownIt-Anchor\" href=\"#tmin\">#</a> tmin</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * tmin - return minimum two's complement integer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Max ops: 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">tmin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * the most significant bit = 1, others = 0, so (1 &lt;&lt; 31)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这题要求我们返回最小的补码整数，返回类型为 <code>int</code> 。首先，在二进制补码表示中，最高位的权值为 - 1，其他位的权值为 1。因此，最小的补码整数 tmin 的最高位为 1，其他位为 0。而题目中 <code>int</code>  类型为 32 位，因此只要返回 <code>(1 &lt;&lt; 31)</code>  即可。</p>\n<h2 id=\"istmax\"><a class=\"markdownIt-Anchor\" href=\"#istmax\">#</a> isTmax</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isTmax - returns 1 if x is the maximum, two's complement number,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *     and 0 otherwise</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | +</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 10</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isTmax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * Tmax ^ Tmin = 0xffffffff, ~0xffffffff = 0x0, !0x0 = 0x1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// return !(~(x ^ (1 &lt;&lt; 31)));</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * ~Tmax = Tmin -> ~Tmin + 1 = Tmin 且 Tmin != 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>tmax 是二进制补码中最大的数，通过分析这个数的特点，我们可以完成这道题目。</p>\n<ol>\n<li>该数除了最高位是 0 外，其他位均是 1。因此该数和 (1&lt;&lt;31)（也就是 tmin）的亦或（或者和）为 <code>0xffffffff</code> 。 <code>0xffffffff</code>  按位取反得到 <code>0x0</code> ，而 <code>0x0</code>  按位取反得到 <code>0x1</code> 。但是其他的数并没有这个特性。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>该数取反后得到 tmin，tmin 的一个特点是 tmin 和 -tmin 的表示相同。因此两者亦或得到 0。还有一个树也有这样的特性，也就是 0。因此我们需要排除 0 的可能性。我们使用 <code>&amp;</code>  操作符来实现两种特性的叠加。我本没有想到该方法，是从这篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQxMjY3OTU=\">知乎帖子</span>学习到的。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是题目不允许在该题中使用移位运算符，因此只能使用方法二。</p>\n<h2 id=\"alloddbits\"><a class=\"markdownIt-Anchor\" href=\"#alloddbits\">#</a> allOddBits</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * allOddBits - return 1 if all odd-numbered bits in word set to 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   where bits are numbered from 0 (least significant) to 31 (most significant)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Max ops: 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Rating: 2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">allOddBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * tear the number into 4 parts, get rid of the other digits except 0xaa</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * if the results are all the same, then compare it with 0xaa, if there are the same, xor returns 0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * otherwise not all odd bits in word set is set to 1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> third <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">int</span> fourth <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">&amp;</span> second <span class=\"token operator\">&amp;</span> third <span class=\"token operator\">&amp;</span> fourth<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于单个字节的奇数位，我们可以使用 <code>0xaa</code>  作为 mask。<br>\n本题目中我将位打成 4 个部分，每个部分与 mask 相与。如果每个奇数位都是 1 的话，四个部分的比较结果应该相同，都等于 <code>0xaa</code> ，该值与 <code>0xaa</code>  异或得到 <code>0x0</code> ，取 <code>!</code>  后得到 <code>0x1</code> 。否则该值不为 <code>0xaa</code> ，同 <code>0xaa</code>  亦或得到其他非零值，取 <code>!</code>  后得到 <code>0x0</code> 。</p>\n<h2 id=\"negate\"><a class=\"markdownIt-Anchor\" href=\"#negate\">#</a> negate</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * negate - return -x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: negate(1) = -1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该题目中我们需要求解某个数的相反数。在课堂中我们学过，一个数和它相反数的和为 0。那么如何获得其相反数呢？以 <code>x</code>  为例，我们知道 <code>x + ~x = ~0</code> ，也就是全 f，然后 <code>~0 + 1 = 0</code> 。因此， <code>-x</code>  的补码表示即为 <code>~x + 1</code> 。</p>\n<h2 id=\"isasciidigit\"><a class=\"markdownIt-Anchor\" href=\"#isasciidigit\">#</a> isAsciiDigit</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: isAsciiDigit(0x35) = 1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *            isAsciiDigit(0x3a) = 0.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *            isAsciiDigit(0x05) = 0.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Max ops: 15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isAsciiDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * least = (x &amp; 0xf) - 0xa</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * if least > 0 (with 0 in most significant bit) then least = 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    * else least = 1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">int</span> least <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0xa</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> least <span class=\"token operator\">&amp;</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我使用的方法是将该数拆分为最低位和其他位来比较。我们将最低位与 <code>0xa</code>  相减，如果求得的结果为负数，符号位即为 1，代表该值在 0-9 之间。接下来判断其他位是否为 <code>0x3</code> ，如果是，则和 <code>0x3</code>  异或结果为 0，通过逻辑 <code>!</code>  返回 1。</p>\n<h2 id=\"conditional\"><a class=\"markdownIt-Anchor\" href=\"#conditional\">#</a> conditional</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * conditional - same as x ? y : z</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: conditional(2,4,5) = 4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 16</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">conditional</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * judge if x != 0, if true, !!x = 1, return y, otherwise !!x = 0, return z</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// cond gets all f when !!x == 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> cond <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cond <span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>cond <span class=\"token operator\">&amp;</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们先获取 <code>x</code>  的值，如果 <code>x != 0</code> ，则 <code>!!x = 0x1</code> ，否则为 <code>0x0</code> 。扩展该值，当该值为 <code>0x1</code>  时与 <code>y</code>  相与得到 y。当该值为 <code>0x0</code> ，取反后与 z 相与得到 z。因为这两个值只取其一，当一边不为 0 时另一边必然为 0，因此两边用 <code>|</code>  连接。</p>\n<h2 id=\"islessorequal\"><a class=\"markdownIt-Anchor\" href=\"#islessorequal\">#</a> isLessOrEqual</h2>\n<blockquote>\n<p>本题要求使用最多 24 个运算符，但是这里我使用的过多了，应该会有更好的办法。期待有人指正。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * isLessOrEqual - if x &lt;= y  then return 1, else return 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   Example: isLessOrEqual(4,5) = 1.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Max ops: 24</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Rating: 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isLessOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// first compare their sign bit</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// return true if sign = 1(>0)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_diff <span class=\"token operator\">=</span> sign_x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>sign_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> sign_bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sign_diff <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// then compare the magnitude</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_x <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_y <span class=\"token operator\">=</span> y <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_diff <span class=\"token operator\">=</span> mag_x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>mag_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">int</span> mag_sign <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>mag_x <span class=\"token operator\">^</span> mag_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mag_diff <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 2 conditions return true:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * 1. sign of x = 1 and sign of y = 0</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * 2. sign of x and y equals, and magnitude of x &lt;= y</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sign_bit<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> sign_diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sign_diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> mag_sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要分几种情况：</p>\n<ol>\n<li>x 为负数，y 为正数，直接返回 <code>0x1</code></li>\n<li>x 和 y 同符号，比较数值部分。x &lt;= y 时，返回 <code>0x1</code> ；x &gt; y 时，返回 <code>0x0</code></li>\n<li>x 为正数，y 为负数，返回 <code>0x0</code></li>\n</ol>\n<p>其中 <code>sign_diff</code>  为两数符号位之差，此处分三种情况：</p>\n<ol>\n<li>x 为负数，符号位为 1；y 为正数，符号位为 0。那么两者符号位相减等于 <code>0x1</code> ，该值的符号位为 0。（这是我们要返回 <code>0x1</code>  的结果）</li>\n<li>x 为正数，符号位为 0；y 为负数，符号位为 1。那么两者符号位相减等于 <code>0xffffffff</code>  (-1)，该值的符号位为 1。（我们不要这个结果）</li>\n<li>x 和 y 的符号位相同，两者相减为 <code>0x0</code> ，该值的符号位为 0。（这里我们要看情况，看 <code>x</code>  是否和 <code>y</code>  相等）</li>\n</ol>\n<p>代码中 <code>sign_diff</code>  为两符号位之差， <code>sign_bit</code>  为该做差结果的最高位。当 x 和 y 的符号位不相同时，当 <code>sign_diff</code>  为 <code>0x1</code>  且 <code>sign_bit</code>  为 <code>0x0</code>  是，我们返回 <code>0x1</code> 。这也是运算结果 <code>|</code>  左半边的由来。</p>\n<p>代码中 <code>mag_diff</code>  为两者数值部分之差， <code>mag_sign</code>  为该差值的符号位。当 <code>x &lt; y</code>  时， <code>mag_diff</code>  为 <code>0xffffffff</code> 。当 <code>x == y</code>  时， <code>!(mag_x ^ mag_y)</code>  为 <code>0x1</code> 。因此 <code>mag_sign = !(mag_x ^ mag_y) | ((mag_diff &gt;&gt; 31) &amp; 0x1)</code> 。在判断数值之差部分时，我们需要保证两数符号位之差为 <code>0x0</code> ，而不是其他（如 x 正 y 负）。因此运算结果右半边的值为 <code>(!sign_diff) &amp; mag_sign</code> 。</p>\n<p>综上，最后的结果是 <code>((!sign_bit) &amp; sign_diff) | ((!sign_diff) &amp; mag_sign)</code> 。</p>\n<h2 id=\"logicalneg\"><a class=\"markdownIt-Anchor\" href=\"#logicalneg\">#</a> logicalNeg</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * logicalNeg - implement the ! operator, using all of</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *              the legal operators except !</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Legal ops: ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   Max ops: 12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">logicalNeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * if x == 0, x ^ 0x0 = 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这道题的难点在于：</p>\n<ol>\n<li>将 0 映射到 0x1</li>\n<li>将非 0 值映射到 0x0</li>\n</ol>\n<p>在一开始实现时，我的思路是对于 0，可以和 <code>0x0</code>  异或，判断为 0。但是对于非 0 的数，和 <code>0x0</code>  异或后还是他自己，我们也不知道 1 落在其中哪个位上，一个个位去找也不现实。那么就需要思考其他的办法。从 <code>0x0</code>  这个数和其他数的特点下手。这里我参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaW5nZmVuLmdpdGh1Yi5pby9jc2FwcC8yMDIxLzA0LzMwL0NTQVBQTGFiMDEuaHRtbA==\">这篇博客</span>。</p>\n<p>其给出的思路是：<br>\n-x 为 x 按位取反再 + 1。</p>\n<ul>\n<li>如果一个数为全 0，和相反数相 <code>|</code>  后结果全部是 0，加 1 后得到 <code>0x1</code></li>\n<li>否则结果最高位必然含有 1。向右移动 31 位获得 <code>~0</code> ，再加 1 得到 <code>0x0</code></li>\n</ul>\n<p>问题可改为，如何判断一个数全为 0 。注意到，-x 相当于按位取反再加一，如果 x 为 非 0 数，那么 x|(-x) 后必定为 -1 。利用这个性质，即可判断是否为 0 。</p>\n<h2 id=\"howmanybits\"><a class=\"markdownIt-Anchor\" href=\"#howmanybits\">#</a> howManyBits</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* howManyBits - return the minimum number of bits required to represent x in</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *             two's complement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *  Examples: howManyBits(12) = 5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *            howManyBits(298) = 10</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *            howManyBits(-5) = 4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *            howManyBits(0)  = 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *            howManyBits(-1) = 1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *            howManyBits(0x80000000) = 32</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; >></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  Max ops: 90</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *  Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">howManyBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    * divide and conquer</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    * for positive number, the number of bits = the last position of 1 + 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    * for negative number, the number of bits = the last position of 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    * inverse negative number and deal with it as the same as positive number</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    * 1. judge the sign bit of x, if x is negative, inverse it</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    * 2. judge the high 16 bits, if true(high 16 bits != 0x0), result + 16</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    * 3. judge the high 8 bits, if true, result + 8</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    * 4. judge the high 4 bits, if true, result + 4</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * 5. judge the high 2 bits, if true, result + 2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 6. judge the high 1 bits, if true, result + 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * 7. judge the last 1 bit, if true, result + !!x</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    * 8. the final sum must + 1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    * 9. return the result</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token comment\">// neg x if it's negative</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>sign <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token keyword\">int</span> b16<span class=\"token punctuation\">,</span> b8<span class=\"token punctuation\">,</span> b4<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">,</span> b0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token comment\">// int mask_16 = (1 &lt;&lt; 15) >> 15;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   b16 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token comment\">// int mask_8 = 0xff;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   b8 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\">// int mask_4 = 0xf;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   b4 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token comment\">// int mask_2 = 0x3;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   b2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   <span class=\"token comment\">// int mask_1 = 0x1;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   b1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token comment\">//! judge if the last bit == 1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   b0 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token keyword\">return</span> b16 <span class=\"token operator\">+</span> b8 <span class=\"token operator\">+</span> b4 <span class=\"token operator\">+</span> b2 <span class=\"token operator\">+</span> b1 <span class=\"token operator\">+</span> b0 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个题目中，我们主要采用分而治之的方法。分治方法的几道例题可以参考 CMU 15-213 课程的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MuY211LmVkdS9hZnMvY3MvYWNhZGVtaWMvY2xhc3MvMTUyMTMtZjIzL3d3dy9yZWNpdGF0aW9ucy9yZWMwMV9zb2x1dGlvbnMucGRm\"> Recitation Slides</span>。</p>\n<p>首先，我们可以看到，如果该数是一个正数，则其最高位必然是 0，该数的位数 = 最高一个 1 的位置 + 1；<br>\n如果该数是一个负数，该数的位数 = 最高一个 1 的位置。<br>\n我们不想那么麻烦，把正负数分开讨论，因此我们把负数翻转过来。</p>\n<p>在这道题中我们采用的方法是：</p>\n<ol>\n<li>判断高 16 位是否有 1（把数向右移动 16 位后，结果不为 0， <code>!!(x &gt;&gt; 16)</code> ）。 <code>b16 = !!(x &gt;&gt; 16) &lt;&lt; 4</code> 。如果是的话，把数值向右移动 16 位 <code>(x&gt;&gt;b16)</code> 。把 <code>b16</code>  添加到结果中去。这里一个妙用在于如果 <code>!!(x &gt;&gt; 16）= 0x1</code> ， <code>!!(x &gt;&gt; 16) &lt;&lt; 4</code>  可以直接起到获得数字 16 的方法，无需增加其他的运算。</li>\n<li>判断高 8 位是否有 1，操作同上</li>\n<li>判断高 4 位是否有 1，操作同上</li>\n<li>判断高 2 位是否有 1，操作同上</li>\n<li>判断高 1 位是否有 1，操作同上</li>\n<li>判断该位是否有 1</li>\n<li>结果 + 1（位数 = 最高一个 1 的位置 + 1）</li>\n<li>最后把所有判断结果加起来（每次判断的结果都是一个累加的位数，加在一起就是最后的总位数）</li>\n</ol>\n<h2 id=\"浮点数复习\"><a class=\"markdownIt-Anchor\" href=\"#浮点数复习\">#</a> 浮点数复习</h2>\n<p>在完成浮点数部分的题目之前，我们需要复习一下浮点数的和其表示方法：</p>\n<ul>\n<li>单精度浮点数：1 位符号位 + 8 位阶码 (exp) + 11 位尾数 (frac)</li>\n<li>双精度浮点数：1 位符号位 + 11 位阶码 (exp) + 52 位尾数 (frac)</li>\n</ul>\n<p>其中阶码使用移码表示。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">bias = 2^{k-1}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">bia</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>浮点数分为三类：</p>\n<ul>\n<li>规格化数：阶码不全为 1 也不全为 0，尾数前有隐含的 1，指数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">E=exp - bias</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">bia</span><span class=\"mord mathnormal\">s</span></span></span></span>，分布在非规格化数外侧</li>\n<li>非规格化数：阶码全为 0，尾数前隐含 0，指数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mn>1</mn><mo>−</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">E=1 - bias</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">bia</span><span class=\"mord mathnormal\">s</span></span></span></span>，主要分布在靠近 0 侧</li>\n<li>特殊值：阶码全为 1，若尾数全为 0，则为 <code>inf</code> ，否则为 <code>NaN</code></li>\n</ul>\n<h2 id=\"floatscale2\"><a class=\"markdownIt-Anchor\" href=\"#floatscale2\">#</a> floatScale2</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// float</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * floatScale2 - Return bit-level equivalent of expression 2*f for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   floating point argument f.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   Both the argument and result are passed as unsigned int's, but</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   they are to be interpreted as the bit-level representation of</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   single-precision floating point values.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   When argument is NaN, return argument</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">floatScale2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> uf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// first get the sign, exp and mag bit of the number</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// denormalized number</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// E = 1 - bias</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// frac = f</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">//! how to multiply a denormalized number? frac * 2!</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      f <span class=\"token operator\">=</span> f <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// special number</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// if frac = 0, then value = inf</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token comment\">// frac = 1 / 0;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token comment\">// if frac != 0, value = NaN</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">// normalized number</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token comment\">// E = e - bias</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// value = 1 + f</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      e <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>本题目要求是计算一个 unsigned 形式表示的浮点数  <code>* 2</code>  后的表示。在完成这题之前，我们首先把浮点数的几个部分提取出来，分几个情况讨论：</p>\n<ul>\n<li>非规格化数：指数不变，尾数乘 2。<strong>问题来了，这到底是为什么？因为当 exp 全为 0 时，exp = 0, E = 1 - bias, frac = 0.f。乘以 2 就相当于把 f 左移一位，最高位会进到 exp 的位置去。如果 f 最高位是 0，左移一位不影响 exp（全 0）。如果 f 最高位是 1，左移一位后该数变为规格化数，exp 变为 1，E 依然等于 1 - bias。实现了非规格化数到规格化数的平滑过渡（非常重要！）</strong></li>\n<li>规格化数：首先将指数 + 1，然后判断是否为特殊值，若是则返回 <code>uf</code> 。</li>\n<li>特殊值： <code>e = 0</code> ，直接返回 <code>uf</code> （根据题目意思）</li>\n</ul>\n<p>将符号位，指数和尾数三个部分拼凑起来，直接返回（本题中无需进行任何计算）。</p>\n<h2 id=\"floatfloat2int\"><a class=\"markdownIt-Anchor\" href=\"#floatfloat2int\">#</a> floatFloat2Int</h2>\n<blockquote>\n<p>本题中不允许使用 <code>double</code>  类型，我擅自用了，这里应该是不严谨的。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * floatFloat2Int - Return bit-level equivalent of expression (int) f</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   for floating point argument f.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   Argument is passed as unsigned int, but</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   it is to be interpreted as the bit-level representation of a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   single-precision floating point value.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   Anything out of range (including NaN and infinity) should return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   0x80000000u.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">floatFloat2Int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> uf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// first get the sign, exp and mag bit of the number</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">>></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// then get the exact sign, E and value of the number</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      s <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">int</span> E <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">float</span> frac <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">int</span> bias <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// denormalized number</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// E = 1 - bias</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      E <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// frac = f</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      frac <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">//! COMPARE WITH 0XFF INSTEAD OF ~0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// special number</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">// if frac = 0, then value = inf</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token comment\">// frac = 1 / 0;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         <span class=\"token comment\">// if frac != 0, value = NaN</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token comment\">// normalized number</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token comment\">// E = e - bias</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      E <span class=\"token operator\">=</span> e <span class=\"token operator\">-</span> bias<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token comment\">// value = 1 + f</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      frac <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>E <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>E <span class=\"token operator\">></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token comment\">//! REMEMBER THE SITUATION THAT E > 31</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0x80000000u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token keyword\">return</span> s <span class=\"token operator\">*</span> frac <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>本题需要返回浮点数转化后的 int 类型数值。需要我们对浮点数的结构有所了解，并且其转化为 int 后需要切割掉小数部分，此外，我们还需要判断指数过大的情况（溢出）。</p>\n<p>本题中我们采用的步骤是：</p>\n<ol>\n<li>提取出浮点数三个部分，计算符号位的值</li>\n<li>当 <code>e == 0</code>  时，为特殊值的情况， <code>E = 1 - bias</code> ， <code>frac = f</code></li>\n<li>当 <code>e == 0xff</code>  时（注意不是 <code>~0/0xffffffff</code> , 容易写错！），返回 <code>0x80000000u</code></li>\n<li>以上两种情况都不是，则该数为规格化数， <code>E = e - bias; frac = 1 + f;</code></li>\n</ol>\n<p>最后，我们需要进行<strong>特殊情况的分类讨论</strong>：</p>\n<ol>\n<li>E &lt; 0, 则最后生成的结果（无论规格化还是非规格化）肯定是个小数，打头的是 0 那种，要切割为 <code>int</code>  类型，小数部分就被切割掉了</li>\n<li>E &gt; 31, 超过了指数可以表示的范围（算是溢出了？），返回 <code>0x80000000u</code></li>\n<li>正常情况下返回 <code>s * frac * (1 &lt;&lt; E)</code></li>\n</ol>\n<h2 id=\"floatpower2\"><a class=\"markdownIt-Anchor\" href=\"#floatpower2\">#</a> floatPower2</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *   (2.0 raised to the power x) for any 32-bit integer x.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   The unsigned value that is returned should have the identical bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   representation as the single-precision floating-point number 2.0^x.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *   If the result is too small to be represented as a denorm, return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *   0. If too large, return +INF.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   Max ops: 30</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *   Rating: 4</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token function\">floatPower2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">//! REMEMEBER THAT FLOATING POINT ITSELF IS IN THE FORMAT (-1)^S * M * 2.0^E</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// fit x into E</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//! MIND THE SITUATION THAT X IS TOO LARGE OR TOO SMALL</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      x <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">unsigned</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为浮点数表示法本身就是以 2 为底，所以本实验就相当于如何把 x 转化为那个 8 位的阶码。因为 <code>阶码 = 指数 + bias</code> ，这里 <code>bias = 127</code> ，因此这里 <code>E = x + 127</code> 。然后和上一题一样，我们需要判断一下 x 的范围是否在 <code>0xff</code>  和 <code>0</code>  之间。最后将 x 移动到阶码的位置返回 ( <code>return x &lt;&lt; 23</code> ) 即可。</p>\n<h2 id=\"参考实现\"><a class=\"markdownIt-Anchor\" href=\"#参考实现\">#</a> 参考实现</h2>\n<p>在完成 data lab 过程中，我参考了部分如下几个博客的实现:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQxMjY3OTU=\">CSAPP 实验一：DataLab 详细讲解与满分代码</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NDk4Nzc0NzU=\">lab1 CSAPP：datalab</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTc0ODExMTI=\">CSAPP lab1: datalab</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaW5nZmVuLmdpdGh1Yi5pby9jc2FwcC8yMDIxLzA0LzMwL0NTQVBQTGFiMDEuaHRtbA==\">深入理解计算机系统之位操作实验</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vanlpMnlhL3AvMTU4ODExNzUuaHRtbA==\">CSAPP Data Lab 做题记录（下</span></li>\n</ul>\n",
            "tags": [
                "lab"
            ]
        }
    ]
}