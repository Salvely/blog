{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"包管理\" tag",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "url": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "title": "Debian包管理探索",
            "date_published": "2023-10-14T06:23:52.000Z",
            "content_html": "<h1 id=\"Linux-发行版\"><a href=\"#Linux-发行版\" class=\"headerlink\" title=\"Linux 发行版\"></a>Linux 发行版</h1><p>Linux 操作系统 &#x3D; Linux 内核 + 不同功能<br>但是因为内核和功能包有多种不同配置，因此 Linux 有多种发行版。<br>几种主要的发行版及其衍生是：</p>\n<ul>\n<li>Arch -&gt; Manjaro</li>\n<li>Debian -&gt; Ubuntu</li>\n<li>RHEL -&gt; Scientific Linux</li>\n</ul>\n<h1 id=\"安装软件的困惑？\"><a href=\"#安装软件的困惑？\" class=\"headerlink\" title=\"安装软件的困惑？\"></a>安装软件的困惑？</h1><p>:::default<br>我们要在 Linux 操作系统上安装一个软件，思考如下问题：<br>:::</p>\n<ul>\n<li>你需要哪些文件？如何获取他们？</li>\n<li>用户需要做多少工作？</li>\n<li>开发者需要做多少工作？</li>\n<li>在发行软件的过程中还有其他人参与工作吗？</li>\n<li>如何更新软件包？</li>\n<li>如何保证软件包来源的安全性？</li>\n</ul>\n<p>:::default<br>一个简陋的安装方案是：直接下载一堆文件。这其中包含的内容有：<br>:::</p>\n<ul>\n<li>编译好的二进制可执行文件</li>\n<li>配置信息</li>\n<li>说明文档</li>\n<li>许可证(License)</li>\n<li>其他</li>\n</ul>\n<p>:::default<br>那么问题来了：<br>:::</p>\n<ul>\n<li>我们需要哪些文件？</li>\n<li>这些文件放在哪里？</li>\n<li>如何进行环境配置？</li>\n<li>这个安装包和我的系统兼容吗？</li>\n<li>我怎么更新呢？</li>\n</ul>\n<p>:::default<br>一个进阶的安装方案是：下载一个压缩包。但是我们也面临一些问题：<br>:::</p>\n<ul>\n<li>这里面的文件是编译好的还是未编译的？</li>\n<li>软件包之间存在依赖关系怎么办？</li>\n<li>这个软件如何应对不同 Linux 发行版的需求？</li>\n<li>如何更新？如何保证更新后的版本可靠？</li>\n</ul>\n<h1 id=\"解决方案：打包！\"><a href=\"#解决方案：打包！\" class=\"headerlink\" title=\"解决方案：打包！\"></a>解决方案：打包！</h1><h2 id=\"软件包\"><a href=\"#软件包\" class=\"headerlink\" title=\"软件包\"></a>软件包</h2><p>包是 Linux 操作系统上软件的组织方式。</p>\n<h2 id=\"仓库（repository）\"><a href=\"#仓库（repository）\" class=\"headerlink\" title=\"仓库（repository）\"></a>仓库（<code>repository</code>）</h2><p>仓库是一系列软件包的合集。<code>Debian</code>上常见的仓库包括：</p>\n<ul>\n<li>Debian stable (all the packages available to install on a default Debian stable install)</li>\n<li>Debian security updates</li>\n<li>Debian backports</li>\n<li>Docker’s custom repositories</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>每个 Linux 发行版都维护仓库，里面列举了该仓库中可安装的所有软件包</li>\n<li>包维护者负责对开发者的软件进行打包</li>\n<li>对于不同的 Linux 发行版，打包的方式不同</li>\n</ul>\n<h1 id=\"包的安装过程\"><a href=\"#包的安装过程\" class=\"headerlink\" title=\"包的安装过程\"></a>包的安装过程</h1><ol>\n<li>从包列表中读取该包</li>\n<li>查看该包的所有依赖项</li>\n<li>看看依赖项中哪些包已经安装了</li>\n<li>安装未安装的依赖</li>\n<li>解压缩文件等</li>\n<li>完成一些安装后需要做的工作，如将其作为<code>service</code>启动</li>\n</ol>\n<!-- # 仓库 vs App Store\n仓库和App Store均是集中管理包的地方，但是他们略有不同。\n## 软件包更新方式\n仓库：\n- 维护者负责发布更新\n- 部分不稳定的更新会延迟\n- 用户可自己选择使用测试版\nApp Store：\n- 开发者直接向用户推送更新\n- 可能随机挑选用户测试更新\n## 安全方面和依赖管理方面\n仓库：\n- 用户可信赖开发者\nApp Store:\n- 具有隔离性，一切依赖开发者决定 -->\n\n<h1 id=\"包更新方式\"><a href=\"#包更新方式\" class=\"headerlink\" title=\"包更新方式\"></a>包更新方式</h1><ul>\n<li>部分 Linux 发行版采用<code>periodic release</code>方式，例如<code>Debian</code>，2 年一发行</li>\n<li>部分采用<code>rolling release</code>方式，例如<code>Arch</code>，发行版更新更快，但是是以稳定性为代价<br>更多内容参考这里：<span class=\"exturl\" data-url=\"aHR0cHM6Ly91dGNjLnV0b3JvbnRvLmNhL35ja3Mvc3BhY2UvYmxvZy9saW51eC9Sb2xsaW5nVnNSZWxlYXNlc05vV2lubmVy\">Rolling distribution releases versus periodic releases are a tradeoff</span></li>\n</ul>\n<h1 id=\"包管理工具\"><a href=\"#包管理工具\" class=\"headerlink\" title=\"包管理工具\"></a>包管理工具</h1><h1 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h1><ol>\n<li><code>apt upgrade</code></li>\n<li><code>apt update</code>：生成列表，显示仓库中包含哪些包</li>\n<li><code>apt install &lt;packagename&gt;</code>：安装包</li>\n<li><code>apt remove &lt;packagename&gt;</code>：卸载包</li>\n<li><code>apt dist-upgrade</code>：更新包并解决其相关依赖冲突&#x2F;缺失等</li>\n<li><code>apt search &lt;packagename&gt;</code>：搜索包</li>\n<li><code>apt install ./&lt;packagename&gt;.deb</code>：安装本地的<code>deb</code>包</li>\n</ol>\n<h1 id=\"手动安装包\"><a href=\"#手动安装包\" class=\"headerlink\" title=\"手动安装包\"></a>手动安装包</h1><p>包中通常含有<code>Makefile</code>文件，我们可以手动的进行安装。<br>步骤：</p>\n<ol>\n<li>安装所需的相关包，例如<code>gcc</code>等</li>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>make install</code></li>\n</ol>\n<p>不便之处：卸载麻烦。</p>\n<h1 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h1><p>Debian 包通常具有如下几个目录和文件：</p>\n<ul>\n<li><code>control</code>：涵盖包的元信息，例如包的大小、版本、依赖</li>\n<li><code>debian-binary</code></li>\n<li><code>etc</code>：配置文件</li>\n<li><code>md5sums</code>：文件有效性检验</li>\n<li><code>usr</code><ul>\n<li><code>bin</code>：可执行文件，要加到<code>$PATH</code>环境变量中</li>\n<li><code>share</code>：文档，man page，本地化设置<ul>\n<li><code>doc</code>：文档</li>\n<li><code>info</code>: info page</li>\n<li><code>locale</code>：本地化设置</li>\n<li><code>man</code>：man page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"下载包\"><a href=\"#下载包\" class=\"headerlink\" title=\"下载包\"></a>下载包</h1><p>使用命令<code>apt download &lt;packagename&gt;.deb</code></p>\n<h1 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h1><p>使用命令<code>apt isntall &lt;packagename&gt;</code></p>\n<h1 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h1><h2 id=\"使用什么包？\"><a href=\"#使用什么包？\" class=\"headerlink\" title=\"使用什么包？\"></a>使用什么包？</h2><p>在<code>/etc/apt/sources.list</code>和<code>/etc/apt/sources.list.d</code>文件中维护镜像源：</p>\n<pre><code class=\"bash\">deb http://mirrors/debian/ stretch-backports main contrib non-free\ndeb http://mirrors/debian-security/ stretch/updates main contrib non-free\ndeb-src http://mirrors/debian-security/ stretch/updates main contrib non-free\ndeb http://mirrors/debian/ stretch-updates main contrib non-free\ndeb-src http://mirrors/debian/ stretch-updates main contrib non-free\ndeb http://mirrors/debian/ stretch main contrib non-free\ndeb-src http://mirrors/debian/ stretch main contrib non-free\n# OCF\ndeb http://apt/ stretch-backports main\ndeb-src http://apt/ stretch-backports main\ndeb http://apt/ stretch main\ndeb-src http://apt/ stretch main\ndeb http://mirrors/puppetlabs/apt/ stretch puppet\n</code></pre>\n<p>:::info<br>我个人的理解是，<code>repository</code>是指仓库名，仓库中列举了该仓库有哪些软件包。而<code>mirror list</code>指明了从哪里下载这个仓库中的软件包（网络地址）？在清华的镜像中有这个仓库，而在中科大的镜像中也有这个仓库。镜像中仓库的内容随着官方仓库内容的更新而更新？<br>:::<br>不同的仓库中的软件版本可能不同，需要通过<code>apt policy</code>来看软件包所属的仓库。</p>\n<h2 id=\"这里面每行内容如何解读？（摘录原文）\"><a href=\"#这里面每行内容如何解读？（摘录原文）\" class=\"headerlink\" title=\"这里面每行内容如何解读？（摘录原文）\"></a>这里面每行内容如何解读？（摘录原文）</h2><pre><code class=\"bash\">deb http://mirrors/debian/ stretch-backports main contrib non-free\n</code></pre>\n<blockquote>\n<p>deb is binary package source. deb-src indicates src packages.<br>http:&#x2F;&#x2F;… describes the location<br>stretch-backports means that this is for Jessie stretch and from a backport repository<br>main means that the repo has packages licensed under Debian Free Software Guidelines (DFSG)<br>contrib repos have packages licensed under DSFG but require non-free dependencies<br>non-free repos have packages that do not comply with DSFG</p>\n</blockquote>\n<h1 id=\"自己组包\"><a href=\"#自己组包\" class=\"headerlink\" title=\"自己组包\"></a>自己组包</h1><h2 id=\"usr-目录下几个重要的目录\"><a href=\"#usr-目录下几个重要的目录\" class=\"headerlink\" title=\"&#x2F;usr 目录下几个重要的目录\"></a>&#x2F;usr 目录下几个重要的目录</h2><ul>\n<li><code>/usr/bin</code> 可执行文件</li>\n<li><code>/usr/lib</code> 相关的库</li>\n<li><code>/usr/include</code> 头文件</li>\n<li><code>/usr/share</code> 文档等等</li>\n</ul>\n<h2 id=\"打包过程\"><a href=\"#打包过程\" class=\"headerlink\" title=\"打包过程\"></a>打包过程</h2><ol>\n<li>构建好目录</li>\n<li>使用<code>fpm</code>工具(<code>Ruby Gem</code>)</li>\n</ol>\n<pre><code class=\"bash\">$ sudo apt install ruby-dev\n$ sudo gem install fpm\n$ fpm -s dir -t deb -n [name here] -v [version #] -C [the directory with the /usr folder]\n</code></pre>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVJNTlBSSE5vaDRhNUtXd1hZOGZCV0o0OW5CYWZ4Ym80Zy1PdlNaWjg1VjgvZWRpdCNzbGlkZT1pZC5nNTM2NGNlYzI4Y18wXzEx\">Packaging</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTIvI2dyYWRpbmctbm90ZQ==\">Advanced Lab 2 - Packages and Packaging and Troubleshooting</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVVKSE83Zlhvay02Uk43REFKNVNQVHFjQ1hpUlNSOGhwR1p4OU9RTW5NT1UvZWRpdCNzbGlkZT1pZC5w\">Distros, Packaging, and Compiling</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYjQvI3doYXQtaXMtYS1kaXN0cmlidXRpb24=\">Beginner Lab 4 - Debian, packages, compiling software</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0vd2lraQ==\">FPM 文档</span></li>\n</ul>\n",
            "tags": [
                "Linux",
                "Debian",
                "包管理"
            ]
        }
    ]
}