{
    "version": "https://jsonfeed.org/version/1",
    "title": "望春风 • All posts by \"包管理\" tag",
    "description": "计算机&数理&文学爱好者，喜欢健身、下厨、听音乐和看电影",
    "home_page_url": "https://salvely.github.io/blog",
    "items": [
        {
            "id": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "url": "https://salvely.github.io/blog/2023/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Debian/Debain%E5%8C%85%E7%AE%A1%E7%90%86/",
            "title": "Debian包管理初探",
            "date_published": "2023-10-14T06:23:52.000Z",
            "content_html": "<h1 id=\"linux-发行版\"><a class=\"markdownIt-Anchor\" href=\"#linux-发行版\">#</a> Linux 发行版</h1>\n<p>Linux 操作系统 = Linux 内核 + 不同功能<br>\n但是因为内核和功能包有多种不同配置，因此 Linux 有多种发行版。<br>\n几种主要的发行版及其衍生是：</p>\n<ul>\n<li>Arch -&gt; Manjaro</li>\n<li>Debian -&gt; Ubuntu</li>\n<li>RHEL -&gt; Scientific Linux</li>\n</ul>\n<h1 id=\"安装软件的困惑\"><a class=\"markdownIt-Anchor\" href=\"#安装软件的困惑\">#</a> 安装软件的困惑？</h1>\n<div class=\"note default\">\n<p>我们要在 Linux 操作系统上安装一个软件，思考如下问题：</p>\n</div>\n<ul>\n<li>你需要哪些文件？如何获取他们？</li>\n<li>用户需要做多少工作？</li>\n<li>开发者需要做多少工作？</li>\n<li>在发行软件的过程中还有其他人参与工作吗？</li>\n<li>如何更新软件包？</li>\n<li>如何保证软件包来源的安全性？</li>\n</ul>\n<div class=\"note default\">\n<p>一个简陋的安装方案是：直接下载一堆文件。这其中包含的内容有：</p>\n</div>\n<ul>\n<li>编译好的二进制可执行文件</li>\n<li>配置信息</li>\n<li>说明文档</li>\n<li>许可证 (License)</li>\n<li>其他</li>\n</ul>\n<div class=\"note default\">\n<p>那么问题来了：</p>\n</div>\n<ul>\n<li>我们需要哪些文件？</li>\n<li>这些文件放在哪里？</li>\n<li>如何进行环境配置？</li>\n<li>这个安装包和我的系统兼容吗？</li>\n<li>我怎么更新呢？</li>\n</ul>\n<div class=\"note default\">\n<p>一个进阶的安装方案是：下载一个压缩包。但是我们也面临一些问题：</p>\n</div>\n<ul>\n<li>这里面的文件是编译好的还是未编译的？</li>\n<li>软件包之间存在依赖关系怎么办？</li>\n<li>这个软件如何应对不同 Linux 发行版的需求？</li>\n<li>如何更新？如何保证更新后的版本可靠？</li>\n</ul>\n<h1 id=\"解决方案打包\"><a class=\"markdownIt-Anchor\" href=\"#解决方案打包\">#</a> 解决方案：打包！</h1>\n<h2 id=\"什么是包\"><a class=\"markdownIt-Anchor\" href=\"#什么是包\">#</a> 什么是包？</h2>\n<p>包是 Linux 操作系统上软件的组织方式。</p>\n<h2 id=\"什么是仓库repository\"><a class=\"markdownIt-Anchor\" href=\"#什么是仓库repository\">#</a> 什么是仓库（ <code>repository</code> ）？</h2>\n<p>仓库是一系列软件包的合集列表。 <code>Debian</code>  上常见的仓库包括：</p>\n<ul>\n<li>Debian stable (all the packages available to install on a default Debian stable install)</li>\n<li>Debian security updates</li>\n<li>Debian backports</li>\n<li>Docker’s custom repositories</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>每个 Linux 发行版都维护仓库，里面列举了该仓库中可安装的所有软件包</li>\n<li>包维护者负责对开发者的软件进行打包</li>\n<li>对于不同的 Linux 发行版，打包的方式不同</li>\n</ul>\n<div class=\"note info\">\n<p>包和仓库区别的详细解释参考这里:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMDkwNzU4L3doYXQtYXJlLXBhY2thZ2VzLWFuZC1yZXBvc2l0b3JpZXM=\">what are packages and repositories</span></li>\n<li><a href=\"https://linux.cn/article-14994-1.html\"> <code>apt-update</code>  和 <code>apt-upgrade</code>  的区别</a></li>\n</ul>\n</div>\n<h1 id=\"包的安装过程\"><a class=\"markdownIt-Anchor\" href=\"#包的安装过程\">#</a> 包的安装过程</h1>\n<ol>\n<li>从包列表中读取该包</li>\n<li>查看该包的所有依赖项</li>\n<li>看看依赖项中哪些包已经安装了</li>\n<li>安装未安装的依赖</li>\n<li>解压缩文件等</li>\n<li>完成一些安装后需要做的工作，如将其作为 <code>service</code>  启动</li>\n</ol>\n<!-- # 仓库 vs App Store\n仓库和App Store均是集中管理包的地方，但是他们略有不同。\n## 软件包更新方式\n仓库：\n- 维护者负责发布更新\n- 部分不稳定的更新会延迟\n- 用户可自己选择使用测试版\nApp Store：\n- 开发者直接向用户推送更新\n- 可能随机挑选用户测试更新\n## 安全方面和依赖管理方面\n仓库：\n- 用户可信赖开发者\nApp Store:\n- 具有隔离性，一切依赖开发者决定 -->\n<h1 id=\"包更新方式\"><a class=\"markdownIt-Anchor\" href=\"#包更新方式\">#</a> 包更新方式</h1>\n<ul>\n<li>部分 Linux 发行版采用 <code>periodic release</code>  方式，例如 <code>Debian</code> ，2 年一发行</li>\n<li>部分采用 <code>rolling release</code>  方式，例如 <code>Arch</code> ，发行版更新更快，但是是以稳定性为代价<br>\n更多内容参考这里：<span class=\"exturl\" data-url=\"aHR0cHM6Ly91dGNjLnV0b3JvbnRvLmNhL35ja3Mvc3BhY2UvYmxvZy9saW51eC9Sb2xsaW5nVnNSZWxlYXNlc05vV2lubmVy\">Rolling distribution releases versus periodic releases are a tradeoff</span></li>\n</ul>\n<h1 id=\"自动化包管理工具\"><a class=\"markdownIt-Anchor\" href=\"#自动化包管理工具\">#</a> 自动化包管理工具</h1>\n<h2 id=\"apt\"><a class=\"markdownIt-Anchor\" href=\"#apt\">#</a>  <code>apt</code></h2>\n<ol>\n<li><code>apt update</code> ：生成列表，显示仓库中包含哪些包</li>\n<li><code>apt upgrade</code> / <code>apt dist-upgrade</code> ：把列表中的包升级到最新版本</li>\n<li><code>apt policy &lt;packagename&gt;</code> ：列举可安装的包版本</li>\n<li><code>apt -t [targetrelease] install [package]</code> ：安装特定版本包</li>\n<li><code>apt install &lt;packagename&gt;</code> ：安装包</li>\n<li><code>apt remove &lt;packagename&gt;</code> ：卸载包</li>\n<li><code>apt search &lt;packagename&gt;</code> ：搜索包</li>\n<li><code>apt install ./&lt;packagename&gt;.deb</code> ：安装本地的 <code>deb</code>  包</li>\n<li><code>apt download &lt;packagename&gt;.deb</code> ：下载包</li>\n</ol>\n<div class=\"note info\">\n<p>几种不同命令的区别参考这里：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xOTQ2NTEvd2h5LXVzZS1hcHQtZ2V0LXVwZ3JhZGUtaW5zdGVhZC1vZi1hcHQtZ2V0LWRpc3QtdXBncmFkZQ==\">Why use apt-get upgrade instead of apt-get dist-upgrade?</span></li>\n</ul>\n</div>\n<h2 id=\"dpkg多用于安装本地包\"><a class=\"markdownIt-Anchor\" href=\"#dpkg多用于安装本地包\">#</a>  <code>dpkg</code> : 多用于安装本地包</h2>\n<ol>\n<li><code>dpkg -i [packagefilename]</code> ：安装本地包</li>\n<li><code>dpkg --remove [packagename]</code> ：卸载本地包</li>\n<li><code>dpkg -I [packagename]</code> ：查看本地包的更多信息</li>\n<li><code>dpkg --configure -a</code> ：查看所有解压了但是还没安装的包</li>\n</ol>\n<h2 id=\"使用什么包\"><a class=\"markdownIt-Anchor\" href=\"#使用什么包\">#</a> 使用什么包？</h2>\n<p>在 <code>/etc/apt/sources.list</code>  和 <code>/etc/apt/sources.list.d</code>  文件中维护镜像源：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deb http://mirrors/debian/ stretch-backports main contrib non-free</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>deb http://mirrors/debian-security/ stretch/updates main contrib non-free</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deb-src http://mirrors/debian-security/ stretch/updates main contrib non-free</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deb http://mirrors/debian/ stretch-updates main contrib non-free</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>deb-src http://mirrors/debian/ stretch-updates main contrib non-free</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>deb http://mirrors/debian/ stretch main contrib non-free</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>deb-src http://mirrors/debian/ stretch main contrib non-free</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># OCF</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>deb http://apt/ stretch-backports main</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>deb-src http://apt/ stretch-backports main</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>deb http://apt/ stretch main</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>deb-src http://apt/ stretch main</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>deb http://mirrors/puppetlabs/apt/ stretch puppet</pre></td></tr></table></figure><div class=\"note info\">\n<p>我个人的理解是， <code>repository</code>  是指仓库名，仓库中列举了该仓库有哪些软件包。而 <code>mirror list</code>  指明了从哪里下载这个仓库中的软件包（网络地址）？在清华的镜像中有这个仓库，而在中科大的镜像中也有这个仓库。镜像中仓库的内容随着官方仓库内容的更新而更新？<br>\n关于什么是镜像，请看这里:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy85MTMxODAvd2hhdC1hcmUtbWlycm9ycw==\">What are mirrors？</span></li>\n</ul>\n</div>\n<p>不同的仓库中的软件版本可能不同，需要通过 <code>apt policy</code>  来看软件包所属的仓库。</p>\n<h2 id=\"每行内容如何解读\"><a class=\"markdownIt-Anchor\" href=\"#每行内容如何解读\">#</a> 每行内容如何解读？</h2>\n<div class=\"note info\">\n<p>以下内容摘自 UC Berkeley System Admin Decal 原文</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deb http://mirrors/debian/ stretch-backports main contrib non-free</pre></td></tr></table></figure><blockquote>\n<p><code>deb</code>  is binary package source.  <code>deb-src</code>  indicates src packages.<br>\n <code>http://…</code>  describes the location<br>\n <code>stretch-backports</code>  means that this is for  <code>Jessie stretch</code>  and from a  <code>backport</code>  repository<br>\n <code>main</code>  means that the repo has packages licensed under  <code>Debian Free Software Guidelines (DFSG)</code> <br>\n <code>contrib</code>  repos have packages licensed under  <code>DSFG</code>  but require  <code>non-free dependencies</code> <br>\n <code>non-free</code>  repos have packages that do not comply with  <code>DSFG</code></p>\n</blockquote>\n<h1 id=\"手动安装包\"><a class=\"markdownIt-Anchor\" href=\"#手动安装包\">#</a> 手动安装包</h1>\n<p>包中通常含有 <code>Makefile</code>  文件，我们可以手动的进行安装。<br>\n步骤：</p>\n<ol>\n<li>安装所需的相关包，例如 <code>gcc</code>  等</li>\n<li><code>./configure</code></li>\n<li><code>make</code></li>\n<li><code>make install</code></li>\n</ol>\n<p>不便之处：卸载麻烦。</p>\n<h1 id=\"包结构\"><a class=\"markdownIt-Anchor\" href=\"#包结构\">#</a> 包结构</h1>\n<p>Debian 包通常具有如下几个目录和文件：</p>\n<ul>\n<li><code>control</code> ：涵盖包的元信息，例如包的大小、版本、依赖</li>\n<li><code>debian-binary</code></li>\n<li><code>etc</code> ：配置文件</li>\n<li><code>md5sums</code> ：文件有效性检验</li>\n<li><code>usr</code>\n<ul>\n<li><code>bin</code> ：可执行文件，要加到 <code>$PATH</code>  环境变量中</li>\n<li><code>share</code> ：文档，man page，本地化设置\n<ul>\n<li><code>doc</code> ：文档</li>\n<li><code>info</code> : info page</li>\n<li><code>locale</code> ：本地化设置</li>\n<li><code>man</code> ：man page</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自己组包\"><a class=\"markdownIt-Anchor\" href=\"#自己组包\">#</a> 自己组包</h1>\n<h2 id=\"usr-目录下几个重要的目录\"><a class=\"markdownIt-Anchor\" href=\"#usr-目录下几个重要的目录\">#</a> /usr 目录下几个重要的目录</h2>\n<ul>\n<li><code>/usr/bin</code>  二进制可执行文件</li>\n<li><code>/usr/lib</code>  相关的库</li>\n<li><code>/usr/include</code>  头文件</li>\n<li><code>/usr/share</code>  文档等等</li>\n</ul>\n<h2 id=\"打包过程将hellopenguinc程序打包\"><a class=\"markdownIt-Anchor\" href=\"#打包过程将hellopenguinc程序打包\">#</a> 打包过程：将 <code>hellopenguin.c</code>  程序打包</h2>\n<h3 id=\"初始准备\"><a class=\"markdownIt-Anchor\" href=\"#初始准备\">#</a> 初始准备</h3>\n<ol>\n<li>编写 <code>hellopenguin.c</code>  程序</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Penguin!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>编译 <code>hellopenguin.c</code>  程序，生成可执行文件 <code>hellopenguin</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc hellopenguin.c <span class=\"token parameter variable\">-o</span> hellopenguin</pre></td></tr></table></figure><h3 id=\"打包环境准备\"><a class=\"markdownIt-Anchor\" href=\"#打包环境准备\">#</a> 打包环境准备</h3>\n<ol>\n<li>使用 <code>fpm</code>  工具 ( <code>Ruby Gem</code> )</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> ruby-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">sudo</span> gem <span class=\"token function\">install</span> fpm</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ fpm <span class=\"token parameter variable\">-s</span> <span class=\"token function\">dir</span> <span class=\"token parameter variable\">-t</span> deb <span class=\"token parameter variable\">-n</span> <span class=\"token punctuation\">[</span>name here<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-v</span> <span class=\"token punctuation\">[</span>version <span class=\"token comment\">#] -C [the directory with the /usr folder]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>如果 <code>gem</code>  安装 <code>fpm</code>  过慢的话，需要给 ruby 环境换源，命令如下（这里使用清华源）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加镜像源并移除默认源</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gem sources <span class=\"token parameter variable\">--add</span> https://mirrors.tuna.tsinghua.edu.cn/rubygems/ <span class=\"token parameter variable\">--remove</span> https://rubygems.org/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 列出已有源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gem sources <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 应该只有镜像源一个</span></pre></td></tr></table></figure><p>或者在 <code>~/.gemrc</code>  中将 <code>https://mirrors.tuna.tsinghua.edu.cn/rubygems/</code>  加到 <code>sources</code>  字段。</p>\n</div>\n<ol start=\"3\">\n<li>查看 <code>fpm</code>  是否安装，输入 <code>fpm</code></li>\n</ol>\n<h3 id=\"创建包文件夹\"><a class=\"markdownIt-Anchor\" href=\"#创建包文件夹\">#</a> 创建包文件夹</h3>\n<ol>\n<li>创建目录 <code>packpenguin/usr/bin</code> ，将 <code>hellopenguin</code>  放进去</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> packpenguin/usr/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> hellopenguin packpenguin/usr/bin</pre></td></tr></table></figure><ol start=\"2\">\n<li>在 <code>packpenguin</code>  的父目录中，使用 <code>fpm</code>  进行打包，命令如下：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fpm <span class=\"token parameter variable\">-s</span> <span class=\"token function\">dir</span> <span class=\"token parameter variable\">-t</span> deb <span class=\"token parameter variable\">-n</span> hellopenguin <span class=\"token parameter variable\">-v</span> <span class=\"token number\">1.0</span>~ocf1 <span class=\"token parameter variable\">-C</span> packpenguin</pre></td></tr></table></figure><p>其中几个字段解释如下：</p>\n<ul>\n<li><code>-s</code> ：使用一个目录构建</li>\n<li><code>-t</code> ：生成 <code>deb</code>  包</li>\n<li><code>-n</code> ：输出包的名字叫 <code>hellopenguin</code></li>\n<li><code>-v</code> ：版本号为 <code>1.0~ocf1</code></li>\n<li><code>-C</code> : 由 <code>packpenguin</code>  目录生成</li>\n</ul>\n<ol start=\"3\">\n<li>安装我们组建的包: <code>sudo dpkg -i ./hellopenguin_1.0~ocf1_amd64.deb</code></li>\n<li>输入 <code>hellopenguin</code> ，运行 <code>hellopenguin</code> ，可以看到输出了 <code>Hello Penguin!</code></li>\n</ol>\n<div class=\"note info\">\n<p>要卸载我们安装的包，可以使用 <code>dpkg --remove hellopenguin</code>  命令。</p>\n</div>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVJNTlBSSE5vaDRhNUtXd1hZOGZCV0o0OW5CYWZ4Ym80Zy1PdlNaWjg1VjgvZWRpdCNzbGlkZT1pZC5nNTM2NGNlYzI4Y18wXzEx\">Packaging</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYTIvI2dyYWRpbmctbm90ZQ==\">Advanced Lab 2 - Packages and Packaging and Troubleshooting</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMVVKSE83Zlhvay02Uk43REFKNVNQVHFjQ1hpUlNSOGhwR1p4OU9RTW5NT1UvZWRpdCNzbGlkZT1pZC5w\">Distros, Packaging, and Compiling</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWNhbC5vY2YuYmVya2VsZXkuZWR1L2FyY2hpdmVzLzIwMjItc3ByaW5nL2xhYnMvYjQvI3doYXQtaXMtYS1kaXN0cmlidXRpb24=\">Beginner Lab 4 - Debian, packages, compiling software</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0vd2lraQ==\">FPM 文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90bGRyLnNoLw==\">TLDR 页面</span></li>\n</ul>\n",
            "tags": [
                "Debian",
                "Linux",
                "包管理"
            ]
        }
    ]
}